{
  "BlockLangDef":{
    "@lang-version":"17",
    "@ya-version":"75",
    "BlockColors":{
      "BlockColor":[
        {
          "@name":"setter",
          "@rgb-value":"162 205 250"
        },
        {
          "@name":"text",
          "@rgb-value":"248 208 143"
        },
        {
          "@name":"list",
          "@rgb-value":"255 251 211"
        },
        {
          "@name":"math",
          "@rgb-value":"216 237 145"
        },
        {
          "@name":"event",
          "@rgb-value":"191 217 108"
        },
        {
          "@name":"logic",
          "@rgb-value":"255 174 128"
        },
        {
          "@name":"control",
          "@rgb-value":"252 233 157"
        },
        {
          "@name":"colors",
          "@rgb-value":"191 217 108"
        },
        {
          "@name":"getter",
          "@rgb-value":"217 229 255"
        },
        {
          "@name":"call",
          "@rgb-value":"198 193 232"
        },
        {
          "@name":"grey",
          "@rgb-value":"187 187 187"
        },
        {
          "@name":"ode-none",
          "@rgb-value":"255 255 255"
        },
        {
          "@name":"ode-black",
          "@rgb-value":"0 0 0"
        },
        {
          "@name":"ode-blue",
          "@rgb-value":"0 0 255"
        },
        {
          "@name":"ode-cyan",
          "@rgb-value":"0 255 255"
        },
        {
          "@name":"ode-dark-gray",
          "@rgb-value":"68 68 68"
        },
        {
          "@name":"ode-gray",
          "@rgb-value":"136 136 136"
        },
        {
          "@name":"ode-green",
          "@rgb-value":"00 255 00"
        },
        {
          "@name":"ode-light-gray",
          "@rgb-value":"204 204 204"
        },
        {
          "@name":"ode-magenta",
          "@rgb-value":"255 0 255"
        },
        {
          "@name":"ode-orange",
          "@rgb-value":"255 200 0"
        },
        {
          "@name":"ode-pink",
          "@rgb-value":"255 175 175"
        },
        {
          "@name":"ode-red",
          "@rgb-value":"255 0 0"
        },
        {
          "@name":"ode-white",
          "@rgb-value":"255 255 255"
        },
        {
          "@name":"ode-yellow",
          "@rgb-value":"255 255 0"
        },
        {
          "@name":"hot-pink",
          "@rgb-value":"255 105 180"
        },
        {
          "@name":"goldenrod",
          "@rgb-value":"218 165 32"
        },
        {
          "@name":"thistle",
          "@rgb-value":"232 191 232"
        }
      ]
    },
    "BlockConnectorShapes":{
      "BlockConnectorShape":[
        {
          "@shape-number":"1",
          "@shape-type":"number"
        },
        {
          "@shape-number":"2",
          "@shape-type":"number-list"
        },
        {
          "@shape-number":"3",
          "@shape-type":"number-inv"
        },
        {
          "@shape-number":"4",
          "@shape-type":"boolean"
        },
        {
          "@shape-number":"5",
          "@shape-type":"boolean-list"
        },
        {
          "@shape-number":"6",
          "@shape-type":"boolean-inv"
        },
        {
          "@shape-number":"7",
          "@shape-type":"string"
        },
        {
          "@shape-number":"8",
          "@shape-type":"string-list"
        },
        {
          "@shape-number":"9",
          "@shape-type":"string-inv"
        },
        {
          "@shape-number":"10",
          "@shape-type":"poly"
        },
        {
          "@shape-number":"11",
          "@shape-type":"poly-list"
        },
        {
          "@shape-number":"12",
          "@shape-type":"poly-inv"
        },
        {
          "@shape-number":"13",
          "@shape-type":"proc-param"
        },
        {
          "@shape-number":"14",
          "@shape-type":"cmd"
        },
        {
          "@shape-number":"15",
          "@shape-type":"infix-rhs"
        }
      ]
    },
    "BlockDrawerSets":{
      "BlockDrawerSet":{
        "@drawer-draggable":"no",
        "@location":"southwest",
        "@name":"Factory",
        "@type":"stack",
        "@window-per-drawer":"no",
        "BlockDrawer":[
          {
            "@button-color":"setter",
            "@name":"Definition",
            "BlockGenusMember":[
              "define",
              "define-void",
              "def",
              "argument",
              "glue"
            ]
          },
          {
            "@button-color":"text",
            "@name":"Text",
            "BlockGenusMember":[
              "text",
              "string-append",
              "string-vappend",
              "string-length",
              "string-empty?",
              "string-less-than",
              "string-equal",
              "string-greater-than",
              "string-trim",
              "string-upcase",
              "string-downcase",
              "string-starts-at",
              "string-contains",
              "string-split-at-first",
              "string-split-at-first-of-any",
              "string-split",
              "string-split-at-any",
              "string-split-at-spaces",
              "string-subtext",
              "string-replace-all"
            ]
          },
          {
            "@button-color":"list",
            "@name":"Lists",
            "BlockGenusMember":[
              "make-list",
              "get-list-item",
              "replace-list-item",
              "remove-list-item",
              "insert-list-item",
              "list-length",
              "append-list",
              "add-items-to-list",
              "list-member",
              "list-index",
              "list-pick-random",
              "list-empty?",
              "list-copy",
              "is-list?",
              "list-to-csv-row",
              "list-to-csv-table",
              "list-from-csv-row",
              "list-from-csv-table",
              "list-lookup-in-pairs"
            ]
          },
          {
            "@button-color":"math",
            "@name":"Math",
            "BlockGenusMember":[
              "number",
              "greaterthan",
              "greaterthanorequal",
              "lessthan",
              "lessthanorequal",
              "yail-equal",
              "yail-not-equal",
              "number-plus",
              "number-minus",
              "number-times",
              "number-divide",
              "number-sqrt",
              "number-random-fraction",
              "number-random-integer",
              "number-random-set-seed",
              "number-negate",
              "number-min",
              "number-max",
              "number-quotient",
              "number-remainder",
              "number-modulo",
              "number-abs",
              "number-round",
              "number-floor",
              "number-ceiling",
              "number-expt",
              "number-exp",
              "number-log",
              "number-sin",
              "number-cos",
              "number-tan",
              "number-asin",
              "number-acos",
              "number-atan",
              "number-atan2",
              "number-radians-to-degrees",
              "number-degrees-to-radians",
              "format-as-decimal",
              "number-is-number?"
            ]
          },
          {
            "@button-color":"logic",
            "@name":"Logic",
            "BlockGenusMember":[
              "true",
              "false",
              "logical-not",
              "yail-equal",
              "and",
              "or"
            ]
          },
          {
            "@button-color":"control",
            "@name":"Control",
            "BlockGenusMember":[
              "if",
              "ifelse",
              "choose",
              "foreach",
              "forrange",
              "while",
              "open-another-screen",
              "open-another-screen-with-start-value",
              "get-start-value",
              "close-screen",
              "close-screen-with-value",
              "close-application",
              "get-plain-start-text",
              "close-screen-with-plain-text"
            ]
          },
          {
            "@button-color":"colors",
            "@name":"Colors",
            "BlockGenusMember":[
              "make-color",
              "split-color",
              "color-none",
              "color-black",
              "color-blue",
              "color-cyan",
              "color-dark-gray",
              "color-gray",
              "color-green",
              "color-light-gray",
              "color-magenta",
              "color-orange",
              "color-pink",
              "color-red",
              "color-white",
              "color-yellow"
            ]
          }
        ]
      }
    },
    "BlockFamilies":{
      "BlockFamily":[
        {
          "FamilyMember":[
            "number",
            "text"
          ]
        },
        {
          "FamilyMember":[
            "true",
            "false"
          ]
        },
        {
          "FamilyMember":[
            "number-min",
            "number-max"
          ]
        },
        {
          "FamilyMember":[
            "number-sin",
            "number-cos",
            "number-tan"
          ]
        },
        {
          "FamilyMember":[
            "number-asin",
            "number-acos",
            "number-atan",
            "number-radians-to-degrees",
            "number-degrees-to-radians"
          ]
        },
        {
          "FamilyMember":[
            "number-quotient",
            "number-remainder",
            "number-modulo"
          ]
        },
        {
          "FamilyMember":[
            "number-abs",
            "number-round",
            "number-floor",
            "number-ceiling"
          ]
        },
        {
          "FamilyMember":[
            "number-exp",
            "number-log"
          ]
        },
        {
          "FamilyMember":[
            "greaterthan",
            "greaterthanorequal",
            "lessthan",
            "lessthanorequal",
            "yail-equal",
            "yail-not-equal"
          ]
        },
        {
          "FamilyMember":[
            "string-less-than",
            "string-equal",
            "string-greater-than"
          ]
        },
        {
          "FamilyMember":[
            "string-upcase",
            "string-downcase"
          ]
        },
        {
          "FamilyMember":[
            "number-plus",
            "number-minus",
            "number-times",
            "number-divide"
          ]
        },
        {
          "FamilyMember":[
            "color-none",
            "color-black",
            "color-blue",
            "color-cyan",
            "color-dark-gray",
            "color-gray",
            "color-green",
            "color-light-gray",
            "color-magenta",
            "color-orange",
            "color-pink",
            "color-red",
            "color-white",
            "color-yellow"
          ]
        }
      ]
    },
    "BlockGenuses":{
      "BlockGenus":[
        {
          "@color":"getter",
          "@decorator":"value",
          "@initlabel":"",
          "@kind":"data",
          "@name":"getter",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"getter"
              },
              {
                "@key":"plug-type-1",
                "@value":"value"
              }
            ]
          },
          "description":{
            "text":"Reports the value of the variable."
          }
        },
        {
          "@color":"getter",
          "@decorator":"global",
          "@initlabel":"",
          "@kind":"data",
          "@name":"getterGlobal",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"getter"
              },
              {
                "@key":"plug-type-1",
                "@value":"value"
              }
            ]
          },
          "description":{
            "text":"Reports the value of the variable."
          }
        },
        {
          "@color":"getter",
          "@initlabel":"",
          "@kind":"data",
          "@name":"componentGetter",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentGetter"
            }
          },
          "description":{
            "text":"Reports the value of the component's property."
          }
        },
        {
          "@color":"getter",
          "@initlabel":"",
          "@kind":"data",
          "@name":"componentTypeGetter",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentGetter"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Reports the value of the specified component's property."
          }
        },
        {
          "@color":"setter",
          "@decorator":"set global",
          "@initlabel":"",
          "@kind":"command",
          "@name":"setterGlobal",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"to",
              "@position-type":"single"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"setter"
              },
              {
                "@key":"socket-exclude-1",
                "@value":"to/argument"
              }
            ]
          },
          "description":{
            "text":"Sets the value of the variable."
          }
        },
        {
          "@color":"setter",
          "@decorator":"set",
          "@initlabel":"",
          "@kind":"command",
          "@name":"componentSetter",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"to",
              "@position-type":"single"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentSetter"
              },
              {
                "@key":"socket-exclude-1",
                "@value":"to/argument"
              }
            ]
          },
          "description":{
            "text":"Sets the value of the component property."
          }
        },
        {
          "@color":"setter",
          "@decorator":"set",
          "@initlabel":"",
          "@kind":"command",
          "@name":"componentTypeSetter",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"to",
                "@position-type":"single"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentSetter"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-exclude-1",
                "@value":"to/argument"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Sets the value of the specified component property."
          }
        },
        {
          "@color":"setter",
          "@decorator":"",
          "@initlabel":"",
          "@kind":"function",
          "@name":"collapsed",
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"collapsed"
            }
          },
          "description":{
            "text":"This block represents a collapsed procedure"
          }
        },
        {
          "@color":"text",
          "@editable-label":"yes",
          "@initlabel":"value",
          "@is-empty-label-allowed":"yes",
          "@is-label-value":"yes",
          "@kind":"data",
          "@name":"value",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"value"
            }
          },
          "description":{
            "text":"Reports the value shown."
          }
        },
        {
          "@color":"getter",
          "@decorator":"component",
          "@initlabel":"",
          "@is-label-value":"yes",
          "@kind":"data",
          "@name":"component",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"plug-type-1",
                "@value":"component"
              }
            ]
          },
          "description":{
            "text":"This block represents the given component"
          }
        },
        {
          "@color":"text",
          "@initlabel":"?",
          "@is-label-value":"yes",
          "@kind":"data",
          "@name":"null",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"null"
              },
              {
                "@key":"plug-type-1",
                "@value":"null"
              }
            ]
          },
          "description":{
            "text":"A null block"
          }
        },
        {
          "@color":"math",
          "@decorator":"number",
          "@editable-label":"yes",
          "@initlabel":"123",
          "@is-label-value":"yes",
          "@kind":"data",
          "@label-filter":"number",
          "@name":"number",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"number"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Reports the number shown."
          }
        },
        {
          "@color":"ode-none",
          "@decorator":"color",
          "@initlabel":"None",
          "@is-label-value":"no",
          "@kind":"data",
          "@name":"color-none",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"color"
              },
              {
                "@key":"ya-hex-value",
                "@value":"00FFFFFF"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Inserts the number representing the named color"
          }
        },
        {
          "@color":"ode-black",
          "@decorator":"color",
          "@initlabel":"Black",
          "@is-label-value":"no",
          "@kind":"data",
          "@name":"color-black",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"color"
              },
              {
                "@key":"ya-hex-value",
                "@value":"FF000000"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Inserts the number representing the named color"
          }
        },
        {
          "@color":"ode-blue",
          "@decorator":"color",
          "@initlabel":"Blue",
          "@is-label-value":"no",
          "@kind":"data",
          "@name":"color-blue",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"color"
              },
              {
                "@key":"ya-hex-value",
                "@value":"FF0000FF"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Inserts the number representing the named color"
          }
        },
        {
          "@color":"ode-cyan",
          "@decorator":"color",
          "@initlabel":"Cyan",
          "@is-label-value":"no",
          "@kind":"data",
          "@name":"color-cyan",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"color"
              },
              {
                "@key":"ya-hex-value",
                "@value":"FF00FFFF"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Inserts the number representing the named color"
          }
        },
        {
          "@color":"ode-dark-gray",
          "@decorator":"color",
          "@initlabel":"Dark Gray",
          "@is-label-value":"no",
          "@kind":"data",
          "@name":"color-dark-gray",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"color"
              },
              {
                "@key":"ya-hex-value",
                "@value":"FF444444"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Inserts the number representing the named color"
          }
        },
        {
          "@color":"ode-gray",
          "@decorator":"color",
          "@initlabel":"Gray",
          "@is-label-value":"no",
          "@kind":"data",
          "@name":"color-gray",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"color"
              },
              {
                "@key":"ya-hex-value",
                "@value":"FF888888"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Inserts the number representing the named color"
          }
        },
        {
          "@color":"ode-green",
          "@decorator":"color",
          "@initlabel":"Green",
          "@is-label-value":"no",
          "@kind":"data",
          "@name":"color-green",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"color"
              },
              {
                "@key":"ya-hex-value",
                "@value":"FF00FF00"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Inserts the number representing the named color"
          }
        },
        {
          "@color":"ode-light-gray",
          "@decorator":"color",
          "@initlabel":"Light Gray",
          "@is-label-value":"no",
          "@kind":"data",
          "@name":"color-light-gray",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"color"
              },
              {
                "@key":"ya-hex-value",
                "@value":"FFCCCCCC"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Inserts the number representing the named color"
          }
        },
        {
          "@color":"ode-magenta",
          "@decorator":"color",
          "@initlabel":"Magenta",
          "@is-label-value":"no",
          "@kind":"data",
          "@name":"color-magenta",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"color"
              },
              {
                "@key":"ya-hex-value",
                "@value":"FFFF00FF"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Inserts the number representing the named color"
          }
        },
        {
          "@color":"ode-orange",
          "@decorator":"color",
          "@initlabel":"Orange",
          "@is-label-value":"no",
          "@kind":"data",
          "@name":"color-orange",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"color"
              },
              {
                "@key":"ya-hex-value",
                "@value":"FFFFC800"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Inserts the number representing the named color"
          }
        },
        {
          "@color":"ode-pink",
          "@decorator":"color",
          "@initlabel":"Pink",
          "@is-label-value":"no",
          "@kind":"data",
          "@name":"color-pink",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"color"
              },
              {
                "@key":"ya-hex-value",
                "@value":"FFFFAFAF"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Inserts the number representing the named color"
          }
        },
        {
          "@color":"ode-red",
          "@decorator":"color",
          "@initlabel":"Red",
          "@is-label-value":"no",
          "@kind":"data",
          "@name":"color-red",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"color"
              },
              {
                "@key":"ya-hex-value",
                "@value":"FFFF0000"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Inserts the number representing the named color"
          }
        },
        {
          "@color":"ode-white",
          "@decorator":"color",
          "@initlabel":"White",
          "@is-label-value":"no",
          "@kind":"data",
          "@name":"color-white",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"color"
              },
              {
                "@key":"ya-hex-value",
                "@value":"FFFFFFFF"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Inserts the number representing the named color"
          }
        },
        {
          "@color":"ode-yellow",
          "@decorator":"color",
          "@initlabel":"Yellow",
          "@is-label-value":"no",
          "@kind":"data",
          "@name":"color-yellow",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"color"
              },
              {
                "@key":"ya-hex-value",
                "@value":"FFFFFF00"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Inserts the number representing the named color"
          }
        },
        {
          "@color":"colors",
          "@decorator":"call",
          "@initlabel":"make color",
          "@kind":"function",
          "@name":"make-color",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"components"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"make-color"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"components/list"
              },
              {
                "@key":"socket-allow-2",
                "@value":"components/value"
              }
            ]
          },
          "description":{
            "arg-description":{
              "#text":"A list of red, green, blue, and alpha components, each in the range 0 to 255; the alpha component may be omitted, in which case a value of 255 (fully opaque) will be used.",
              "@n":"1",
              "@name":"components"
            },
            "text":"A Color with the given red, green, blue, and (optionally) alpha components."
          }
        },
        {
          "@color":"list",
          "@decorator":"call",
          "@initlabel":"split color",
          "@kind":"function",
          "@name":"split-color",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"color"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"split-color"
              },
              {
                "@key":"plug-type-1",
                "@value":"list"
              },
              {
                "@key":"socket-allow-1",
                "@value":"color/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"color/value"
              }
            ]
          },
          "description":{
            "text":"A list of four elements, each in the range 0 to 255, representing the red, blue, green, and alpha components."
          }
        },
        {
          "@color":"text",
          "@initlabel":"property",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"param",
          "@label-unique":"yes",
          "@name":"read-write-property",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"read-write-property"
            }
          },
          "Stubs":{
            "Stub":[
              {
                "@stub-genus":"componentGetter"
              },
              {
                "@stub-genus":"componentTypeGetter"
              },
              {
                "@stub-genus":"componentSetter"
              },
              {
                "@stub-genus":"componentTypeSetter"
              }
            ]
          },
          "description":{
            "text":"Represents a component's property"
          }
        },
        {
          "@color":"text",
          "@initlabel":"property",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"param",
          "@label-unique":"yes",
          "@name":"read-only-property",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"read-only-property"
            }
          },
          "Stubs":{
            "Stub":[
              {
                "@stub-genus":"componentGetter"
              },
              {
                "@stub-genus":"componentTypeGetter"
              }
            ]
          },
          "description":{
            "text":"Represents a component's property"
          }
        },
        {
          "@color":"text",
          "@initlabel":"property",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"param",
          "@label-unique":"yes",
          "@name":"write-only-property",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"write-only-property"
            }
          },
          "Stubs":{
            "Stub":[
              {
                "@stub-genus":"componentSetter"
              },
              {
                "@stub-genus":"componentTypeSetter"
              }
            ]
          },
          "description":{
            "text":"Represents a component's property"
          }
        },
        {
          "@color":"text",
          "@initlabel":"property",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"param",
          "@label-unique":"yes",
          "@name":"invisible-property",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"invisible-property"
            }
          },
          "Stubs":null,
          "description":{
            "text":"Represents a component's property"
          }
        },
        {
          "@color":"getter",
          "@decorator":"name",
          "@editable-label":"yes",
          "@initlabel":"name",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"param",
          "@label-filter":"identifier",
          "@label-unique":"yes",
          "@name":"argument",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"argument"
              },
              {
                "@key":"plug-type-1",
                "@value":"argument"
              }
            ]
          },
          "Stubs":{
            "Stub":{
              "@stub-genus":"getter"
            }
          },
          "description":{
            "text":"Argument for a function"
          }
        },
        {
          "@color":"setter",
          "@decorator":"def",
          "@editable-label":"yes",
          "@initlabel":"variable",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"param",
          "@label-filter":"identifier",
          "@label-unique":"yes",
          "@name":"def",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"as"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"def"
              },
              {
                "@key":"socket-exclude-1",
                "@value":"as/argument"
              }
            ]
          },
          "Stubs":{
            "Stub":[
              {
                "@stub-genus":"getterGlobal"
              },
              {
                "@stub-genus":"setterGlobal"
              }
            ]
          },
          "description":{
            "arg-description":{
              "#text":"The variable's initial value.",
              "@n":"1",
              "@name":"arg"
            },
            "text":"Defines a global variable."
          }
        },
        {
          "@color":"call",
          "@decorator":"to",
          "@editable-label":"yes",
          "@initlabel":"procedureWithResult",
          "@kind":"function",
          "@label-filter":"identifier",
          "@label-unique":"yes",
          "@name":"define",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@is-expandable":"yes",
                "@label":"arg"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"return"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"define"
              },
              {
                "@key":"socket-allow-1",
                "@value":"arg/argument"
              },
              {
                "@key":"socket-exclude-1",
                "@value":"return/argument"
              }
            ]
          },
          "Stubs":{
            "Stub":{
              "@stub-genus":"caller"
            }
          },
          "description":{
            "arg-description":[
              {
                "#text":"Procedure argument",
                "@n":"1",
                "@name":"arg"
              },
              {
                "#text":"The set of instructions that is done when the procedure is called.",
                "@n":"2",
                "@name":"do"
              }
            ],
            "text":"Defines a procedure that returns a result. Calling the procedure (with its associated 'call' block) will run the blocks in the 'do' section and return the specified result."
          }
        },
        {
          "@color":"call",
          "@decorator":"to",
          "@editable-label":"yes",
          "@initlabel":"procedure",
          "@kind":"function",
          "@label-filter":"identifier",
          "@label-unique":"yes",
          "@name":"define-void",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@is-expandable":"yes",
                "@label":"arg"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"define"
              },
              {
                "@key":"socket-allow-1",
                "@value":"arg/argument"
              }
            ]
          },
          "Stubs":{
            "Stub":{
              "@stub-genus":"caller-command"
            }
          },
          "description":{
            "arg-description":[
              {
                "#text":"Procedure argument",
                "@n":"1",
                "@name":"arg"
              },
              {
                "#text":"The set of instructions that is done when the procedure is called.",
                "@n":"2",
                "@name":"do"
              }
            ],
            "text":"Defines a procedure that does not return a result. Calling the procedure (with its associated 'call' block) will run the blocks in the 'do' section."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@editable-label":"no",
          "@initlabel":"",
          "@kind":"function",
          "@label-filter":"identifier",
          "@name":"caller",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"call"
              },
              {
                "@key":"plug-type-1",
                "@value":"value"
              },
              {
                "@key":"socket-exclude-1",
                "@value":"*/argument"
              }
            ]
          },
          "description":{
            "text":"Calls the specified procedure, returning its result"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@editable-label":"no",
          "@initlabel":"",
          "@kind":"command",
          "@label-filter":"identifier",
          "@name":"caller-command",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"call"
              },
              {
                "@key":"socket-exclude-1",
                "@value":"*/argument"
              }
            ]
          },
          "description":{
            "text":"Calls the specified procedure"
          }
        },
        {
          "@color":"call",
          "@initlabel":"|",
          "@kind":"command",
          "@name":"glue",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"glue"
              },
              {
                "@key":"socket-exclude-1",
                "@value":"default/argument"
              }
            ]
          },
          "description":{
            "text":"Runs the block associated with its attached block and ignores the return value"
          }
        },
        {
          "@color":"control",
          "@initlabel":"if",
          "@kind":"command",
          "@name":"if",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"test"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"then-do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"if"
              },
              {
                "@key":"socket-allow-1",
                "@value":"test/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"test/boolean"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"The condition to test.",
                "@n":"1",
                "@name":"test"
              },
              {
                "#text":"The actions to be performed when the condition is true.",
                "@n":"2",
                "@name":"then-do"
              }
            ],
            "text":"Tests a given condition.  If the result is true, performs the actions in the 'then-do' sequence of blocks."
          }
        },
        {
          "@color":"control",
          "@initlabel":"ifelse",
          "@kind":"command",
          "@name":"ifelse",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"test"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"then-do"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"else-do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"ifelse"
              },
              {
                "@key":"socket-allow-1",
                "@value":"test/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"test/boolean"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"The condition to test.",
                "@n":"1",
                "@name":"test"
              },
              {
                "#text":"The actions to be performed when test is true.",
                "@n":"2",
                "@name":"then-do"
              },
              {
                "#text":"The actions to be performed when test is false.",
                "@n":"3",
                "@name":"else"
              }
            ],
            "text":"Tests a given condition.  If the result is true, performs the actions in the 'then-do' sequence of blocks;\n         otherwise, performs the actions in the 'else-do' sequence of blocks."
          }
        },
        {
          "@color":"control",
          "@initlabel":"choose",
          "@kind":"function",
          "@name":"choose",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"test"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"then-do"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"then-return"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"else-do"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"else-return"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"choose"
              },
              {
                "@key":"type-exclude-1",
                "@value":"argument"
              },
              {
                "@key":"socket-allow-1",
                "@value":"test/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"test/boolean"
              },
              {
                "@key":"socket-exclude-1",
                "@value":"then-return/argument"
              },
              {
                "@key":"socket-exclude-2",
                "@value":"else-return/argument"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"The condition being tested.",
                "@n":"1",
                "@name":"test"
              },
              {
                "#text":"The set of instructions that is done when test is true.",
                "@n":"2",
                "@name":"then-do"
              },
              {
                "#text":"The return value when the test is true.",
                "@n":"3",
                "@name":"then-return"
              },
              {
                "#text":"The set of instructions that is done when test is false.",
                "@n":"4",
                "@name":"else"
              },
              {
                "#text":"The return value when the test is false.",
                "@n":"5",
                "@name":"else-return"
              }
            ],
            "text":"If the condition being tested is true, the agent will run all the blocks attached to the 'then-do' section and\nreturn the value attached to the 'then-return'slot. Otherwise, the agent will run all blocks attached to the 'else-do'\nsection and return the value in the 'else-return' slot."
          }
        },
        {
          "@color":"control",
          "@initlabel":"foreach",
          "@kind":"command",
          "@name":"foreach",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"variable",
                "@label-unique":"yes",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"var"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"in list"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"foreach"
              },
              {
                "@key":"socket-allow-1",
                "@value":"variable/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"in list/list"
              },
              {
                "@key":"socket-allow-3",
                "@value":"in list/value"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"Name for the variable that will refer to each item in the list",
                "@n":"1",
                "@name":"variable"
              },
              {
                "#text":"Sequence of commands to do for each value of the variable",
                "@n":"2",
                "@name":"do"
              },
              {
                "#text":"List of values for the variable",
                "@n":"3",
                "@name":"in list"
              }
            ],
            "text":"Runs the blocks in the 'do'  section for each item in the list.  Use the given variable\nname to refer to the current list item."
          }
        },
        {
          "@color":"control",
          "@initlabel":"for range",
          "@kind":"command",
          "@name":"forrange",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"variable",
                "@label-unique":"yes",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"i"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"start"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"end"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"step",
                "DefaultArg":{
                  "@genus-name":"number",
                  "@label":"1"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"forrange"
              },
              {
                "@key":"socket-allow-1",
                "@value":"variable/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"start/number"
              },
              {
                "@key":"socket-allow-3",
                "@value":"start/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"end/number"
              },
              {
                "@key":"socket-allow-5",
                "@value":"end/value"
              },
              {
                "@key":"socket-allow-6",
                "@value":"step/number"
              },
              {
                "@key":"socket-allow-7",
                "@value":"step/value"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"The variable that will refer to each item in the range",
                "@n":"1",
                "@name":"variable"
              },
              {
                "#text":"Start of the range",
                "@n":"2",
                "@name":"start"
              },
              {
                "#text":"End of the range",
                "@n":"3",
                "@name":"end"
              },
              {
                "#text":"Amount to step the variable each time",
                "@n":"4",
                "@name":"step"
              },
              {
                "#text":"Sequence of commands to do for each value of the variable",
                "@n":"4",
                "@name":"do"
              }
            ],
            "text":"Runs the blocks in the 'do' section for each numeric value in the range from start to end, stepping the\nvalue each time.  Use the given variable name to refer to the current value."
          }
        },
        {
          "@color":"control",
          "@initlabel":"while",
          "@kind":"command",
          "@name":"while",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"test",
                "@label-unique":"yes"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"while"
              },
              {
                "@key":"socket-allow-1",
                "@value":"test/boolean"
              },
              {
                "@key":"socket-allow-2",
                "@value":"test/value"
              }
            ]
          },
          "description":{
            "text":"Runs the blocks in the 'do' section while the test is true."
          }
        },
        {
          "@color":"control",
          "@decorator":"call",
          "@initlabel":"get start text",
          "@kind":"function",
          "@name":"get-startup-text",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"startup-value"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              }
            ]
          },
          "description":{
            "text":"Returns the text passed to this app when it was started, if any. If no text was passed, returns an empty text."
          }
        },
        {
          "@color":"control",
          "@decorator":"call",
          "@initlabel":"close screen",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"close-screen",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"close-screen"
              }
            ]
          },
          "description":{
            "text":"Closes the current screen."
          }
        },
        {
          "@color":"control",
          "@decorator":"call",
          "@initlabel":"close screen with result",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"close-screen-with-result",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"result"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"close-screen-with-result"
              },
              {
                "@key":"socket-allow-1",
                "@value":"result/text"
              },
              {
                "@key":"socket-allow-2",
                "@value":"result/value"
              }
            ]
          },
          "description":{
            "arg-description":{
              "#text":"Text to be returned when the screen closes.",
              "@doc-name":"result",
              "@n":"1"
            },
            "text":"Closes the current screen and returns a result that can be picked up by\n        another screen or application. The result will be named APP_INVENTOR_RESULT."
          }
        },
        {
          "@color":"control",
          "@decorator":"call",
          "@initlabel":"close application",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"close-application",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"close-application"
              }
            ]
          },
          "description":{
            "text":"Closes all screens in this app and stops the app."
          }
        },
        {
          "@color":"control",
          "@decorator":"call",
          "@initlabel":"open another screen",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"open-another-screen",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"screenName"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"open-another-screen"
              },
              {
                "@key":"socket-allow-1",
                "@value":"screenName/text"
              },
              {
                "@key":"socket-allow-2",
                "@value":"screenName/value"
              }
            ]
          },
          "description":{
            "arg-description":{
              "#text":"The name of the new screen to open.",
              "@doc-name":"screenName",
              "@n":"1"
            },
            "text":"Opens a new screen in a multiple screen app."
          }
        },
        {
          "@color":"control",
          "@decorator":"call",
          "@initlabel":"open another screen with start value",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"open-another-screen-with-start-value",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"screenName"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"startValue"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"open-another-screen-with-start-value"
              },
              {
                "@key":"socket-allow-1",
                "@value":"screenName/text"
              },
              {
                "@key":"socket-allow-2",
                "@value":"screenName/value"
              },
              {
                "@key":"socket-exclude-1",
                "@value":"startValue/argument"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"The name of the new screen to open.",
                "@doc-name":"screenName",
                "@n":"1"
              },
              {
                "#text":"The value to be passed to the new screen.",
                "@doc-name":"startValue",
                "@n":"2"
              }
            ],
            "text":"Opens a new screen in a multiple screen app and passes the start value to that screen."
          }
        },
        {
          "@color":"control",
          "@decorator":"call",
          "@initlabel":"get start value",
          "@kind":"function",
          "@name":"get-start-value",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"get-start-value"
              }
            ]
          },
          "description":{
            "text":"Returns the value that was passed to this screen when it\nwas opened, typically by another screen in a multiple-screen app.\nIf no value was passed, returns the empty text."
          }
        },
        {
          "@color":"control",
          "@decorator":"call",
          "@initlabel":"close screen with value",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"close-screen-with-value",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"result"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"close-screen-with-value"
              },
              {
                "@key":"socket-exclude-1",
                "@value":"result/argument"
              }
            ]
          },
          "description":{
            "arg-description":{
              "#text":"Value to return when the screen closes.",
              "@doc-name":"result",
              "@n":"1"
            },
            "text":"Closes the current screen and returns a result to the screen that opened this one."
          }
        },
        {
          "@color":" control",
          "@decorator":"call",
          "@initlabel":"get plain start text",
          "@kind":"function",
          "@name":"get-plain-start-text",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"get-plain-start-text"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              }
            ]
          },
          "description":{
            "text":"Returns the plain text that was passed to this screen when it was started by another app.\nIf no value was passed, returns the empty text.\n        \nFor multiple screen apps, use get start value rather than get plain start text."
          }
        },
        {
          "@color":"control",
          "@decorator":"call",
          "@initlabel":"close screen with plain text",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"close-screen-with-plain-text",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"text"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"close-screen-with-plain-text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"text/text"
              },
              {
                "@key":"socket-allow-2",
                "@value":"text/value"
              }
            ]
          },
          "description":{
            "arg-description":{
              "#text":"Text to return when the screen closes.",
              "@doc-name":"text",
              "@n":"1"
            },
            "text":"Closes the current screen and returns text to the app that opened this one.\n\nFor multiple screen apps, use close screen with value rather than close screen with plain text."
          }
        },
        {
          "@color":"logic",
          "@initlabel":"true",
          "@is-label-value":"yes",
          "@kind":"data",
          "@name":"true",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              }
            ]
          },
          "description":{
            "text":"Reports the boolean true."
          }
        },
        {
          "@color":"logic",
          "@initlabel":"false",
          "@is-label-value":"yes",
          "@kind":"data",
          "@name":"false",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"false"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              }
            ]
          },
          "description":{
            "text":"Reports the boolean false."
          }
        },
        {
          "@color":"logic",
          "@initlabel":"and",
          "@kind":"function",
          "@name":"and",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@is-expandable":"yes",
                "@label":"test"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"and"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              },
              {
                "@key":"socket-allow-1",
                "@value":"test/boolean"
              },
              {
                "@key":"socket-allow-2",
                "@value":"test/value"
              }
            ]
          },
          "description":{
            "text":"Returns true if all connected blocks are true"
          }
        },
        {
          "@color":"logic",
          "@initlabel":"or",
          "@kind":"function",
          "@name":"or",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@is-expandable":"yes",
                "@label":"test"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"or"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              },
              {
                "@key":"socket-allow-1",
                "@value":"test/boolean"
              },
              {
                "@key":"socket-allow-2",
                "@value":"test/value"
              }
            ]
          },
          "description":{
            "text":"Returns true if any connected blocks are true"
          }
        },
        {
          "@color":"logic",
          "@initlabel":"not",
          "@kind":"function",
          "@name":"logical-not",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"yail-not"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              },
              {
                "@key":"socket-allow-1",
                "@value":"default/boolean"
              },
              {
                "@key":"socket-allow-2",
                "@value":"default/value"
              }
            ]
          }
        },
        {
          "@color":"text",
          "@decorator":"text",
          "@editable-label":"yes",
          "@initlabel":"text",
          "@is-empty-label-allowed":"yes",
          "@kind":"data",
          "@label-filter":"string",
          "@name":"text",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"text"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              }
            ]
          },
          "description":{
            "text":"A text string"
          }
        },
        {
          "@color":"math",
          "@initlabel":"=",
          "@kind":"function",
          "@name":"yail-equal",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"",
                "@position-type":"bottom"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"",
                "@position-type":"bottom"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"yail-equal?"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              },
              {
                "@key":"socket-exclude-1",
                "@value":"default/argument"
              }
            ]
          },
          "description":{
            "text":"Tests whether two things are equal.  The things being compared can be anything, not only numbers."
          }
        },
        {
          "@color":"math",
          "@initlabel":"not =",
          "@kind":"function",
          "@name":"yail-not-equal",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"",
                "@position-type":"bottom"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"",
                "@position-type":"bottom"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"yail-not-equal?"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              },
              {
                "@key":"socket-exclude-1",
                "@value":"default/argument"
              }
            ]
          },
          "description":{
            "text":"Tests whether two things are unequal.  The things being compared can be anything, not only numbers."
          }
        },
        {
          "@color":"text",
          "@initlabel":"join",
          "@kind":"function",
          "@name":"string-append",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"",
                "@position-type":"bottom"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"",
                "@position-type":"bottom"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"string-append"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"default/text"
              },
              {
                "@key":"socket-allow-2",
                "@value":"default/value"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"the beginning of the new string",
                "@doc-name":"first",
                "@n":"2"
              },
              {
                "#text":"the end of the new string",
                "@doc-name":"second",
                "@n":"3"
              }
            ],
            "text":"Appends the second argument to the end of the first argument."
          }
        },
        {
          "@color":"text",
          "@decorator":"call",
          "@initlabel":"make text",
          "@kind":"function",
          "@name":"string-vappend",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@is-expandable":"yes",
                "@label":"text"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"string-append"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"text/text"
              },
              {
                "@key":"socket-allow-2",
                "@value":"text/value"
              }
            ]
          },
          "description":{
            "arg-description":{
              "#text":"Item to include",
              "@doc-name":"text",
              "@n":"1",
              "@name":"text"
            },
            "text":"Appends all the arguments to form a single text string. If there are no arguments, makes an empty text."
          }
        },
        {
          "@color":"text",
          "@decorator":"call",
          "@initlabel":"length",
          "@kind":"function",
          "@name":"string-length",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"string-length"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"text/text"
              },
              {
                "@key":"socket-allow-2",
                "@value":"text/value"
              }
            ]
          },
          "description":{
            "arg-description":{
              "#text":"The text whose length should be returned",
              "@doc-name":"text",
              "@n":"1",
              "@name":"text"
            },
            "text":"Reports the length of the text attached to this block."
          }
        },
        {
          "@color":"text",
          "@initlabel":"text<",
          "@kind":"function",
          "@name":"string-less-than",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text1"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text2"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"string<?"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              },
              {
                "@key":"socket-allow-1",
                "@value":"text1/text"
              },
              {
                "@key":"socket-allow-2",
                "@value":"text1/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"text2/text"
              },
              {
                "@key":"socket-allow-4",
                "@value":"text2/value"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"The first text string to compare.",
                "@doc-name":"text1",
                "@n":"1"
              },
              {
                "#text":"The second text string to compare.",
                "@doc-name":"text2",
                "@n":"2"
              }
            ],
            "text":"Tests whether text1 is lexicographically less than text2. If one text is a prefix of the other, the shorter text is considered smaller. Uppercase characters precede lowercase characters."
          }
        },
        {
          "@color":"text",
          "@initlabel":"text=",
          "@kind":"function",
          "@name":"string-equal",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text1"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text2"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"string=?"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              },
              {
                "@key":"socket-allow-1",
                "@value":"text1/text"
              },
              {
                "@key":"socket-allow-2",
                "@value":"text1/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"text2/text"
              },
              {
                "@key":"socket-allow-4",
                "@value":"text2/value"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"The first text string to compare.",
                "@doc-name":"text1",
                "@n":"1"
              },
              {
                "#text":"The second text string to compare.",
                "@doc-name":"text2",
                "@n":"2"
              }
            ],
            "text":"Tests whether the text strings are identical, i.e., have the same characters in the same order.  This is different from ordinary = in the case where the text strings are numbers: 123 and 0123 are = but not text=."
          }
        },
        {
          "@color":"text",
          "@initlabel":"text>",
          "@kind":"function",
          "@name":"string-greater-than",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text1"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text2"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"string>?"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              },
              {
                "@key":"socket-allow-1",
                "@value":"text1/text"
              },
              {
                "@key":"socket-allow-2",
                "@value":"text1/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"text2/text"
              },
              {
                "@key":"socket-allow-4",
                "@value":"text2/value"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"The first text string to compare.",
                "@doc-name":"text1",
                "@n":"1"
              },
              {
                "#text":"The second text string to compare.",
                "@doc-name":"text2",
                "@n":"2"
              }
            ],
            "text":"Reports whether the text1 is lexicographically greater than text2. If one text is a prefix of the other, the shorter text is considered smaller. Uppercase characters precede lowercase characters."
          }
        },
        {
          "@color":"text",
          "@initlabel":"upcase",
          "@kind":"function",
          "@name":"string-upcase",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"string-to-upper-case"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"text/text"
              },
              {
                "@key":"socket-allow-2",
                "@value":"text/value"
              }
            ]
          },
          "description":{
            "arg-description":{
              "#text":"The text string to convert to upper case",
              "@doc-name":"text",
              "@n":"1"
            },
            "text":"Returns a copy of its text string argument converted to uppercase."
          }
        },
        {
          "@color":"text",
          "@initlabel":"downcase",
          "@kind":"function",
          "@name":"string-downcase",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"string-to-lower-case"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"text/text"
              },
              {
                "@key":"socket-allow-2",
                "@value":"text/value"
              }
            ]
          },
          "description":{
            "arg-description":{
              "#text":"The text string to convert to lower case",
              "@doc-name":"text",
              "@n":"1"
            },
            "text":"Returns a copy of its text string argument converted to lowercase."
          }
        },
        {
          "@color":"text",
          "@initlabel":"trim",
          "@kind":"function",
          "@name":"string-trim",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"string-trim"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"text/text"
              },
              {
                "@key":"socket-allow-2",
                "@value":"text/value"
              }
            ]
          },
          "description":{
            "arg-description":{
              "#text":"The text string to trim.",
              "@doc-name":"text",
              "@n":"1"
            },
            "text":"Returns a copy of its text string argument with any leading or trailing spaces removed."
          }
        },
        {
          "@color":"text",
          "@decorator":"call",
          "@initlabel":"starts at",
          "@kind":"function",
          "@name":"string-starts-at",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"piece"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"string-starts-at"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"text/text"
              },
              {
                "@key":"socket-allow-2",
                "@value":"text/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"piece/text"
              },
              {
                "@key":"socket-allow-4",
                "@value":"piece/value"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"The text to search for the piece.",
                "@doc-name":"text",
                "@n":"1"
              },
              {
                "#text":"The piece (a text string) to search for in the text.",
                "@doc-name":"piece",
                "@n":"2"
              }
            ],
            "text":"Returns the starting index of the piece in the text, where index 1 denotes the beginning of the text. Returns 0 if the piece is not in the text."
          }
        },
        {
          "@color":"text",
          "@decorator":"call",
          "@initlabel":"contains",
          "@kind":"function",
          "@name":"string-contains",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"piece"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"string-contains"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              },
              {
                "@key":"socket-allow-1",
                "@value":"text/text"
              },
              {
                "@key":"socket-allow-2",
                "@value":"text/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"piece/text"
              },
              {
                "@key":"socket-allow-4",
                "@value":"piece/value"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"The text to search for the piece.",
                "@doc-name":"text",
                "@n":"1"
              },
              {
                "#text":"The piece (a text string) to search for in the text.",
                "@doc-name":"piece",
                "@n":"2"
              }
            ],
            "text":"Tests whether the piece is in the text"
          }
        },
        {
          "@color":"text",
          "@decorator":"call",
          "@initlabel":"split at first",
          "@kind":"function",
          "@name":"string-split-at-first",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"at"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"string-split-at-first"
              },
              {
                "@key":"plug-type-1",
                "@value":"list"
              },
              {
                "@key":"socket-allow-1",
                "@value":"text/text"
              },
              {
                "@key":"socket-allow-2",
                "@value":"text/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"at/text"
              },
              {
                "@key":"socket-allow-4",
                "@value":"at/value"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"The text to split.",
                "@doc-name":"text",
                "@n":"1"
              },
              {
                "#text":"The delimiter text.",
                "@doc-name":"at",
                "@n":"2"
              }
            ],
            "text":"Split the text into two pieces separated by the first occurrence of 'at'. Returns a two-element list with the two pieces. Returns a one-element list with original text if 'at' is not contained in the text."
          }
        },
        {
          "@color":"text",
          "@decorator":"call",
          "@initlabel":"split at first of any",
          "@kind":"function",
          "@name":"string-split-at-first-of-any",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"at"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"string-split-at-first-of-any"
              },
              {
                "@key":"plug-type-1",
                "@value":"list"
              },
              {
                "@key":"socket-allow-1",
                "@value":"text/text"
              },
              {
                "@key":"socket-allow-2",
                "@value":"text/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"at/list"
              },
              {
                "@key":"socket-allow-4",
                "@value":"at/value"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"The text to split.",
                "@doc-name":"text",
                "@n":"1"
              },
              {
                "#text":"A list of delimiter text strings to that are places to split at.",
                "@doc-name":"at",
                "@n":"2"
              }
            ],
            "text":"Split the text into two pieces separated by the first occurrence of any of the elements in the list 'at', and return the list of these pieces. Returns a one-element list with the original text if no elements of 'at' are in the text."
          }
        },
        {
          "@color":"text",
          "@decorator":"call",
          "@initlabel":"split",
          "@kind":"function",
          "@name":"string-split",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"at"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"string-split"
              },
              {
                "@key":"plug-type-1",
                "@value":"list"
              },
              {
                "@key":"socket-allow-1",
                "@value":"text/text"
              },
              {
                "@key":"socket-allow-2",
                "@value":"text/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"at/text"
              },
              {
                "@key":"socket-allow-4",
                "@value":"at/value"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"The text to split.",
                "@doc-name":"text",
                "@n":"1"
              },
              {
                "#text":"The delimiter text.",
                "@doc-name":"at",
                "@n":"2"
              }
            ],
            "text":"Split the text into pieces separated by the occurrences of 'at', and return the list of these pieces. Returns a one-element list with the original text if 'at' is not in the text."
          }
        },
        {
          "@color":"text",
          "@decorator":"call",
          "@initlabel":"split at any",
          "@kind":"function",
          "@name":"string-split-at-any",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"at"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"string-split-at-any"
              },
              {
                "@key":"plug-type-1",
                "@value":"list"
              },
              {
                "@key":"socket-allow-1",
                "@value":"text/text"
              },
              {
                "@key":"socket-allow-2",
                "@value":"text/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"at/list"
              },
              {
                "@key":"socket-allow-4",
                "@value":"at/value"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"The text to split.",
                "@doc-name":"text",
                "@n":"1"
              },
              {
                "#text":"A list of delimiter text strings to search for as places to split at.",
                "@doc-name":"at",
                "@n":"2"
              }
            ],
            "text":"Split the text into pieces separated by the occurrences of any of the elements in the list 'at', and return the list of these pieces. Returns a one-element list with the original text if no elements of 'at' are in the text."
          }
        },
        {
          "@color":"text",
          "@decorator":"call",
          "@initlabel":"split at spaces",
          "@kind":"function",
          "@name":"string-split-at-spaces",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"string-split-at-spaces"
              },
              {
                "@key":"plug-type-1",
                "@value":"list"
              },
              {
                "@key":"socket-allow-1",
                "@value":"text/text"
              },
              {
                "@key":"socket-allow-2",
                "@value":"text/value"
              }
            ]
          },
          "description":{
            "arg-description":{
              "#text":"The text to split.",
              "@doc-name":"text",
              "@n":"1"
            },
            "text":"Split the text into a list of the pieces separated by spaces."
          }
        },
        {
          "@color":"text",
          "@decorator":"call",
          "@initlabel":"segment",
          "@kind":"function",
          "@name":"string-subtext",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"start"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"length"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"string-substring"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"text/text"
              },
              {
                "@key":"socket-allow-2",
                "@value":"text/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"start/number"
              },
              {
                "@key":"socket-allow-4",
                "@value":"start/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"length/number"
              },
              {
                "@key":"socket-allow-6",
                "@value":"length/value"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"The text to extract from",
                "@doc-name":"text",
                "@n":"1"
              },
              {
                "#text":"The starting position (a number) of the segment.",
                "@doc-name":"start",
                "@n":"2"
              },
              {
                "#text":"The length of the segment",
                "@doc-name":"length",
                "@n":"3"
              }
            ],
            "text":"Extracts the segment of the given length from the given text, starting from the given position. Position 1 denotes the beginning of the text."
          }
        },
        {
          "@color":"text",
          "@decorator":"call",
          "@initlabel":"replace all",
          "@kind":"function",
          "@name":"string-replace-all",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"segment"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"replacement"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"string-replace-all"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"text/text"
              },
              {
                "@key":"socket-allow-2",
                "@value":"text/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"segment/text"
              },
              {
                "@key":"socket-allow-4",
                "@value":"segment/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"replacement/text"
              },
              {
                "@key":"socket-allow-6",
                "@value":"replacement/value"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"The text to do the replacement in",
                "@doc-name":"text",
                "@n":"1"
              },
              {
                "#text":"The segment to replace",
                "@doc-name":"segment",
                "@n":"2"
              },
              {
                "#text":"The replacement for the segment",
                "@doc-name":"replacement",
                "@n":"3"
              }
            ],
            "text":"Returns a new text obtained by replacing all occurrences of the segment with the replacement"
          }
        },
        {
          "@color":"text",
          "@initlabel":"is text empty?",
          "@kind":"function",
          "@name":"string-empty?",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"string-empty?"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              },
              {
                "@key":"socket-allow-1",
                "@value":"text/text"
              },
              {
                "@key":"socket-allow-2",
                "@value":"text/value"
              }
            ]
          },
          "description":{
            "arg-description":{
              "#text":"The text string.",
              "@doc-name":"text",
              "@n":"1"
            },
            "text":"Returns true if the length of the text is 0, false otherwise."
          }
        },
        {
          "@color":"list",
          "@decorator":"call",
          "@initlabel":"make a list",
          "@kind":"function",
          "@name":"make-list",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@is-expandable":"yes",
                "@is-indented":"yes",
                "@label":"item"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"make-yail-list"
              },
              {
                "@key":"socket-exclude-1",
                "@value":"item/argument"
              },
              {
                "@key":"plug-type-1",
                "@value":"list"
              }
            ]
          },
          "description":{
            "arg-description":{
              "#text":"Item to include in the list",
              "@doc-name":"item",
              "@n":"1",
              "@name":"item"
            },
            "text":"Makes a list of the given items. If there are no items, makes an empty list."
          }
        },
        {
          "@color":"list",
          "@decorator":"call",
          "@initlabel":"is a list?",
          "@kind":"function",
          "@name":"is-list?",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"thing"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"yail-list?"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              },
              {
                "@key":"socket-exclude-1",
                "@value":"thing/argument"
              }
            ]
          },
          "description":{
            "arg-description":{
              "#text":"The thing to test.",
              "@doc-name":"thing",
              "@n":"1",
              "@name":"thing"
            },
            "text":"Tests if something is a list."
          }
        },
        {
          "@color":"list",
          "@decorator":"call",
          "@initlabel":"is list empty?",
          "@kind":"function",
          "@name":"list-empty?",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"list"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"yail-list-empty?"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              },
              {
                "@key":"socket-allow-1",
                "@value":"list/list"
              },
              {
                "@key":"socket-allow-2",
                "@value":"list/value"
              }
            ]
          },
          "description":{
            "arg-description":{
              "#text":"The list to test",
              "@doc-name":"list",
              "@n":"1",
              "@name":"list"
            },
            "text":"Tests if a list is empty (has no items in it)"
          }
        },
        {
          "@color":"list",
          "@decorator":"call",
          "@initlabel":"length of list",
          "@kind":"function",
          "@name":"list-length",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"list"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"yail-list-length"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"list/list"
              },
              {
                "@key":"socket-allow-2",
                "@value":"list/value"
              }
            ]
          },
          "description":{
            "arg-description":{
              "#text":"The list to find the length of",
              "@doc-name":"list",
              "@n":"1",
              "@name":"list"
            },
            "text":"Counts the number of items in a list."
          }
        },
        {
          "@color":"list",
          "@decorator":"call",
          "@initlabel":"copy list",
          "@kind":"function",
          "@name":"list-copy",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"list"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"yail-list-copy"
              },
              {
                "@key":"plug-type-1",
                "@value":"list"
              },
              {
                "@key":"socket-allow-1",
                "@value":"list/list"
              },
              {
                "@key":"socket-allow-2",
                "@value":"list/value"
              }
            ]
          },
          "description":{
            "arg-description":{
              "#text":"The list",
              "@doc-name":"list",
              "@n":"1",
              "@name":"list"
            },
            "text":"Makes a copy of a list, including copying all sublists"
          }
        },
        {
          "@color":"list",
          "@decorator":"call",
          "@initlabel":"list from csv row",
          "@kind":"function",
          "@name":"list-from-csv-row",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"yail-list-from-csv-row"
              },
              {
                "@key":"plug-type-1",
                "@value":"list"
              },
              {
                "@key":"socket-allow-1",
                "@value":"text/text"
              },
              {
                "@key":"socket-allow-2",
                "@value":"text/value"
              }
            ]
          },
          "description":{
            "arg-description":{
              "#text":"The CSV row text",
              "@doc-name":"list",
              "@n":"1",
              "@name":"list"
            },
            "text":"Parses a text as a CSV (comma-separated value) formatted row to produce a list of fields. It is an error for the row text to contain unescaped newlines inside fields (effectively, multiple lines). It is okay for the row text to end in a single newline or CRLF."
          }
        },
        {
          "@color":"list",
          "@decorator":"call",
          "@initlabel":"list from csv table",
          "@kind":"function",
          "@name":"list-from-csv-table",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"yail-list-from-csv-table"
              },
              {
                "@key":"plug-type-1",
                "@value":"list"
              },
              {
                "@key":"socket-allow-1",
                "@value":"text/text"
              },
              {
                "@key":"socket-allow-2",
                "@value":"text/value"
              }
            ]
          },
          "description":{
            "arg-description":{
              "#text":"The CSV table text",
              "@doc-name":"list",
              "@n":"1",
              "@name":"list"
            },
            "text":"Parses a text as a CSV (comma-separated value) formatted table to produce a list of rows, each of which is a list of fields. Rows can be separated by newlines (\\n) or CRLF (\\r\\n)."
          }
        },
        {
          "@color":"list",
          "@decorator":"call",
          "@initlabel":"list to csv row",
          "@kind":"function",
          "@name":"list-to-csv-row",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"list"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"yail-list-to-csv-row"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"list/list"
              },
              {
                "@key":"socket-allow-2",
                "@value":"list/value"
              }
            ]
          },
          "description":{
            "arg-description":{
              "#text":"The list",
              "@doc-name":"list",
              "@n":"1",
              "@name":"list"
            },
            "text":"Interprets the list as a row of a table and returns a CSV (comma-separated value) text representing the row. Each item in the row list is considered to be a field, and is quoted with double-quotes in the resulting CSV text. Items are separated by commas. The returned row text does not have a line separator at the end."
          }
        },
        {
          "@color":"list",
          "@decorator":"call",
          "@initlabel":"list to csv table",
          "@kind":"function",
          "@name":"list-to-csv-table",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"list"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"yail-list-to-csv-table"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"list/list"
              },
              {
                "@key":"socket-allow-2",
                "@value":"list/value"
              }
            ]
          },
          "description":{
            "arg-description":{
              "#text":"The list",
              "@doc-name":"list",
              "@n":"1",
              "@name":"list"
            },
            "text":"Interprets the list as a table in row-major format and returns a CSV (comma-separated value) text representing the table. Each item in the list should itself be a list representing a row of the CSV table. Each item in the row list is considered to be a field, and is quoted with double-quotes in the resulting CSV text. In the returned text, items in rows are separated by commas and rows are separated by CRLF (\\r\\n)."
          }
        },
        {
          "@color":"list",
          "@decorator":"call",
          "@initlabel":"select list item",
          "@kind":"function",
          "@name":"get-list-item",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"list"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"index"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"yail-list-get-item"
              },
              {
                "@key":"type-exclude-1",
                "@value":"argument"
              },
              {
                "@key":"socket-allow-1",
                "@value":"list/list"
              },
              {
                "@key":"socket-allow-2",
                "@value":"list/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"index/number"
              },
              {
                "@key":"socket-allow-4",
                "@value":"index/value"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"The list",
                "@doc-name":"list",
                "@n":"1",
                "@name":"list"
              },
              {
                "#text":"The position of the item to retrieve",
                "@doc-name":"index",
                "@n":"2",
                "@name":"index"
              }
            ],
            "text":"Get the nth item from a list."
          }
        },
        {
          "@color":"list",
          "@decorator":"call",
          "@initlabel":"pick random item",
          "@kind":"function",
          "@name":"list-pick-random",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"list"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"yail-list-pick-random"
              },
              {
                "@key":"type-exclude-1",
                "@value":"argument"
              },
              {
                "@key":"socket-allow-1",
                "@value":"list/list"
              },
              {
                "@key":"socket-allow-2",
                "@value":"list/value"
              }
            ]
          },
          "description":{
            "arg-description":{
              "#text":"The list",
              "@doc-name":"list",
              "@n":"1",
              "@name":"list"
            },
            "text":"Pick an element at random from the list."
          }
        },
        {
          "@color":"list",
          "@decorator":"call",
          "@initlabel":"replace list item",
          "@kind":"command",
          "@name":"replace-list-item",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"list"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"index"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"replacement"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"yail-list-set-item!"
              },
              {
                "@key":"socket-allow-1",
                "@value":"list/list"
              },
              {
                "@key":"socket-allow-2",
                "@value":"list/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"index/number"
              },
              {
                "@key":"socket-allow-4",
                "@value":"index/value"
              },
              {
                "@key":"socket-exclude-1",
                "@value":"replacement/argument"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"The list",
                "@doc-name":"list",
                "@n":"1",
                "@name":"list"
              },
              {
                "#text":"The position of the item to replace",
                "@doc-name":"index",
                "@n":"2",
                "@name":"index"
              },
              {
                "#text":"The replacement for the item",
                "@doc-name":"replacement",
                "@n":"3",
                "@name":"replacement"
              }
            ],
            "text":"Replaces the nth item in a list."
          }
        },
        {
          "@color":"list",
          "@decorator":"call",
          "@initlabel":"remove list item",
          "@kind":"command",
          "@name":"remove-list-item",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"list"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"index"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"yail-list-remove-item!"
              },
              {
                "@key":"socket-allow-1",
                "@value":"list/list"
              },
              {
                "@key":"socket-allow-2",
                "@value":"list/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"index/number"
              },
              {
                "@key":"socket-allow-4",
                "@value":"index/value"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"The list",
                "@doc-name":"list",
                "@n":"1",
                "@name":"list"
              },
              {
                "#text":"The position of the item to remove",
                "@doc-name":"index",
                "@n":"2",
                "@name":"index"
              }
            ],
            "text":"Removes the item at the specified position from the list."
          }
        },
        {
          "@color":"list",
          "@decorator":"call",
          "@initlabel":"insert list item",
          "@kind":"command",
          "@name":"insert-list-item",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"list"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"index"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"item"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"yail-list-insert-item!"
              },
              {
                "@key":"socket-allow-1",
                "@value":"list/list"
              },
              {
                "@key":"socket-allow-2",
                "@value":"list/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"index/number"
              },
              {
                "@key":"socket-allow-4",
                "@value":"index/value"
              },
              {
                "@key":"socket-exclude-1",
                "@value":"item/argument"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"The list",
                "@doc-name":"list",
                "@n":"1",
                "@name":"list"
              },
              {
                "#text":"The position where the item should be inserted",
                "@doc-name":"index",
                "@n":"2",
                "@name":"index"
              },
              {
                "#text":"The item to insert",
                "@doc-name":"item",
                "@n":"3",
                "@name":"item"
              }
            ],
            "text":"Insert an item into a list at the specified position."
          }
        },
        {
          "@color":"list",
          "@decorator":"call",
          "@initlabel":"append to list",
          "@kind":"command",
          "@name":"append-list",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"list1"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"list2"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"yail-list-append!"
              },
              {
                "@key":"socket-allow-1",
                "@value":"list1/list"
              },
              {
                "@key":"socket-allow-2",
                "@value":"list1/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"list2/list"
              },
              {
                "@key":"socket-allow-4",
                "@value":"list2/value"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"The list to append on to",
                "@doc-name":"list1",
                "@n":"1",
                "@name":"list1"
              },
              {
                "#text":"The list of items to be appended",
                "@doc-name":"list2",
                "@n":"2",
                "@name":"list2"
              }
            ],
            "text":"Appends all the items in list2 onto the end of list1.  After the append, list1 will include these additional elements, but list2 will be unchanged."
          }
        },
        {
          "@color":"list",
          "@decorator":"call",
          "@initlabel":"add items to list",
          "@kind":"command",
          "@name":"add-items-to-list",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"list"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@is-expandable":"yes",
                "@label":"item"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"yail-list-add-to-list!"
              },
              {
                "@key":"socket-allow-1",
                "@value":"list/list"
              },
              {
                "@key":"socket-allow-2",
                "@value":"list/value"
              },
              {
                "@key":"socket-exclude-1",
                "@value":"item/argument"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"The list",
                "@doc-name":"list",
                "@n":"1",
                "@name":"list"
              },
              {
                "#text":"The item to add to the list",
                "@doc-name":"item",
                "@n":"2",
                "@name":"item"
              }
            ],
            "text":"Adds items to the end of a list."
          }
        },
        {
          "@color":"list",
          "@decorator":"call",
          "@initlabel":"is in list?",
          "@kind":"function",
          "@name":"list-member",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"thing"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"list"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"yail-list-member?"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              },
              {
                "@key":"socket-exclude-1",
                "@value":"thing/argument"
              },
              {
                "@key":"socket-allow-1",
                "@value":"list/list"
              },
              {
                "@key":"socket-allow-2",
                "@value":"list/value"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"The thing to find in the list",
                "@doc-name":"thing",
                "@n":"1",
                "@name":"thing"
              },
              {
                "#text":"The list to check for the thing",
                "@doc-name":"list",
                "@n":"2",
                "@name":"list"
              }
            ],
            "text":"Retuns true if the the thing is an item in the list, and false if not."
          }
        },
        {
          "@color":"list",
          "@decorator":"call",
          "@initlabel":"position in list",
          "@kind":"function",
          "@name":"list-index",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"thing"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"list"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"yail-list-index"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-exclude-1",
                "@value":"thing/argument"
              },
              {
                "@key":"socket-allow-1",
                "@value":"list/list"
              },
              {
                "@key":"socket-allow-2",
                "@value":"list/value"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"The thing whose position to find",
                "@doc-name":"thing",
                "@n":"1",
                "@name":"thing"
              },
              {
                "#text":"The list",
                "@doc-name":"list",
                "@n":"2",
                "@name":"list"
              }
            ],
            "text":"Find the position of the thing in the list.  If it's not in the list, return 0."
          }
        },
        {
          "@color":"list",
          "@decorator":"call",
          "@initlabel":"lookup in pairs ",
          "@kind":"function",
          "@name":"list-lookup-in-pairs",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"key"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"pairs"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"notFound",
                "DefaultArg":{
                  "@genus-name":"text",
                  "@label":"NotFound"
                }
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"yail-alist-lookup"
              },
              {
                "@key":"type-exclude-1",
                "@value":"argument"
              },
              {
                "@key":"socket-exclude-1",
                "@value":"key/argument"
              },
              {
                "@key":"socket-allow-1",
                "@value":"pairs/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"pairs/list"
              },
              {
                "@key":"socket-allow-3",
                "@value":"notFound/text"
              },
              {
                "@key":"socket-allow-4",
                "@value":"notFound/text"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"The key to look up",
                "@doc-name":"key",
                "@n":"1",
                "@name":"key"
              },
              {
                "#text":"A list of (key value) pairs",
                "@doc-name":"pairs",
                "@n":"2",
                "@name":"pairs"
              },
              {
                "#text":"Value to return if there is no pair with the given key.",
                "@doc-name":"notFound",
                "@n":"3",
                "@name":"notFound"
              }
            ],
            "text":"Returns the value associated with the key in the list of pairs."
          }
        },
        {
          "@color":"math",
          "@initlabel":">",
          "@kind":"function",
          "@name":"greaterthan",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"",
                "@position-type":"bottom"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"",
                "@position-type":"bottom"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":">"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              },
              {
                "@key":"socket-allow-1",
                "@value":"default/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"default/value"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"The first number to compare.",
                "@doc-name":"left value",
                "@n":"1"
              },
              {
                "#text":"The second number to compare.",
                "@doc-name":"right value",
                "@n":"2"
              }
            ],
            "text":"Tests whether the first number is greater than the second number."
          }
        },
        {
          "@color":"math",
          "@initlabel":">=",
          "@kind":"function",
          "@name":"greaterthanorequal",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"",
                "@position-type":"bottom"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"",
                "@position-type":"bottom"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":">="
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              },
              {
                "@key":"socket-allow-1",
                "@value":"default/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"default/value"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"The first number to compare.",
                "@doc-name":"left value",
                "@n":"1"
              },
              {
                "#text":"The second number to compare.",
                "@doc-name":"right value",
                "@n":"2"
              }
            ],
            "text":"Tests whether the first number is greater than or equal to the second number."
          }
        },
        {
          "@color":"math",
          "@initlabel":"<",
          "@kind":"function",
          "@name":"lessthan",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"",
                "@position-type":"bottom"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"",
                "@position-type":"bottom"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"<"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              },
              {
                "@key":"socket-allow-1",
                "@value":"default/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"default/value"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"The first number to compare.",
                "@doc-name":"left value",
                "@n":"1"
              },
              {
                "#text":"The second number to compare.",
                "@doc-name":"right value",
                "@n":"2"
              }
            ],
            "text":"Tests whether the first number is less than the second number."
          }
        },
        {
          "@color":"math",
          "@initlabel":"<=",
          "@kind":"function",
          "@name":"lessthanorequal",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"",
                "@position-type":"bottom"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"",
                "@position-type":"bottom"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"<="
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              },
              {
                "@key":"socket-allow-1",
                "@value":"default/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"default/value"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"The first number to compare.",
                "@doc-name":"left value",
                "@n":"1"
              },
              {
                "#text":"The second number to compare.",
                "@doc-name":"right value",
                "@n":"2"
              }
            ],
            "text":"Tests whether the first number is less than or equal to the second number."
          }
        },
        {
          "@color":"math",
          "@initlabel":"+",
          "@kind":"function",
          "@name":"number-plus",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"",
                "@position-type":"bottom"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"",
                "@position-type":"bottom"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"+"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"default/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"default/value"
              }
            ]
          }
        },
        {
          "@color":"math",
          "@initlabel":"\u2212",
          "@kind":"function",
          "@name":"number-minus",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"",
                "@position-type":"bottom"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"",
                "@position-type":"bottom"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"-"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"default/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"default/value"
              }
            ]
          }
        },
        {
          "@color":"math",
          "@initlabel":"\u00d7",
          "@kind":"function",
          "@name":"number-times",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"",
                "@position-type":"bottom"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"",
                "@position-type":"bottom"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"*"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"default/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"default/value"
              }
            ]
          }
        },
        {
          "@color":"math",
          "@initlabel":"/",
          "@kind":"function",
          "@name":"number-divide",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"",
                "@position-type":"bottom"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"",
                "@position-type":"bottom"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"yail-divide"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"default/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"default/value"
              }
            ]
          }
        },
        {
          "@color":"math",
          "@decorator":"call",
          "@initlabel":"sqrt",
          "@kind":"function",
          "@name":"number-sqrt",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"sqrt"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"default/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"default/value"
              }
            ]
          }
        },
        {
          "@color":"math",
          "@decorator":"call",
          "@initlabel":"negate",
          "@kind":"function",
          "@name":"number-negate",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"-"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"default/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"default/value"
              }
            ]
          }
        },
        {
          "@color":"math",
          "@decorator":"call",
          "@initlabel":"min",
          "@kind":"function",
          "@name":"number-min",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@is-expandable":"yes",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"min"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"default/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"default/value"
              }
            ]
          }
        },
        {
          "@color":"math",
          "@decorator":"call",
          "@initlabel":"max",
          "@kind":"function",
          "@name":"number-max",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@is-expandable":"yes",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"max"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"default/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"default/value"
              }
            ]
          }
        },
        {
          "@color":"math",
          "@decorator":"call",
          "@initlabel":"quotient",
          "@kind":"function",
          "@name":"number-quotient",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"quotient"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"default/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"default/value"
              }
            ]
          }
        },
        {
          "@color":"math",
          "@decorator":"call",
          "@initlabel":"remainder",
          "@kind":"function",
          "@name":"number-remainder",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"remainder"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"default/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"default/value"
              }
            ]
          }
        },
        {
          "@color":"math",
          "@decorator":"call",
          "@initlabel":"modulo",
          "@kind":"function",
          "@name":"number-modulo",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"modulo"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"default/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"default/value"
              }
            ]
          }
        },
        {
          "@color":"math",
          "@decorator":"call",
          "@initlabel":"abs",
          "@kind":"function",
          "@name":"number-abs",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"abs"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"default/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"default/value"
              }
            ]
          }
        },
        {
          "@color":"math",
          "@decorator":"call",
          "@initlabel":"round",
          "@kind":"function",
          "@name":"number-round",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"yail-round"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"default/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"default/value"
              }
            ]
          }
        },
        {
          "@color":"math",
          "@decorator":"call",
          "@initlabel":"floor",
          "@kind":"function",
          "@name":"number-floor",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"yail-floor"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"default/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"default/value"
              }
            ]
          }
        },
        {
          "@color":"math",
          "@decorator":"call",
          "@initlabel":"ceiling",
          "@kind":"function",
          "@name":"number-ceiling",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"yail-ceiling"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"default/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"default/value"
              }
            ]
          }
        },
        {
          "@color":"math",
          "@decorator":"call",
          "@initlabel":"expt",
          "@kind":"function",
          "@name":"number-expt",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"base"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"exponent"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"expt"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"exponent/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"exponent/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"base/number"
              },
              {
                "@key":"socket-allow-4",
                "@value":"base/value"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"The number to raise to the exponent.",
                "@doc-name":"base",
                "@n":"1"
              },
              {
                "#text":"The power to raise the base to.",
                "@doc-name":"exponent",
                "@n":"2"
              }
            ],
            "text":"Returns the result of raising the base to the exponent."
          }
        },
        {
          "@color":"math",
          "@decorator":"call",
          "@initlabel":"exp",
          "@kind":"function",
          "@name":"number-exp",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"exp"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"default/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"default/value"
              }
            ]
          },
          "description":{
            "arg-description":{
              "#text":"The power to raise e to.",
              "@doc-name":"exponent",
              "@n":"1"
            },
            "text":"Returns the result of raising the mathematical constant 'e' to the given exponent."
          }
        },
        {
          "@color":"math",
          "@decorator":"call",
          "@initlabel":"log",
          "@kind":"function",
          "@name":"number-log",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"log"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"default/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"default/value"
              }
            ]
          }
        },
        {
          "@color":"math",
          "@decorator":"call",
          "@initlabel":"sin",
          "@kind":"function",
          "@name":"number-sin",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"degrees"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"sin-degrees"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"degrees/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"degrees/value"
              }
            ]
          },
          "description":{
            "arg-description":{
              "#text":"An angle expressed in degrees",
              "@doc-name":"degrees",
              "@n":"1"
            },
            "text":"Provides the sine of the given angle in degrees"
          }
        },
        {
          "@color":"math",
          "@decorator":"call",
          "@initlabel":"cos",
          "@kind":"function",
          "@name":"number-cos",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"degrees"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"cos-degrees"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"degrees/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"degrees/value"
              }
            ]
          },
          "description":{
            "arg-description":{
              "#text":"An angle expressed in degrees",
              "@doc-name":"degrees",
              "@n":"1"
            },
            "text":"Provides the cosine of the given angle in degrees"
          }
        },
        {
          "@color":"math",
          "@decorator":"call",
          "@initlabel":"tan",
          "@kind":"function",
          "@name":"number-tan",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"degrees"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"tan-degrees"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"degrees/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"degrees/value"
              }
            ]
          },
          "description":{
            "arg-description":{
              "#text":"An angle expressed in degrees",
              "@doc-name":"degrees",
              "@n":"1"
            },
            "text":"Provides the tangent of the given angle in degrees"
          }
        },
        {
          "@color":"math",
          "@decorator":"call",
          "@initlabel":"asin",
          "@kind":"function",
          "@name":"number-asin",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"asin-degrees"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"default/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"default/value"
              }
            ]
          },
          "description":{
            "text":"Provides the angle in the range (-90, +90] degrees with the given sine value"
          }
        },
        {
          "@color":"math",
          "@decorator":"call",
          "@initlabel":"acos",
          "@kind":"function",
          "@name":"number-acos",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"acos-degrees"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"default/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"default/value"
              }
            ]
          },
          "description":{
            "text":"Provides the angle in the range [0, 180) degrees with the given cosine value"
          }
        },
        {
          "@color":"math",
          "@decorator":"call",
          "@initlabel":"atan",
          "@kind":"function",
          "@name":"number-atan",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"atan-degrees"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"default/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"default/value"
              }
            ]
          },
          "description":{
            "text":"Provides the angle in the range (-90, +90) degrees with the given tangent value"
          }
        },
        {
          "@color":"math",
          "@decorator":"call",
          "@initlabel":"atan2",
          "@kind":"function",
          "@name":"number-atan2",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"atan2-degrees"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"y/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"y/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"x/number"
              },
              {
                "@key":"socket-allow-4",
                "@value":"x/value"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"the y-coordinate",
                "@doc-name":"y",
                "@n":"1"
              },
              {
                "#text":"the x-coordinate",
                "@doc-name":"x",
                "@n":"2"
              }
            ],
            "text":"Provides the angle in the range (-180, +180] degrees corresponding to the given rectangular coordinates"
          }
        },
        {
          "@color":"math",
          "@decorator":"call",
          "@initlabel":"convert radians to degrees",
          "@kind":"function",
          "@name":"number-radians-to-degrees",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"radians"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"radians->degrees"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"radians/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"radians/value"
              }
            ]
          },
          "description":{
            "arg-description":{
              "@doc-name":"radians",
              "@n":"1"
            },
            "text":"Returns the degree value in the range [0, 360) corresponding to its radians argument"
          }
        },
        {
          "@color":"math",
          "@decorator":"call",
          "@initlabel":"convert degrees to radians",
          "@kind":"function",
          "@name":"number-degrees-to-radians",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"degrees"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"degrees->radians"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"degrees/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"degrees/value"
              }
            ]
          },
          "description":{
            "arg-description":{
              "@doc-name":"degrees",
              "@n":"1"
            },
            "text":"Returns the radian value in the range [-Pi, +Pi) corresponding to its degrees argument"
          }
        },
        {
          "@color":"math",
          "@decorator":"call",
          "@initlabel":"random set seed",
          "@kind":"command",
          "@name":"number-random-set-seed",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"seed"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"random-set-seed"
              },
              {
                "@key":"socket-allow-1",
                "@value":"seed/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"seed/value"
              }
            ]
          },
          "description":{
            "arg-description":{
              "#text":"Numeric seed for random number generator",
              "@doc-name":"seed",
              "@n":"1"
            },
            "text":"Specifies a numeric seed for the random number generator."
          }
        },
        {
          "@color":"math",
          "@decorator":"call",
          "@initlabel":"random fraction",
          "@kind":"function",
          "@name":"number-random-fraction",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"random-fraction"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Returns a random number between 0 and 1."
          }
        },
        {
          "@color":"math",
          "@decorator":"call",
          "@initlabel":"random integer",
          "@kind":"function",
          "@name":"number-random-integer",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"from",
                "DefaultArg":{
                  "@genus-name":"number",
                  "@label":"1"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"to",
                "DefaultArg":{
                  "@genus-name":"number",
                  "@label":"100"
                }
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"random-integer"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"from/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"from/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"to/number"
              },
              {
                "@key":"socket-allow-4",
                "@value":"to/value"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"The lower bound",
                "@doc-name":"lower bound",
                "@n":"1"
              },
              {
                "#text":"The upper bound",
                "@doc-name":"upper bound",
                "@n":"2"
              }
            ],
            "text":"Returns a random integer between the lower bound and the upper bound.  The bounds will be clipped to be smaller than 2**30."
          }
        },
        {
          "@color":"math",
          "@decorator":"call",
          "@initlabel":"format as decimal",
          "@kind":"function",
          "@name":"format-as-decimal",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"number"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"places"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"format-as-decimal"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"number/number"
              },
              {
                "@key":"socket-allow-2",
                "@value":"number/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"places/number"
              },
              {
                "@key":"socket-allow-4",
                "@value":"places/value"
              }
            ]
          },
          "description":{
            "arg-description":[
              {
                "#text":"The number to be formatted",
                "@doc-name":"number",
                "@n":"1"
              },
              {
                "#text":"The number of places",
                "@doc-name":"places",
                "@n":"2"
              }
            ],
            "text":"Returns the number formatted as a decimal with a specified number of places."
          }
        },
        {
          "@color":"math",
          "@decorator":"call",
          "@initlabel":"is a number?",
          "@kind":"function",
          "@name":"number-is-number?",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"thing"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"primitive"
              },
              {
                "@key":"ya-rep",
                "@value":"is-number?"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              },
              {
                "@key":"socket-exclude-1",
                "@value":"thing/argument"
              }
            ]
          },
          "description":{
            "arg-description":{
              "#text":"The thing to test.",
              "@doc-name":"thing",
              "@n":"1",
              "@name":"thing"
            },
            "text":"Tests if something is a number."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"AccelerometerSensor",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"AccelerometerSensor",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"2"
              },
              {
                "@key":"ya-event-1",
                "@value":"AccelerometerSensor-AccelerationChanged"
              },
              {
                "@key":"ya-event-2",
                "@value":"AccelerometerSensor-Shaking"
              },
              {
                "@key":"ya-prop-1",
                "@value":"Available/read-only-property/boolean/"
              },
              {
                "@key":"ya-prop-2",
                "@value":"Enabled/read-write-property/boolean/"
              },
              {
                "@key":"ya-prop-3",
                "@value":"MinimumInterval/read-write-property/number/The minimum interval between phone shakes"
              },
              {
                "@key":"ya-prop-4",
                "@value":"XAccel/read-only-property/number/"
              },
              {
                "@key":"ya-prop-5",
                "@value":"YAccel/read-only-property/number/"
              },
              {
                "@key":"ya-prop-6",
                "@value":"ZAccel/read-only-property/number/"
              }
            ]
          },
          "description":{
            "text":"Non-visible component that can detect shaking and measure acceleration approximately in three dimensions using SI units (m/s2). The components are: - xAccel: 0 when the phone is at rest on a flat surface, positive when the phone is tilted to the right (i.e., its left side is raised), and negative when the phone is tilted to the left (i.e., its right size is raised). - yAccel: 0 when the phone is at rest on a flat surface, positive when its bottom is raised, and negative when its top is raised. - zAccel: Equal to -9.8 (earth's gravity in meters per second per second when the device is at rest parallel to the ground with the display facing up, 0 when perpindicular to the ground, and +9.8 when facing down. The value can also be affected by accelerating it with or against gravity."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"AccelerationChanged",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"AccelerometerSensor-AccelerationChanged",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"xAccel",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"xAccel"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"yAccel",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"yAccel"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"zAccel",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"zAccel"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"xAccel/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"yAccel/argument"
              },
              {
                "@key":"socket-allow-3",
                "@value":"zAccel/argument"
              }
            ]
          },
          "description":{
            "text":"Indicates the acceleration changed in the X, Y, and/or Z dimensions."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"Shaking",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"AccelerometerSensor-Shaking",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Indicates the device started being shaken or continues to be shaken."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"ActivityStarter",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"ActivityStarter",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"4"
              },
              {
                "@key":"ya-event-1",
                "@value":"ActivityStarter-AfterActivity"
              },
              {
                "@key":"ya-prop-1",
                "@value":"Action/read-write-property/text/"
              },
              {
                "@key":"ya-prop-2",
                "@value":"ActivityClass/read-write-property/text/"
              },
              {
                "@key":"ya-prop-3",
                "@value":"ActivityPackage/read-write-property/text/"
              },
              {
                "@key":"ya-prop-4",
                "@value":"DataType/read-write-property/text/"
              },
              {
                "@key":"ya-prop-5",
                "@value":"DataUri/read-write-property/text/"
              },
              {
                "@key":"ya-prop-6",
                "@value":"ExtraKey/read-write-property/text/"
              },
              {
                "@key":"ya-prop-7",
                "@value":"ExtraValue/read-write-property/text/"
              },
              {
                "@key":"ya-prop-8",
                "@value":"Result/read-only-property/text/"
              },
              {
                "@key":"ya-prop-9",
                "@value":"ResultName/read-write-property/text/"
              },
              {
                "@key":"ya-prop-10",
                "@value":"ResultType/read-only-property/text/"
              },
              {
                "@key":"ya-prop-11",
                "@value":"ResultUri/read-only-property/text/"
              },
              {
                "@key":"ya-method-1",
                "@value":"ActivityStarter-ResolveActivity"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-ActivityStarter-ResolveActivity"
              },
              {
                "@key":"ya-method-2",
                "@value":"ActivityStarter-StartActivity"
              },
              {
                "@key":"ya-type-method-2",
                "@value":"Type-ActivityStarter-StartActivity"
              }
            ]
          },
          "description":{
            "text":"A component that can launch an activity using the StartActivity method. Activities that can be launched include: - starting other App Inventor for Android apps - starting the camera application - performing web search - opening a browser to a specified web page - opening the map application to a specified location You can also launch activities that return text data. See the documentation on using the Activity Starter for examples."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"ActivityError",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"ActivityStarter-ActivityError",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"message",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"message"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"message/argument"
              }
            ]
          },
          "description":{
            "text":"The ActivityError event is no longer used. Please use the Screen.ErrorOccurred event instead."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"AfterActivity",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"ActivityStarter-AfterActivity",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"result",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"result"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"result/argument"
              }
            ]
          },
          "description":{
            "text":"Event raised after this ActivityStarter returns."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ResolveActivity",
          "@kind":"function",
          "@name":"ActivityStarter-ResolveActivity",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              }
            ]
          },
          "description":{
            "text":"Returns the name of the activity that corresponds to this ActivityStarer, or an empty string if no corresponding activity can be found."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ResolveActivity",
          "@kind":"function",
          "@name":"Type-ActivityStarter-ResolveActivity",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Returns the name of the activity that corresponds to this ActivityStarer, or an empty string if no corresponding activity can be found."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"StartActivity",
          "@kind":"command",
          "@name":"ActivityStarter-StartActivity",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Start the activity corresponding to this ActivityStarter."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"StartActivity",
          "@kind":"command",
          "@name":"Type-ActivityStarter-StartActivity",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Start the activity corresponding to this ActivityStarter."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"Ball",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"Ball",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"5"
              },
              {
                "@key":"ya-event-1",
                "@value":"Ball-CollidedWith"
              },
              {
                "@key":"ya-event-2",
                "@value":"Ball-Dragged"
              },
              {
                "@key":"ya-event-3",
                "@value":"Ball-EdgeReached"
              },
              {
                "@key":"ya-event-4",
                "@value":"Ball-Flung"
              },
              {
                "@key":"ya-event-5",
                "@value":"Ball-NoLongerCollidingWith"
              },
              {
                "@key":"ya-event-6",
                "@value":"Ball-TouchDown"
              },
              {
                "@key":"ya-event-7",
                "@value":"Ball-TouchUp"
              },
              {
                "@key":"ya-event-8",
                "@value":"Ball-Touched"
              },
              {
                "@key":"ya-prop-1",
                "@value":"Enabled/read-write-property/boolean/Controls whether the sprite moves when its speed is non-zero."
              },
              {
                "@key":"ya-prop-2",
                "@value":"Heading/read-write-property/number/Returns the sprite's heading in degrees above the positive x-axis. Zero degrees is toward the right of the screen; 90 degrees is toward the top of the screen."
              },
              {
                "@key":"ya-prop-3",
                "@value":"Interval/read-write-property/number/The interval in milliseconds at which the sprite's position is updated. For example, if the interval is 50 and the speed is 10, then the sprite will move 10 pixels every 50 milliseconds."
              },
              {
                "@key":"ya-prop-4",
                "@value":"PaintColor/read-write-property/number/"
              },
              {
                "@key":"ya-prop-5",
                "@value":"Radius/read-write-property/number/"
              },
              {
                "@key":"ya-prop-6",
                "@value":"Speed/read-write-property/number/The speed at which the sprite moves. The sprite moves this many pixels every interval."
              },
              {
                "@key":"ya-prop-7",
                "@value":"Visible/read-write-property/boolean/True if the sprite is visible."
              },
              {
                "@key":"ya-prop-8",
                "@value":"X/read-write-property/number/The horizontal coordinate of the left edge of the sprite, increasing as the sprite moves to the right."
              },
              {
                "@key":"ya-prop-9",
                "@value":"Y/read-write-property/number/The vertical coordinate of the top of the sprite, increasing as the sprite moves down."
              },
              {
                "@key":"ya-prop-10",
                "@value":"Z/read-write-property/number/How the sprite should be layered relative to other sprits, with higher-numbered layers in front of lower-numbered layers."
              },
              {
                "@key":"ya-method-1",
                "@value":"Ball-Bounce"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-Ball-Bounce"
              },
              {
                "@key":"ya-method-2",
                "@value":"Ball-CollidingWith"
              },
              {
                "@key":"ya-type-method-2",
                "@value":"Type-Ball-CollidingWith"
              },
              {
                "@key":"ya-method-3",
                "@value":"Ball-MoveIntoBounds"
              },
              {
                "@key":"ya-type-method-3",
                "@value":"Type-Ball-MoveIntoBounds"
              },
              {
                "@key":"ya-method-4",
                "@value":"Ball-MoveTo"
              },
              {
                "@key":"ya-type-method-4",
                "@value":"Type-Ball-MoveTo"
              },
              {
                "@key":"ya-method-5",
                "@value":"Ball-PointInDirection"
              },
              {
                "@key":"ya-type-method-5",
                "@value":"Type-Ball-PointInDirection"
              },
              {
                "@key":"ya-method-6",
                "@value":"Ball-PointTowards"
              },
              {
                "@key":"ya-type-method-6",
                "@value":"Type-Ball-PointTowards"
              }
            ]
          },
          "description":{
            "text":"A round 'sprite' that can be placed on a Canvas, where it can react to touches and drags, interact with other sprites (ImageSprites and other Balls) and the edge of the Canvas, and move according to its property values. For example, to have a Ball move 4 pixels toward the top of a Canvas every 500 milliseconds (half second), you would set the Speed property to 4 [pixels], the Interval property to 500 [milliseconds], the Heading property to 90 [degrees], and the Enabled property to True. These and its other properties can be changed at any time. The difference between a Ball and an ImageSprite is that the latter can get its appearance from an image file, while a Ball's appearance can only be changed by varying its PaintColor and Radius properties."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"CollidedWith",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Ball-CollidedWith",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"other",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"other"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"other/argument"
              }
            ]
          },
          "description":{
            "text":"Handler for CollidedWith events, called when two sprites collide. Note that checking for collisions with a rotated ImageSprite currently checks against the sprite's unrotated position. Therefore, collision checking will be inaccurate for tall narrow or short wide sprites that are rotated."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"Dragged",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Ball-Dragged",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"startX",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"startX"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"startY",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"startY"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"prevX",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"prevX"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"prevY",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"prevY"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"currentX",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"currentX"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"currentY",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"currentY"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"startX/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"startY/argument"
              },
              {
                "@key":"socket-allow-3",
                "@value":"prevX/argument"
              },
              {
                "@key":"socket-allow-4",
                "@value":"prevY/argument"
              },
              {
                "@key":"socket-allow-5",
                "@value":"currentX/argument"
              },
              {
                "@key":"socket-allow-6",
                "@value":"currentY/argument"
              }
            ]
          },
          "description":{
            "text":"Handler for Dragged events. On all calls, the starting coordinates are where the screen was first touched, and the \"current\" coordinates describe the endpoint of the current line segment. On the first call within a given drag, the \"previous\" coordinates are the same as the starting coordinates; subsequently, they are the \"current\" coordinates from the prior call. Note that the Sprite won't actually move anywhere in response to the Dragged event unless MoveTo is specifically called."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"EdgeReached",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Ball-EdgeReached",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"edge",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"edge"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"edge/argument"
              }
            ]
          },
          "description":{
            "text":"Event handler called when the sprite reaches an edge of the screen. If Bounce is then called with that edge, the sprite will appear to bounce off of the edge it reached."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"Flung",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Ball-Flung",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"x"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"y"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"speed",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"speed"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"heading",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"heading"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"xvel",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"xvel"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"yvel",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"yvel"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"x/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"y/argument"
              },
              {
                "@key":"socket-allow-3",
                "@value":"speed/argument"
              },
              {
                "@key":"socket-allow-4",
                "@value":"heading/argument"
              },
              {
                "@key":"socket-allow-5",
                "@value":"xvel/argument"
              },
              {
                "@key":"socket-allow-6",
                "@value":"yvel/argument"
              }
            ]
          },
          "description":{
            "text":"When a fling gesture (quick swipe) is made on the sprite: provides the (x,y) position of the start of the fling, relative to the upper left of the canvas. Also provides the speed (pixels per millisecond) and heading (0-360 degrees) of the fling, as well as the x velocity and y velocity components of the fling's vector."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"NoLongerCollidingWith",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Ball-NoLongerCollidingWith",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"other",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"other"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"other/argument"
              }
            ]
          },
          "description":{
            "text":"Event indicating that a pair of sprites are no longer colliding."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"TouchDown",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Ball-TouchDown",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"x"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"y"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"x/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"y/argument"
              }
            ]
          },
          "description":{
            "text":"When the user begins touching the sprite (places finger on sprite and leaves it there): provides the (x,y) position of the touch, relative to the upper left of the canvas"
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"TouchUp",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Ball-TouchUp",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"x"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"y"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"x/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"y/argument"
              }
            ]
          },
          "description":{
            "text":"When the user stops touching the sprite (lifts finger after a TouchDown event): provides the (x,y) position of the touch, relative to the upper left of the canvas"
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"Touched",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Ball-Touched",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"x"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"y"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"x/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"y/argument"
              }
            ]
          },
          "description":{
            "text":"When the user touches the sprite and then immediately lifts finger: provides the (x,y) position of the touch, relative to the upper left of the canvas"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Bounce",
          "@kind":"command",
          "@name":"Ball-Bounce",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"edge"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"edge/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"edge/number"
              }
            ]
          },
          "description":{
            "text":"Makes this sprite bounce, as if off a wall. For normal bouncing, the edge argument should be the one returned by EdgeReached."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Bounce",
          "@kind":"command",
          "@name":"Type-Ball-Bounce",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"edge"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"edge/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"edge/number"
              }
            ]
          },
          "description":{
            "text":"Makes this sprite bounce, as if off a wall. For normal bouncing, the edge argument should be the one returned by EdgeReached."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"CollidingWith",
          "@kind":"function",
          "@name":"Ball-CollidingWith",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"other"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              },
              {
                "@key":"socket-allow-1",
                "@value":"other/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"other/component"
              }
            ]
          },
          "description":{
            "text":"Indicates whether a collision has been registered between this sprite and the passed sprite."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"CollidingWith",
          "@kind":"function",
          "@name":"Type-Ball-CollidingWith",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"other"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"other/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"other/component"
              }
            ]
          },
          "description":{
            "text":"Indicates whether a collision has been registered between this sprite and the passed sprite."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"MoveIntoBounds",
          "@kind":"command",
          "@name":"Ball-MoveIntoBounds",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Moves the sprite back in bounds if part of it extends out of bounds, having no effect otherwise. If the sprite is too wide to fit on the canvas, this aligns the left side of the sprite with the left side of the canvas. If the sprite is too tall to fit on the canvas, this aligns the top side of the sprite with the top side of the canvas."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"MoveIntoBounds",
          "@kind":"command",
          "@name":"Type-Ball-MoveIntoBounds",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Moves the sprite back in bounds if part of it extends out of bounds, having no effect otherwise. If the sprite is too wide to fit on the canvas, this aligns the left side of the sprite with the left side of the canvas. If the sprite is too tall to fit on the canvas, this aligns the top side of the sprite with the top side of the canvas."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"MoveTo",
          "@kind":"command",
          "@name":"Ball-MoveTo",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"x/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"y/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"x/number"
              },
              {
                "@key":"socket-allow-4",
                "@value":"y/number"
              }
            ]
          },
          "description":{
            "text":"Moves the sprite so that its left top corner is at the specfied x and y coordinates."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"MoveTo",
          "@kind":"command",
          "@name":"Type-Ball-MoveTo",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"x/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"y/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"x/number"
              },
              {
                "@key":"socket-allow-6",
                "@value":"y/number"
              }
            ]
          },
          "description":{
            "text":"Moves the sprite so that its left top corner is at the specfied x and y coordinates."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"PointInDirection",
          "@kind":"command",
          "@name":"Ball-PointInDirection",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"x/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"y/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"x/number"
              },
              {
                "@key":"socket-allow-4",
                "@value":"y/number"
              }
            ]
          },
          "description":{
            "text":"Turns the sprite to point towards the point with coordinates as (x, y)."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"PointInDirection",
          "@kind":"command",
          "@name":"Type-Ball-PointInDirection",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"x/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"y/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"x/number"
              },
              {
                "@key":"socket-allow-6",
                "@value":"y/number"
              }
            ]
          },
          "description":{
            "text":"Turns the sprite to point towards the point with coordinates as (x, y)."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"PointTowards",
          "@kind":"command",
          "@name":"Ball-PointTowards",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"target"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"target/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"target/component"
              }
            ]
          },
          "description":{
            "text":"Turns the sprite to point towards a designated target sprite. The new heading will be parallel to the line joining the centerpoints of the two sprites."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"PointTowards",
          "@kind":"command",
          "@name":"Type-Ball-PointTowards",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"target"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"target/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"target/component"
              }
            ]
          },
          "description":{
            "text":"Turns the sprite to point towards a designated target sprite. The new heading will be parallel to the line joining the centerpoints of the two sprites."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"BarcodeScanner",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"BarcodeScanner",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"1"
              },
              {
                "@key":"ya-event-1",
                "@value":"BarcodeScanner-AfterScan"
              },
              {
                "@key":"ya-prop-1",
                "@value":"Result/read-only-property/text/"
              },
              {
                "@key":"ya-method-1",
                "@value":"BarcodeScanner-DoScan"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-BarcodeScanner-DoScan"
              }
            ]
          },
          "description":{
            "text":"Component for using the Barcode Scanner to read a barcode"
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"AfterScan",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"BarcodeScanner-AfterScan",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"result",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"result"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"result/argument"
              }
            ]
          },
          "description":{
            "text":"Simple event to raise after the scanner activity has returned"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"DoScan",
          "@kind":"command",
          "@name":"BarcodeScanner-DoScan",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Begins a barcode scan, using the camera. When the scan is complete, the AfterScan event will be raised."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"DoScan",
          "@kind":"command",
          "@name":"Type-BarcodeScanner-DoScan",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Begins a barcode scan, using the camera. When the scan is complete, the AfterScan event will be raised."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"BluetoothClient",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"BluetoothClient",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"5"
              },
              {
                "@key":"ya-prop-1",
                "@value":"AddressesAndNames/read-only-property/list/The addresses and names of paired Bluetooth devices"
              },
              {
                "@key":"ya-prop-2",
                "@value":"Available/read-only-property/boolean/Whether Bluetooth is available on the device"
              },
              {
                "@key":"ya-prop-3",
                "@value":"CharacterEncoding/read-write-property/text/"
              },
              {
                "@key":"ya-prop-4",
                "@value":"DelimiterByte/read-write-property/number/"
              },
              {
                "@key":"ya-prop-5",
                "@value":"Enabled/read-only-property/boolean/Whether Bluetooth is enabled"
              },
              {
                "@key":"ya-prop-6",
                "@value":"HighByteFirst/read-write-property/boolean/"
              },
              {
                "@key":"ya-prop-7",
                "@value":"IsConnected/read-only-property/boolean/"
              },
              {
                "@key":"ya-prop-8",
                "@value":"Secure/read-write-property/boolean/Whether to invoke SSP (Simple Secure Pairing), which is supported on devices with Bluetooth v2.1 or higher. When working with embedded Bluetooth devices, this property may need to be set to False. For Android 2.0-2.2, this property setting will be ignored."
              },
              {
                "@key":"ya-method-1",
                "@value":"BluetoothClient-BytesAvailableToReceive"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-BluetoothClient-BytesAvailableToReceive"
              },
              {
                "@key":"ya-method-2",
                "@value":"BluetoothClient-Connect"
              },
              {
                "@key":"ya-type-method-2",
                "@value":"Type-BluetoothClient-Connect"
              },
              {
                "@key":"ya-method-3",
                "@value":"BluetoothClient-ConnectWithUUID"
              },
              {
                "@key":"ya-type-method-3",
                "@value":"Type-BluetoothClient-ConnectWithUUID"
              },
              {
                "@key":"ya-method-4",
                "@value":"BluetoothClient-Disconnect"
              },
              {
                "@key":"ya-type-method-4",
                "@value":"Type-BluetoothClient-Disconnect"
              },
              {
                "@key":"ya-method-5",
                "@value":"BluetoothClient-IsDevicePaired"
              },
              {
                "@key":"ya-type-method-5",
                "@value":"Type-BluetoothClient-IsDevicePaired"
              },
              {
                "@key":"ya-method-6",
                "@value":"BluetoothClient-ReceiveSigned1ByteNumber"
              },
              {
                "@key":"ya-type-method-6",
                "@value":"Type-BluetoothClient-ReceiveSigned1ByteNumber"
              },
              {
                "@key":"ya-method-7",
                "@value":"BluetoothClient-ReceiveSigned2ByteNumber"
              },
              {
                "@key":"ya-type-method-7",
                "@value":"Type-BluetoothClient-ReceiveSigned2ByteNumber"
              },
              {
                "@key":"ya-method-8",
                "@value":"BluetoothClient-ReceiveSigned4ByteNumber"
              },
              {
                "@key":"ya-type-method-8",
                "@value":"Type-BluetoothClient-ReceiveSigned4ByteNumber"
              },
              {
                "@key":"ya-method-9",
                "@value":"BluetoothClient-ReceiveSignedBytes"
              },
              {
                "@key":"ya-type-method-9",
                "@value":"Type-BluetoothClient-ReceiveSignedBytes"
              },
              {
                "@key":"ya-method-10",
                "@value":"BluetoothClient-ReceiveText"
              },
              {
                "@key":"ya-type-method-10",
                "@value":"Type-BluetoothClient-ReceiveText"
              },
              {
                "@key":"ya-method-11",
                "@value":"BluetoothClient-ReceiveUnsigned1ByteNumber"
              },
              {
                "@key":"ya-type-method-11",
                "@value":"Type-BluetoothClient-ReceiveUnsigned1ByteNumber"
              },
              {
                "@key":"ya-method-12",
                "@value":"BluetoothClient-ReceiveUnsigned2ByteNumber"
              },
              {
                "@key":"ya-type-method-12",
                "@value":"Type-BluetoothClient-ReceiveUnsigned2ByteNumber"
              },
              {
                "@key":"ya-method-13",
                "@value":"BluetoothClient-ReceiveUnsigned4ByteNumber"
              },
              {
                "@key":"ya-type-method-13",
                "@value":"Type-BluetoothClient-ReceiveUnsigned4ByteNumber"
              },
              {
                "@key":"ya-method-14",
                "@value":"BluetoothClient-ReceiveUnsignedBytes"
              },
              {
                "@key":"ya-type-method-14",
                "@value":"Type-BluetoothClient-ReceiveUnsignedBytes"
              },
              {
                "@key":"ya-method-15",
                "@value":"BluetoothClient-Send1ByteNumber"
              },
              {
                "@key":"ya-type-method-15",
                "@value":"Type-BluetoothClient-Send1ByteNumber"
              },
              {
                "@key":"ya-method-16",
                "@value":"BluetoothClient-Send2ByteNumber"
              },
              {
                "@key":"ya-type-method-16",
                "@value":"Type-BluetoothClient-Send2ByteNumber"
              },
              {
                "@key":"ya-method-17",
                "@value":"BluetoothClient-Send4ByteNumber"
              },
              {
                "@key":"ya-type-method-17",
                "@value":"Type-BluetoothClient-Send4ByteNumber"
              },
              {
                "@key":"ya-method-18",
                "@value":"BluetoothClient-SendBytes"
              },
              {
                "@key":"ya-type-method-18",
                "@value":"Type-BluetoothClient-SendBytes"
              },
              {
                "@key":"ya-method-19",
                "@value":"BluetoothClient-SendText"
              },
              {
                "@key":"ya-type-method-19",
                "@value":"Type-BluetoothClient-SendText"
              }
            ]
          },
          "description":{
            "text":"Bluetooth client component"
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"BluetoothError",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"BluetoothClient-BluetoothError",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"functionName",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"functionName"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"message",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"message"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"functionName/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"message/argument"
              }
            ]
          },
          "description":{
            "text":"The BluetoothError event is no longer used. Please use the Screen.ErrorOccurred event instead."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"BytesAvailableToReceive",
          "@kind":"function",
          "@name":"BluetoothClient-BytesAvailableToReceive",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Returns an estimate of the number of bytes that can be received without blocking"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"BytesAvailableToReceive",
          "@kind":"function",
          "@name":"Type-BluetoothClient-BytesAvailableToReceive",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Returns an estimate of the number of bytes that can be received without blocking"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Connect",
          "@kind":"function",
          "@name":"BluetoothClient-Connect",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"address"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              },
              {
                "@key":"socket-allow-1",
                "@value":"address/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"address/text"
              }
            ]
          },
          "description":{
            "text":"Connect to the Bluetooth device with the specified address and the Serial Port Profile (SPP). Returns true if the connection was successful."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Connect",
          "@kind":"function",
          "@name":"Type-BluetoothClient-Connect",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"address"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"address/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"address/text"
              }
            ]
          },
          "description":{
            "text":"Connect to the Bluetooth device with the specified address and the Serial Port Profile (SPP). Returns true if the connection was successful."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ConnectWithUUID",
          "@kind":"function",
          "@name":"BluetoothClient-ConnectWithUUID",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"address"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"uuid"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              },
              {
                "@key":"socket-allow-1",
                "@value":"address/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"uuid/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"address/text"
              },
              {
                "@key":"socket-allow-4",
                "@value":"uuid/text"
              }
            ]
          },
          "description":{
            "text":"Connect to the Bluetooth device with the specified address and UUID. Returns true if the connection was successful."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ConnectWithUUID",
          "@kind":"function",
          "@name":"Type-BluetoothClient-ConnectWithUUID",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"address"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"uuid"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"address/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"uuid/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"address/text"
              },
              {
                "@key":"socket-allow-6",
                "@value":"uuid/text"
              }
            ]
          },
          "description":{
            "text":"Connect to the Bluetooth device with the specified address and UUID. Returns true if the connection was successful."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Disconnect",
          "@kind":"command",
          "@name":"BluetoothClient-Disconnect",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Disconnect from the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Disconnect",
          "@kind":"command",
          "@name":"Type-BluetoothClient-Disconnect",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Disconnect from the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"IsDevicePaired",
          "@kind":"function",
          "@name":"BluetoothClient-IsDevicePaired",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"address"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              },
              {
                "@key":"socket-allow-1",
                "@value":"address/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"address/text"
              }
            ]
          },
          "description":{
            "text":"Checks whether the Bluetooth device with the specified address is paired."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"IsDevicePaired",
          "@kind":"function",
          "@name":"Type-BluetoothClient-IsDevicePaired",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"address"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"address/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"address/text"
              }
            ]
          },
          "description":{
            "text":"Checks whether the Bluetooth device with the specified address is paired."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveSigned1ByteNumber",
          "@kind":"function",
          "@name":"BluetoothClient-ReceiveSigned1ByteNumber",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Receive a signed 1-byte number from the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveSigned1ByteNumber",
          "@kind":"function",
          "@name":"Type-BluetoothClient-ReceiveSigned1ByteNumber",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Receive a signed 1-byte number from the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveSigned2ByteNumber",
          "@kind":"function",
          "@name":"BluetoothClient-ReceiveSigned2ByteNumber",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Receive a signed 2-byte number from the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveSigned2ByteNumber",
          "@kind":"function",
          "@name":"Type-BluetoothClient-ReceiveSigned2ByteNumber",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Receive a signed 2-byte number from the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveSigned4ByteNumber",
          "@kind":"function",
          "@name":"BluetoothClient-ReceiveSigned4ByteNumber",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Receive a signed 4-byte number from the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveSigned4ByteNumber",
          "@kind":"function",
          "@name":"Type-BluetoothClient-ReceiveSigned4ByteNumber",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Receive a signed 4-byte number from the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveSignedBytes",
          "@kind":"function",
          "@name":"BluetoothClient-ReceiveSignedBytes",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"numberOfBytes"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"list"
              },
              {
                "@key":"socket-allow-1",
                "@value":"numberOfBytes/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"numberOfBytes/number"
              }
            ]
          },
          "description":{
            "text":"Receive multiple signed byte values from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveSignedBytes",
          "@kind":"function",
          "@name":"Type-BluetoothClient-ReceiveSignedBytes",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"numberOfBytes"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"list"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"numberOfBytes/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"numberOfBytes/number"
              }
            ]
          },
          "description":{
            "text":"Receive multiple signed byte values from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveText",
          "@kind":"function",
          "@name":"BluetoothClient-ReceiveText",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"numberOfBytes"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"numberOfBytes/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"numberOfBytes/number"
              }
            ]
          },
          "description":{
            "text":"Receive text from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveText",
          "@kind":"function",
          "@name":"Type-BluetoothClient-ReceiveText",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"numberOfBytes"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"numberOfBytes/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"numberOfBytes/number"
              }
            ]
          },
          "description":{
            "text":"Receive text from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveUnsigned1ByteNumber",
          "@kind":"function",
          "@name":"BluetoothClient-ReceiveUnsigned1ByteNumber",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Receive an unsigned 1-byte number from the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveUnsigned1ByteNumber",
          "@kind":"function",
          "@name":"Type-BluetoothClient-ReceiveUnsigned1ByteNumber",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Receive an unsigned 1-byte number from the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveUnsigned2ByteNumber",
          "@kind":"function",
          "@name":"BluetoothClient-ReceiveUnsigned2ByteNumber",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Receive a unsigned 2-byte number from the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveUnsigned2ByteNumber",
          "@kind":"function",
          "@name":"Type-BluetoothClient-ReceiveUnsigned2ByteNumber",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Receive a unsigned 2-byte number from the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveUnsigned4ByteNumber",
          "@kind":"function",
          "@name":"BluetoothClient-ReceiveUnsigned4ByteNumber",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Receive a unsigned 4-byte number from the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveUnsigned4ByteNumber",
          "@kind":"function",
          "@name":"Type-BluetoothClient-ReceiveUnsigned4ByteNumber",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Receive a unsigned 4-byte number from the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveUnsignedBytes",
          "@kind":"function",
          "@name":"BluetoothClient-ReceiveUnsignedBytes",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"numberOfBytes"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"list"
              },
              {
                "@key":"socket-allow-1",
                "@value":"numberOfBytes/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"numberOfBytes/number"
              }
            ]
          },
          "description":{
            "text":"Receive multiple unsigned byte values from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveUnsignedBytes",
          "@kind":"function",
          "@name":"Type-BluetoothClient-ReceiveUnsignedBytes",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"numberOfBytes"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"list"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"numberOfBytes/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"numberOfBytes/number"
              }
            ]
          },
          "description":{
            "text":"Receive multiple unsigned byte values from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Send1ByteNumber",
          "@kind":"command",
          "@name":"BluetoothClient-Send1ByteNumber",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"number"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"number/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"number/text"
              }
            ]
          },
          "description":{
            "text":"Send a 1-byte number to the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Send1ByteNumber",
          "@kind":"command",
          "@name":"Type-BluetoothClient-Send1ByteNumber",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"number"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"number/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"number/text"
              }
            ]
          },
          "description":{
            "text":"Send a 1-byte number to the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Send2ByteNumber",
          "@kind":"command",
          "@name":"BluetoothClient-Send2ByteNumber",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"number"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"number/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"number/text"
              }
            ]
          },
          "description":{
            "text":"Send a 2-byte number to the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Send2ByteNumber",
          "@kind":"command",
          "@name":"Type-BluetoothClient-Send2ByteNumber",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"number"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"number/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"number/text"
              }
            ]
          },
          "description":{
            "text":"Send a 2-byte number to the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Send4ByteNumber",
          "@kind":"command",
          "@name":"BluetoothClient-Send4ByteNumber",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"number"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"number/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"number/text"
              }
            ]
          },
          "description":{
            "text":"Send a 4-byte number to the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Send4ByteNumber",
          "@kind":"command",
          "@name":"Type-BluetoothClient-Send4ByteNumber",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"number"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"number/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"number/text"
              }
            ]
          },
          "description":{
            "text":"Send a 4-byte number to the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SendBytes",
          "@kind":"command",
          "@name":"BluetoothClient-SendBytes",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"list"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"list/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"list/list"
              }
            ]
          },
          "description":{
            "text":"Send a list of byte values to the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SendBytes",
          "@kind":"command",
          "@name":"Type-BluetoothClient-SendBytes",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"list"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"list/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"list/list"
              }
            ]
          },
          "description":{
            "text":"Send a list of byte values to the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SendText",
          "@kind":"command",
          "@name":"BluetoothClient-SendText",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"text"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"text/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"text/text"
              }
            ]
          },
          "description":{
            "text":"Send text to the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SendText",
          "@kind":"command",
          "@name":"Type-BluetoothClient-SendText",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"text/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"text/text"
              }
            ]
          },
          "description":{
            "text":"Send text to the connected Bluetooth device."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"BluetoothServer",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"BluetoothServer",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"5"
              },
              {
                "@key":"ya-event-1",
                "@value":"BluetoothServer-ConnectionAccepted"
              },
              {
                "@key":"ya-prop-1",
                "@value":"Available/read-only-property/boolean/Whether Bluetooth is available on the device"
              },
              {
                "@key":"ya-prop-2",
                "@value":"CharacterEncoding/read-write-property/text/"
              },
              {
                "@key":"ya-prop-3",
                "@value":"DelimiterByte/read-write-property/number/"
              },
              {
                "@key":"ya-prop-4",
                "@value":"Enabled/read-only-property/boolean/Whether Bluetooth is enabled"
              },
              {
                "@key":"ya-prop-5",
                "@value":"HighByteFirst/read-write-property/boolean/"
              },
              {
                "@key":"ya-prop-6",
                "@value":"IsAccepting/read-only-property/boolean/"
              },
              {
                "@key":"ya-prop-7",
                "@value":"IsConnected/read-only-property/boolean/"
              },
              {
                "@key":"ya-prop-8",
                "@value":"Secure/read-write-property/boolean/Whether to invoke SSP (Simple Secure Pairing), which is supported on devices with Bluetooth v2.1 or higher. When working with embedded Bluetooth devices, this property may need to be set to False. For Android 2.0-2.2, this property setting will be ignored."
              },
              {
                "@key":"ya-method-1",
                "@value":"BluetoothServer-AcceptConnection"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-BluetoothServer-AcceptConnection"
              },
              {
                "@key":"ya-method-2",
                "@value":"BluetoothServer-AcceptConnectionWithUUID"
              },
              {
                "@key":"ya-type-method-2",
                "@value":"Type-BluetoothServer-AcceptConnectionWithUUID"
              },
              {
                "@key":"ya-method-3",
                "@value":"BluetoothServer-BytesAvailableToReceive"
              },
              {
                "@key":"ya-type-method-3",
                "@value":"Type-BluetoothServer-BytesAvailableToReceive"
              },
              {
                "@key":"ya-method-4",
                "@value":"BluetoothServer-Disconnect"
              },
              {
                "@key":"ya-type-method-4",
                "@value":"Type-BluetoothServer-Disconnect"
              },
              {
                "@key":"ya-method-5",
                "@value":"BluetoothServer-ReceiveSigned1ByteNumber"
              },
              {
                "@key":"ya-type-method-5",
                "@value":"Type-BluetoothServer-ReceiveSigned1ByteNumber"
              },
              {
                "@key":"ya-method-6",
                "@value":"BluetoothServer-ReceiveSigned2ByteNumber"
              },
              {
                "@key":"ya-type-method-6",
                "@value":"Type-BluetoothServer-ReceiveSigned2ByteNumber"
              },
              {
                "@key":"ya-method-7",
                "@value":"BluetoothServer-ReceiveSigned4ByteNumber"
              },
              {
                "@key":"ya-type-method-7",
                "@value":"Type-BluetoothServer-ReceiveSigned4ByteNumber"
              },
              {
                "@key":"ya-method-8",
                "@value":"BluetoothServer-ReceiveSignedBytes"
              },
              {
                "@key":"ya-type-method-8",
                "@value":"Type-BluetoothServer-ReceiveSignedBytes"
              },
              {
                "@key":"ya-method-9",
                "@value":"BluetoothServer-ReceiveText"
              },
              {
                "@key":"ya-type-method-9",
                "@value":"Type-BluetoothServer-ReceiveText"
              },
              {
                "@key":"ya-method-10",
                "@value":"BluetoothServer-ReceiveUnsigned1ByteNumber"
              },
              {
                "@key":"ya-type-method-10",
                "@value":"Type-BluetoothServer-ReceiveUnsigned1ByteNumber"
              },
              {
                "@key":"ya-method-11",
                "@value":"BluetoothServer-ReceiveUnsigned2ByteNumber"
              },
              {
                "@key":"ya-type-method-11",
                "@value":"Type-BluetoothServer-ReceiveUnsigned2ByteNumber"
              },
              {
                "@key":"ya-method-12",
                "@value":"BluetoothServer-ReceiveUnsigned4ByteNumber"
              },
              {
                "@key":"ya-type-method-12",
                "@value":"Type-BluetoothServer-ReceiveUnsigned4ByteNumber"
              },
              {
                "@key":"ya-method-13",
                "@value":"BluetoothServer-ReceiveUnsignedBytes"
              },
              {
                "@key":"ya-type-method-13",
                "@value":"Type-BluetoothServer-ReceiveUnsignedBytes"
              },
              {
                "@key":"ya-method-14",
                "@value":"BluetoothServer-Send1ByteNumber"
              },
              {
                "@key":"ya-type-method-14",
                "@value":"Type-BluetoothServer-Send1ByteNumber"
              },
              {
                "@key":"ya-method-15",
                "@value":"BluetoothServer-Send2ByteNumber"
              },
              {
                "@key":"ya-type-method-15",
                "@value":"Type-BluetoothServer-Send2ByteNumber"
              },
              {
                "@key":"ya-method-16",
                "@value":"BluetoothServer-Send4ByteNumber"
              },
              {
                "@key":"ya-type-method-16",
                "@value":"Type-BluetoothServer-Send4ByteNumber"
              },
              {
                "@key":"ya-method-17",
                "@value":"BluetoothServer-SendBytes"
              },
              {
                "@key":"ya-type-method-17",
                "@value":"Type-BluetoothServer-SendBytes"
              },
              {
                "@key":"ya-method-18",
                "@value":"BluetoothServer-SendText"
              },
              {
                "@key":"ya-type-method-18",
                "@value":"Type-BluetoothServer-SendText"
              },
              {
                "@key":"ya-method-19",
                "@value":"BluetoothServer-StopAccepting"
              },
              {
                "@key":"ya-type-method-19",
                "@value":"Type-BluetoothServer-StopAccepting"
              }
            ]
          },
          "description":{
            "text":"Bluetooth server component"
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"BluetoothError",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"BluetoothServer-BluetoothError",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"functionName",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"functionName"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"message",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"message"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"functionName/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"message/argument"
              }
            ]
          },
          "description":{
            "text":"The BluetoothError event is no longer used. Please use the Screen.ErrorOccurred event instead."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"ConnectionAccepted",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"BluetoothServer-ConnectionAccepted",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Indicates that a bluetooth connection has been accepted."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"AcceptConnection",
          "@kind":"command",
          "@name":"BluetoothServer-AcceptConnection",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"serviceName"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"serviceName/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"serviceName/text"
              }
            ]
          },
          "description":{
            "text":"Accept an incoming connection with the Serial Port Profile (SPP)."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"AcceptConnection",
          "@kind":"command",
          "@name":"Type-BluetoothServer-AcceptConnection",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"serviceName"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"serviceName/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"serviceName/text"
              }
            ]
          },
          "description":{
            "text":"Accept an incoming connection with the Serial Port Profile (SPP)."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"AcceptConnectionWithUUID",
          "@kind":"command",
          "@name":"BluetoothServer-AcceptConnectionWithUUID",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"serviceName"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"uuid"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"serviceName/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"uuid/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"serviceName/text"
              },
              {
                "@key":"socket-allow-4",
                "@value":"uuid/text"
              }
            ]
          },
          "description":{
            "text":"Accept an incoming connection with a specific UUID."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"AcceptConnectionWithUUID",
          "@kind":"command",
          "@name":"Type-BluetoothServer-AcceptConnectionWithUUID",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"serviceName"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"uuid"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"serviceName/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"uuid/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"serviceName/text"
              },
              {
                "@key":"socket-allow-6",
                "@value":"uuid/text"
              }
            ]
          },
          "description":{
            "text":"Accept an incoming connection with a specific UUID."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"BytesAvailableToReceive",
          "@kind":"function",
          "@name":"BluetoothServer-BytesAvailableToReceive",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Returns an estimate of the number of bytes that can be received without blocking"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"BytesAvailableToReceive",
          "@kind":"function",
          "@name":"Type-BluetoothServer-BytesAvailableToReceive",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Returns an estimate of the number of bytes that can be received without blocking"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Disconnect",
          "@kind":"command",
          "@name":"BluetoothServer-Disconnect",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Disconnect from the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Disconnect",
          "@kind":"command",
          "@name":"Type-BluetoothServer-Disconnect",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Disconnect from the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveSigned1ByteNumber",
          "@kind":"function",
          "@name":"BluetoothServer-ReceiveSigned1ByteNumber",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Receive a signed 1-byte number from the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveSigned1ByteNumber",
          "@kind":"function",
          "@name":"Type-BluetoothServer-ReceiveSigned1ByteNumber",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Receive a signed 1-byte number from the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveSigned2ByteNumber",
          "@kind":"function",
          "@name":"BluetoothServer-ReceiveSigned2ByteNumber",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Receive a signed 2-byte number from the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveSigned2ByteNumber",
          "@kind":"function",
          "@name":"Type-BluetoothServer-ReceiveSigned2ByteNumber",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Receive a signed 2-byte number from the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveSigned4ByteNumber",
          "@kind":"function",
          "@name":"BluetoothServer-ReceiveSigned4ByteNumber",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Receive a signed 4-byte number from the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveSigned4ByteNumber",
          "@kind":"function",
          "@name":"Type-BluetoothServer-ReceiveSigned4ByteNumber",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Receive a signed 4-byte number from the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveSignedBytes",
          "@kind":"function",
          "@name":"BluetoothServer-ReceiveSignedBytes",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"numberOfBytes"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"list"
              },
              {
                "@key":"socket-allow-1",
                "@value":"numberOfBytes/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"numberOfBytes/number"
              }
            ]
          },
          "description":{
            "text":"Receive multiple signed byte values from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveSignedBytes",
          "@kind":"function",
          "@name":"Type-BluetoothServer-ReceiveSignedBytes",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"numberOfBytes"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"list"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"numberOfBytes/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"numberOfBytes/number"
              }
            ]
          },
          "description":{
            "text":"Receive multiple signed byte values from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveText",
          "@kind":"function",
          "@name":"BluetoothServer-ReceiveText",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"numberOfBytes"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"numberOfBytes/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"numberOfBytes/number"
              }
            ]
          },
          "description":{
            "text":"Receive text from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveText",
          "@kind":"function",
          "@name":"Type-BluetoothServer-ReceiveText",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"numberOfBytes"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"numberOfBytes/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"numberOfBytes/number"
              }
            ]
          },
          "description":{
            "text":"Receive text from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveUnsigned1ByteNumber",
          "@kind":"function",
          "@name":"BluetoothServer-ReceiveUnsigned1ByteNumber",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Receive an unsigned 1-byte number from the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveUnsigned1ByteNumber",
          "@kind":"function",
          "@name":"Type-BluetoothServer-ReceiveUnsigned1ByteNumber",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Receive an unsigned 1-byte number from the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveUnsigned2ByteNumber",
          "@kind":"function",
          "@name":"BluetoothServer-ReceiveUnsigned2ByteNumber",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Receive a unsigned 2-byte number from the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveUnsigned2ByteNumber",
          "@kind":"function",
          "@name":"Type-BluetoothServer-ReceiveUnsigned2ByteNumber",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Receive a unsigned 2-byte number from the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveUnsigned4ByteNumber",
          "@kind":"function",
          "@name":"BluetoothServer-ReceiveUnsigned4ByteNumber",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Receive a unsigned 4-byte number from the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveUnsigned4ByteNumber",
          "@kind":"function",
          "@name":"Type-BluetoothServer-ReceiveUnsigned4ByteNumber",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Receive a unsigned 4-byte number from the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveUnsignedBytes",
          "@kind":"function",
          "@name":"BluetoothServer-ReceiveUnsignedBytes",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"numberOfBytes"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"list"
              },
              {
                "@key":"socket-allow-1",
                "@value":"numberOfBytes/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"numberOfBytes/number"
              }
            ]
          },
          "description":{
            "text":"Receive multiple unsigned byte values from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ReceiveUnsignedBytes",
          "@kind":"function",
          "@name":"Type-BluetoothServer-ReceiveUnsignedBytes",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"numberOfBytes"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"list"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"numberOfBytes/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"numberOfBytes/number"
              }
            ]
          },
          "description":{
            "text":"Receive multiple unsigned byte values from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Send1ByteNumber",
          "@kind":"command",
          "@name":"BluetoothServer-Send1ByteNumber",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"number"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"number/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"number/text"
              }
            ]
          },
          "description":{
            "text":"Send a 1-byte number to the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Send1ByteNumber",
          "@kind":"command",
          "@name":"Type-BluetoothServer-Send1ByteNumber",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"number"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"number/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"number/text"
              }
            ]
          },
          "description":{
            "text":"Send a 1-byte number to the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Send2ByteNumber",
          "@kind":"command",
          "@name":"BluetoothServer-Send2ByteNumber",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"number"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"number/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"number/text"
              }
            ]
          },
          "description":{
            "text":"Send a 2-byte number to the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Send2ByteNumber",
          "@kind":"command",
          "@name":"Type-BluetoothServer-Send2ByteNumber",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"number"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"number/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"number/text"
              }
            ]
          },
          "description":{
            "text":"Send a 2-byte number to the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Send4ByteNumber",
          "@kind":"command",
          "@name":"BluetoothServer-Send4ByteNumber",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"number"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"number/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"number/text"
              }
            ]
          },
          "description":{
            "text":"Send a 4-byte number to the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Send4ByteNumber",
          "@kind":"command",
          "@name":"Type-BluetoothServer-Send4ByteNumber",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"number"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"number/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"number/text"
              }
            ]
          },
          "description":{
            "text":"Send a 4-byte number to the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SendBytes",
          "@kind":"command",
          "@name":"BluetoothServer-SendBytes",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"list"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"list/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"list/list"
              }
            ]
          },
          "description":{
            "text":"Send a list of byte values to the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SendBytes",
          "@kind":"command",
          "@name":"Type-BluetoothServer-SendBytes",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"list"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"list/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"list/list"
              }
            ]
          },
          "description":{
            "text":"Send a list of byte values to the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SendText",
          "@kind":"command",
          "@name":"BluetoothServer-SendText",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"text"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"text/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"text/text"
              }
            ]
          },
          "description":{
            "text":"Send text to the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SendText",
          "@kind":"command",
          "@name":"Type-BluetoothServer-SendText",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"text/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"text/text"
              }
            ]
          },
          "description":{
            "text":"Send text to the connected Bluetooth device."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"StopAccepting",
          "@kind":"command",
          "@name":"BluetoothServer-StopAccepting",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Stop accepting an incoming connection."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"StopAccepting",
          "@kind":"command",
          "@name":"Type-BluetoothServer-StopAccepting",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Stop accepting an incoming connection."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"Button",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"Button",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"5"
              },
              {
                "@key":"ya-event-1",
                "@value":"Button-Click"
              },
              {
                "@key":"ya-event-2",
                "@value":"Button-GotFocus"
              },
              {
                "@key":"ya-event-3",
                "@value":"Button-LongClick"
              },
              {
                "@key":"ya-event-4",
                "@value":"Button-LostFocus"
              },
              {
                "@key":"ya-prop-1",
                "@value":"BackgroundColor/read-write-property/number/Returns the button's background color"
              },
              {
                "@key":"ya-prop-2",
                "@value":"Column/invisible-property/number/"
              },
              {
                "@key":"ya-prop-3",
                "@value":"Enabled/read-write-property/boolean/"
              },
              {
                "@key":"ya-prop-4",
                "@value":"FontBold/invisible-property/boolean/"
              },
              {
                "@key":"ya-prop-5",
                "@value":"FontItalic/invisible-property/boolean/"
              },
              {
                "@key":"ya-prop-6",
                "@value":"FontSize/invisible-property/number/"
              },
              {
                "@key":"ya-prop-7",
                "@value":"FontTypeface/invisible-property/number/"
              },
              {
                "@key":"ya-prop-8",
                "@value":"Height/read-write-property/number/"
              },
              {
                "@key":"ya-prop-9",
                "@value":"Image/read-write-property/text/Specifies the path of the button's image. If there is both an Image and a BackgroundColor, only the Image will be visible."
              },
              {
                "@key":"ya-prop-10",
                "@value":"Row/invisible-property/number/"
              },
              {
                "@key":"ya-prop-11",
                "@value":"Shape/invisible-property/number/Specifies the button's shape (default, rounded, rectangular, oval). The shape will not be visible if an Image is being displayed."
              },
              {
                "@key":"ya-prop-12",
                "@value":"ShowFeedback/read-write-property/boolean/Specifies if a visual feedback should be shown for a button that as an image as background."
              },
              {
                "@key":"ya-prop-13",
                "@value":"Text/read-write-property/text/"
              },
              {
                "@key":"ya-prop-14",
                "@value":"TextAlignment/invisible-property/number/"
              },
              {
                "@key":"ya-prop-15",
                "@value":"TextColor/read-write-property/number/"
              },
              {
                "@key":"ya-prop-16",
                "@value":"Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."
              },
              {
                "@key":"ya-prop-17",
                "@value":"Width/read-write-property/number/"
              }
            ]
          },
          "description":{
            "text":"Button with the ability to detect clicks. Many aspects of its appearance can be changed, as well as whether it is clickable (Enabled), can be changed in the Designer or in the Blocks Editor."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"Click",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Button-Click",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Indicates a user has clicked on the button."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"GotFocus",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Button-GotFocus",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Indicates the cursor moved over the button so it is now possible to click it."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"LongClick",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Button-LongClick",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Indicates a user has long clicked on the button."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"LostFocus",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Button-LostFocus",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Indicates the cursor moved away from the button so it is now no longer possible to click it."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"Camcorder",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"Camcorder",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"1"
              },
              {
                "@key":"ya-event-1",
                "@value":"Camcorder-AfterRecording"
              },
              {
                "@key":"ya-method-1",
                "@value":"Camcorder-RecordVideo"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-Camcorder-RecordVideo"
              }
            ]
          },
          "description":{
            "text":"A component to record a video using the device's camcorder.After the video is recorded, the name of the file on the phone containing the clip is available as an argument to the AfterRecording event. The file name can be used, for example, to set the source property of a VideoPlayer component."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"AfterRecording",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Camcorder-AfterRecording",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"clip",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"clip"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"clip/argument"
              }
            ]
          },
          "description":{
            "text":"Indicates that a video was recorded with the camera and provides the path to the stored picture."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"RecordVideo",
          "@kind":"command",
          "@name":"Camcorder-RecordVideo",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Records a video, then raises the AfterRecoding event."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"RecordVideo",
          "@kind":"command",
          "@name":"Type-Camcorder-RecordVideo",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Records a video, then raises the AfterRecoding event."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"Camera",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"Camera",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"1"
              },
              {
                "@key":"ya-event-1",
                "@value":"Camera-AfterPicture"
              },
              {
                "@key":"ya-method-1",
                "@value":"Camera-TakePicture"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-Camera-TakePicture"
              }
            ]
          },
          "description":{
            "text":"A component to take a picture using the device's camera. After the picture is taken, the name of the file on the phone containing the picture is available as an argument to the AfterPicture event. The file name can be used, for example, to set the Picture property of an Image component."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"AfterPicture",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Camera-AfterPicture",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"image",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"image"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"image/argument"
              }
            ]
          },
          "description":{
            "text":"Indicates that a photo was taken with the camera and provides the path to the stored picture."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"TakePicture",
          "@kind":"command",
          "@name":"Camera-TakePicture",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Takes a picture, then raises the AfterPicture event."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"TakePicture",
          "@kind":"command",
          "@name":"Type-Camera-TakePicture",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Takes a picture, then raises the AfterPicture event."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"Canvas",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"Canvas",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"7"
              },
              {
                "@key":"ya-event-1",
                "@value":"Canvas-Dragged"
              },
              {
                "@key":"ya-event-2",
                "@value":"Canvas-Flung"
              },
              {
                "@key":"ya-event-3",
                "@value":"Canvas-TouchDown"
              },
              {
                "@key":"ya-event-4",
                "@value":"Canvas-TouchUp"
              },
              {
                "@key":"ya-event-5",
                "@value":"Canvas-Touched"
              },
              {
                "@key":"ya-prop-1",
                "@value":"BackgroundColor/read-write-property/number/The color of the canvas background."
              },
              {
                "@key":"ya-prop-2",
                "@value":"BackgroundImage/read-write-property/text/The name of a file containing the background image for the canvas"
              },
              {
                "@key":"ya-prop-3",
                "@value":"Column/invisible-property/number/"
              },
              {
                "@key":"ya-prop-4",
                "@value":"FontSize/read-write-property/number/The font size of text drawn on the canvas."
              },
              {
                "@key":"ya-prop-5",
                "@value":"Height/read-write-property/number/"
              },
              {
                "@key":"ya-prop-6",
                "@value":"LineWidth/read-write-property/number/The width of lines drawn on the canvas."
              },
              {
                "@key":"ya-prop-7",
                "@value":"PaintColor/read-write-property/number/The color in which lines are drawn"
              },
              {
                "@key":"ya-prop-8",
                "@value":"Row/invisible-property/number/"
              },
              {
                "@key":"ya-prop-9",
                "@value":"TextAlignment/invisible-property/number/"
              },
              {
                "@key":"ya-prop-10",
                "@value":"Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."
              },
              {
                "@key":"ya-prop-11",
                "@value":"Width/read-write-property/number/"
              },
              {
                "@key":"ya-method-1",
                "@value":"Canvas-Clear"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-Canvas-Clear"
              },
              {
                "@key":"ya-method-2",
                "@value":"Canvas-DrawCircle"
              },
              {
                "@key":"ya-type-method-2",
                "@value":"Type-Canvas-DrawCircle"
              },
              {
                "@key":"ya-method-3",
                "@value":"Canvas-DrawLine"
              },
              {
                "@key":"ya-type-method-3",
                "@value":"Type-Canvas-DrawLine"
              },
              {
                "@key":"ya-method-4",
                "@value":"Canvas-DrawPoint"
              },
              {
                "@key":"ya-type-method-4",
                "@value":"Type-Canvas-DrawPoint"
              },
              {
                "@key":"ya-method-5",
                "@value":"Canvas-DrawText"
              },
              {
                "@key":"ya-type-method-5",
                "@value":"Type-Canvas-DrawText"
              },
              {
                "@key":"ya-method-6",
                "@value":"Canvas-DrawTextAtAngle"
              },
              {
                "@key":"ya-type-method-6",
                "@value":"Type-Canvas-DrawTextAtAngle"
              },
              {
                "@key":"ya-method-7",
                "@value":"Canvas-GetBackgroundPixelColor"
              },
              {
                "@key":"ya-type-method-7",
                "@value":"Type-Canvas-GetBackgroundPixelColor"
              },
              {
                "@key":"ya-method-8",
                "@value":"Canvas-GetPixelColor"
              },
              {
                "@key":"ya-type-method-8",
                "@value":"Type-Canvas-GetPixelColor"
              },
              {
                "@key":"ya-method-9",
                "@value":"Canvas-Save"
              },
              {
                "@key":"ya-type-method-9",
                "@value":"Type-Canvas-Save"
              },
              {
                "@key":"ya-method-10",
                "@value":"Canvas-SaveAs"
              },
              {
                "@key":"ya-type-method-10",
                "@value":"Type-Canvas-SaveAs"
              },
              {
                "@key":"ya-method-11",
                "@value":"Canvas-SetBackgroundPixelColor"
              },
              {
                "@key":"ya-type-method-11",
                "@value":"Type-Canvas-SetBackgroundPixelColor"
              }
            ]
          },
          "description":{
            "text":"A two-dimensional touch-sensitive rectangular panel on which drawing can be done and sprites can be moved. The BackgroundColor, PaintColor, BackgroundImage, Width, and Height of the Canvas can be set in either the Designer or in the Blocks Editor. The Width and Height are measured in pixels and must be positive. Any location on the Canvas can be specified as a pair of (X, Y) values, where - X is the number of pixels away from the left edge of the Canvas - Y is the number of pixels away from the top edge of the Canvas. There are events to tell when and where a Canvas has been touched or a Sprite (ImageSprite or Ball) has been dragged. There are also methods for drawing points, lines, and circles."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"Dragged",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Canvas-Dragged",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"startX",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"startX"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"startY",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"startY"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"prevX",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"prevX"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"prevY",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"prevY"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"currentX",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"currentX"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"currentY",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"currentY"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"draggedSprite",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"draggedSprite"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"startX/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"startY/argument"
              },
              {
                "@key":"socket-allow-3",
                "@value":"prevX/argument"
              },
              {
                "@key":"socket-allow-4",
                "@value":"prevY/argument"
              },
              {
                "@key":"socket-allow-5",
                "@value":"currentX/argument"
              },
              {
                "@key":"socket-allow-6",
                "@value":"currentY/argument"
              },
              {
                "@key":"socket-allow-7",
                "@value":"draggedSprite/argument"
              }
            ]
          },
          "description":{
            "text":"When the user does a drag from one point (prevX, prevY) to another (x, y). The pair (startX, startY) indicates where the user first touched the screen, and \"draggedSprite\" indicates whether a sprite is being dragged."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"Flung",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Canvas-Flung",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"x"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"y"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"speed",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"speed"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"heading",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"heading"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"xvel",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"xvel"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"yvel",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"yvel"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"flungSprite",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"flungSprite"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"x/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"y/argument"
              },
              {
                "@key":"socket-allow-3",
                "@value":"speed/argument"
              },
              {
                "@key":"socket-allow-4",
                "@value":"heading/argument"
              },
              {
                "@key":"socket-allow-5",
                "@value":"xvel/argument"
              },
              {
                "@key":"socket-allow-6",
                "@value":"yvel/argument"
              },
              {
                "@key":"socket-allow-7",
                "@value":"flungSprite/argument"
              }
            ]
          },
          "description":{
            "text":"When a fling gesture (quick swipe) is made on the canvas: provides the (x,y) position of the start of the fling, relative to the upper left of the canvas. Also provides the speed (pixels per millisecond) and heading (0-360 degrees) of the fling, as well as the x velocity and y velocity components of the fling's vector. The value \"flungSprite\" is true if a sprite was located near the the starting point of the fling gesture."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"TouchDown",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Canvas-TouchDown",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"x"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"y"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"x/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"y/argument"
              }
            ]
          },
          "description":{
            "text":"When the user begins touching the canvas (places finger on canvas and leaves it there): provides the (x,y) position of the touch, relative to the upper left of the canvas"
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"TouchUp",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Canvas-TouchUp",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"x"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"y"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"x/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"y/argument"
              }
            ]
          },
          "description":{
            "text":"When the user stops touching the canvas (lifts finger after a TouchDown event): provides the (x,y) position of the touch, relative to the upper left of the canvas"
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"Touched",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Canvas-Touched",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"x"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"y"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"touchedSprite",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"touchedSprite"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"x/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"y/argument"
              },
              {
                "@key":"socket-allow-3",
                "@value":"touchedSprite/argument"
              }
            ]
          },
          "description":{
            "text":"When the user touches the canvas and then immediately lifts finger: provides the (x,y) position of the touch, relative to the upper left of the canvas. TouchedSprite is true if the same touch also touched a sprite, and false otherwise."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Clear",
          "@kind":"command",
          "@name":"Canvas-Clear",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Clears anything drawn on this Canvas but not any background color or image."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Clear",
          "@kind":"command",
          "@name":"Type-Canvas-Clear",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Clears anything drawn on this Canvas but not any background color or image."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"DrawCircle",
          "@kind":"command",
          "@name":"Canvas-DrawCircle",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"r"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"x/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"y/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"r/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"x/number"
              },
              {
                "@key":"socket-allow-5",
                "@value":"y/number"
              },
              {
                "@key":"socket-allow-6",
                "@value":"r/number"
              }
            ]
          },
          "description":{
            "text":"Draws a circle (filled in) at the given coordinates on the canvas, with the given radius."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"DrawCircle",
          "@kind":"command",
          "@name":"Type-Canvas-DrawCircle",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"r"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"x/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"y/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"r/value"
              },
              {
                "@key":"socket-allow-6",
                "@value":"x/number"
              },
              {
                "@key":"socket-allow-7",
                "@value":"y/number"
              },
              {
                "@key":"socket-allow-8",
                "@value":"r/number"
              }
            ]
          },
          "description":{
            "text":"Draws a circle (filled in) at the given coordinates on the canvas, with the given radius."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"DrawLine",
          "@kind":"command",
          "@name":"Canvas-DrawLine",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x1"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y1"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x2"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y2"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"x1/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"y1/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"x2/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"y2/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"x1/number"
              },
              {
                "@key":"socket-allow-6",
                "@value":"y1/number"
              },
              {
                "@key":"socket-allow-7",
                "@value":"x2/number"
              },
              {
                "@key":"socket-allow-8",
                "@value":"y2/number"
              }
            ]
          },
          "description":{
            "text":"Draws a line between the given coordinates on the canvas."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"DrawLine",
          "@kind":"command",
          "@name":"Type-Canvas-DrawLine",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x1"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y1"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x2"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y2"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"x1/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"y1/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"x2/value"
              },
              {
                "@key":"socket-allow-6",
                "@value":"y2/value"
              },
              {
                "@key":"socket-allow-7",
                "@value":"x1/number"
              },
              {
                "@key":"socket-allow-8",
                "@value":"y1/number"
              },
              {
                "@key":"socket-allow-9",
                "@value":"x2/number"
              },
              {
                "@key":"socket-allow-10",
                "@value":"y2/number"
              }
            ]
          },
          "description":{
            "text":"Draws a line between the given coordinates on the canvas."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"DrawPoint",
          "@kind":"command",
          "@name":"Canvas-DrawPoint",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"x/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"y/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"x/number"
              },
              {
                "@key":"socket-allow-4",
                "@value":"y/number"
              }
            ]
          },
          "description":{
            "text":"Draws a point at the given coordinates on the canvas."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"DrawPoint",
          "@kind":"command",
          "@name":"Type-Canvas-DrawPoint",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"x/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"y/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"x/number"
              },
              {
                "@key":"socket-allow-6",
                "@value":"y/number"
              }
            ]
          },
          "description":{
            "text":"Draws a point at the given coordinates on the canvas."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"DrawText",
          "@kind":"command",
          "@name":"Canvas-DrawText",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"text/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"x/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"y/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"text/text"
              },
              {
                "@key":"socket-allow-5",
                "@value":"x/number"
              },
              {
                "@key":"socket-allow-6",
                "@value":"y/number"
              }
            ]
          },
          "description":{
            "text":"Draws the specified text relative to the specified coordinates using the values of the FontSize and TextAlignment properties."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"DrawText",
          "@kind":"command",
          "@name":"Type-Canvas-DrawText",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"text/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"x/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"y/value"
              },
              {
                "@key":"socket-allow-6",
                "@value":"text/text"
              },
              {
                "@key":"socket-allow-7",
                "@value":"x/number"
              },
              {
                "@key":"socket-allow-8",
                "@value":"y/number"
              }
            ]
          },
          "description":{
            "text":"Draws the specified text relative to the specified coordinates using the values of the FontSize and TextAlignment properties."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"DrawTextAtAngle",
          "@kind":"command",
          "@name":"Canvas-DrawTextAtAngle",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"angle"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"text/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"x/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"y/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"angle/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"text/text"
              },
              {
                "@key":"socket-allow-6",
                "@value":"x/number"
              },
              {
                "@key":"socket-allow-7",
                "@value":"y/number"
              },
              {
                "@key":"socket-allow-8",
                "@value":"angle/number"
              }
            ]
          },
          "description":{
            "text":"Draws the specified text starting at the specified coordinates at the specified angle using the values of the FontSize and TextAlignment properties."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"DrawTextAtAngle",
          "@kind":"command",
          "@name":"Type-Canvas-DrawTextAtAngle",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"angle"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"text/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"x/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"y/value"
              },
              {
                "@key":"socket-allow-6",
                "@value":"angle/value"
              },
              {
                "@key":"socket-allow-7",
                "@value":"text/text"
              },
              {
                "@key":"socket-allow-8",
                "@value":"x/number"
              },
              {
                "@key":"socket-allow-9",
                "@value":"y/number"
              },
              {
                "@key":"socket-allow-10",
                "@value":"angle/number"
              }
            ]
          },
          "description":{
            "text":"Draws the specified text starting at the specified coordinates at the specified angle using the values of the FontSize and TextAlignment properties."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetBackgroundPixelColor",
          "@kind":"function",
          "@name":"Canvas-GetBackgroundPixelColor",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"x/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"y/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"x/number"
              },
              {
                "@key":"socket-allow-4",
                "@value":"y/number"
              }
            ]
          },
          "description":{
            "text":"Gets the color of the specified point. This includes the background and any drawn points, lines, or circles but not sprites."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetBackgroundPixelColor",
          "@kind":"function",
          "@name":"Type-Canvas-GetBackgroundPixelColor",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"x/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"y/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"x/number"
              },
              {
                "@key":"socket-allow-6",
                "@value":"y/number"
              }
            ]
          },
          "description":{
            "text":"Gets the color of the specified point. This includes the background and any drawn points, lines, or circles but not sprites."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetPixelColor",
          "@kind":"function",
          "@name":"Canvas-GetPixelColor",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"x/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"y/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"x/number"
              },
              {
                "@key":"socket-allow-4",
                "@value":"y/number"
              }
            ]
          },
          "description":{
            "text":"Gets the color of the specified point."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetPixelColor",
          "@kind":"function",
          "@name":"Type-Canvas-GetPixelColor",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"x/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"y/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"x/number"
              },
              {
                "@key":"socket-allow-6",
                "@value":"y/number"
              }
            ]
          },
          "description":{
            "text":"Gets the color of the specified point."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Save",
          "@kind":"function",
          "@name":"Canvas-Save",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              }
            ]
          },
          "description":{
            "text":"Saves a picture of this Canvas to the device's external storage. If an error occurs, the Screen's ErrorOccurred event will be called."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Save",
          "@kind":"function",
          "@name":"Type-Canvas-Save",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Saves a picture of this Canvas to the device's external storage. If an error occurs, the Screen's ErrorOccurred event will be called."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SaveAs",
          "@kind":"function",
          "@name":"Canvas-SaveAs",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"fileName"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"fileName/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"fileName/text"
              }
            ]
          },
          "description":{
            "text":"Saves a picture of this Canvas to the device's external storage in the file named fileName. fileName must end with one of \".jpg\", \".jpeg\", or \".png\" (which determines the file type: JPEG, or PNG)."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SaveAs",
          "@kind":"function",
          "@name":"Type-Canvas-SaveAs",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"fileName"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"fileName/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"fileName/text"
              }
            ]
          },
          "description":{
            "text":"Saves a picture of this Canvas to the device's external storage in the file named fileName. fileName must end with one of \".jpg\", \".jpeg\", or \".png\" (which determines the file type: JPEG, or PNG)."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SetBackgroundPixelColor",
          "@kind":"command",
          "@name":"Canvas-SetBackgroundPixelColor",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"color"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"x/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"y/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"color/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"x/number"
              },
              {
                "@key":"socket-allow-5",
                "@value":"y/number"
              },
              {
                "@key":"socket-allow-6",
                "@value":"color/number"
              }
            ]
          },
          "description":{
            "text":"Sets the color of the specified point. This differs from DrawPoint by having an argument for color."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SetBackgroundPixelColor",
          "@kind":"command",
          "@name":"Type-Canvas-SetBackgroundPixelColor",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"color"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"x/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"y/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"color/value"
              },
              {
                "@key":"socket-allow-6",
                "@value":"x/number"
              },
              {
                "@key":"socket-allow-7",
                "@value":"y/number"
              },
              {
                "@key":"socket-allow-8",
                "@value":"color/number"
              }
            ]
          },
          "description":{
            "text":"Sets the color of the specified point. This differs from DrawPoint by having an argument for color."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"CheckBox",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"CheckBox",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"2"
              },
              {
                "@key":"ya-event-1",
                "@value":"CheckBox-Changed"
              },
              {
                "@key":"ya-event-2",
                "@value":"CheckBox-GotFocus"
              },
              {
                "@key":"ya-event-3",
                "@value":"CheckBox-LostFocus"
              },
              {
                "@key":"ya-prop-1",
                "@value":"BackgroundColor/read-write-property/number/"
              },
              {
                "@key":"ya-prop-2",
                "@value":"Checked/read-write-property/boolean/"
              },
              {
                "@key":"ya-prop-3",
                "@value":"Column/invisible-property/number/"
              },
              {
                "@key":"ya-prop-4",
                "@value":"Enabled/read-write-property/boolean/"
              },
              {
                "@key":"ya-prop-5",
                "@value":"FontBold/invisible-property/boolean/"
              },
              {
                "@key":"ya-prop-6",
                "@value":"FontItalic/invisible-property/boolean/"
              },
              {
                "@key":"ya-prop-7",
                "@value":"FontSize/read-write-property/number/"
              },
              {
                "@key":"ya-prop-8",
                "@value":"FontTypeface/invisible-property/number/"
              },
              {
                "@key":"ya-prop-9",
                "@value":"Height/read-write-property/number/"
              },
              {
                "@key":"ya-prop-10",
                "@value":"Row/invisible-property/number/"
              },
              {
                "@key":"ya-prop-11",
                "@value":"Text/read-write-property/text/"
              },
              {
                "@key":"ya-prop-12",
                "@value":"TextColor/read-write-property/number/"
              },
              {
                "@key":"ya-prop-13",
                "@value":"Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."
              },
              {
                "@key":"ya-prop-14",
                "@value":"Width/read-write-property/number/"
              }
            ]
          },
          "description":{
            "text":"Checkbox that raises an event when the user clicks on it. There are many properties affecting its appearance that can be set in the Designer or Blocks Editor."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"Changed",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"CheckBox-Changed",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Default Changed event handler."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"GotFocus",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"CheckBox-GotFocus",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Default GotFocus event handler."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"LostFocus",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"CheckBox-LostFocus",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Default LostFocus event handler."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"Clock",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"Clock",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"1"
              },
              {
                "@key":"ya-event-1",
                "@value":"Clock-Timer"
              },
              {
                "@key":"ya-prop-1",
                "@value":"TimerAlwaysFires/read-write-property/boolean/"
              },
              {
                "@key":"ya-prop-2",
                "@value":"TimerEnabled/read-write-property/boolean/"
              },
              {
                "@key":"ya-prop-3",
                "@value":"TimerInterval/read-write-property/number/"
              },
              {
                "@key":"ya-method-1",
                "@value":"Clock-AddDays"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-Clock-AddDays"
              },
              {
                "@key":"ya-method-2",
                "@value":"Clock-AddHours"
              },
              {
                "@key":"ya-type-method-2",
                "@value":"Type-Clock-AddHours"
              },
              {
                "@key":"ya-method-3",
                "@value":"Clock-AddMinutes"
              },
              {
                "@key":"ya-type-method-3",
                "@value":"Type-Clock-AddMinutes"
              },
              {
                "@key":"ya-method-4",
                "@value":"Clock-AddMonths"
              },
              {
                "@key":"ya-type-method-4",
                "@value":"Type-Clock-AddMonths"
              },
              {
                "@key":"ya-method-5",
                "@value":"Clock-AddSeconds"
              },
              {
                "@key":"ya-type-method-5",
                "@value":"Type-Clock-AddSeconds"
              },
              {
                "@key":"ya-method-6",
                "@value":"Clock-AddWeeks"
              },
              {
                "@key":"ya-type-method-6",
                "@value":"Type-Clock-AddWeeks"
              },
              {
                "@key":"ya-method-7",
                "@value":"Clock-AddYears"
              },
              {
                "@key":"ya-type-method-7",
                "@value":"Type-Clock-AddYears"
              },
              {
                "@key":"ya-method-8",
                "@value":"Clock-DayOfMonth"
              },
              {
                "@key":"ya-type-method-8",
                "@value":"Type-Clock-DayOfMonth"
              },
              {
                "@key":"ya-method-9",
                "@value":"Clock-Duration"
              },
              {
                "@key":"ya-type-method-9",
                "@value":"Type-Clock-Duration"
              },
              {
                "@key":"ya-method-10",
                "@value":"Clock-FormatDate"
              },
              {
                "@key":"ya-type-method-10",
                "@value":"Type-Clock-FormatDate"
              },
              {
                "@key":"ya-method-11",
                "@value":"Clock-FormatDateTime"
              },
              {
                "@key":"ya-type-method-11",
                "@value":"Type-Clock-FormatDateTime"
              },
              {
                "@key":"ya-method-12",
                "@value":"Clock-FormatTime"
              },
              {
                "@key":"ya-type-method-12",
                "@value":"Type-Clock-FormatTime"
              },
              {
                "@key":"ya-method-13",
                "@value":"Clock-GetMillis"
              },
              {
                "@key":"ya-type-method-13",
                "@value":"Type-Clock-GetMillis"
              },
              {
                "@key":"ya-method-14",
                "@value":"Clock-Hour"
              },
              {
                "@key":"ya-type-method-14",
                "@value":"Type-Clock-Hour"
              },
              {
                "@key":"ya-method-15",
                "@value":"Clock-MakeInstant"
              },
              {
                "@key":"ya-type-method-15",
                "@value":"Type-Clock-MakeInstant"
              },
              {
                "@key":"ya-method-16",
                "@value":"Clock-MakeInstantFromMillis"
              },
              {
                "@key":"ya-type-method-16",
                "@value":"Type-Clock-MakeInstantFromMillis"
              },
              {
                "@key":"ya-method-17",
                "@value":"Clock-Minute"
              },
              {
                "@key":"ya-type-method-17",
                "@value":"Type-Clock-Minute"
              },
              {
                "@key":"ya-method-18",
                "@value":"Clock-Month"
              },
              {
                "@key":"ya-type-method-18",
                "@value":"Type-Clock-Month"
              },
              {
                "@key":"ya-method-19",
                "@value":"Clock-MonthName"
              },
              {
                "@key":"ya-type-method-19",
                "@value":"Type-Clock-MonthName"
              },
              {
                "@key":"ya-method-20",
                "@value":"Clock-Now"
              },
              {
                "@key":"ya-type-method-20",
                "@value":"Type-Clock-Now"
              },
              {
                "@key":"ya-method-21",
                "@value":"Clock-Second"
              },
              {
                "@key":"ya-type-method-21",
                "@value":"Type-Clock-Second"
              },
              {
                "@key":"ya-method-22",
                "@value":"Clock-SystemTime"
              },
              {
                "@key":"ya-type-method-22",
                "@value":"Type-Clock-SystemTime"
              },
              {
                "@key":"ya-method-23",
                "@value":"Clock-Weekday"
              },
              {
                "@key":"ya-type-method-23",
                "@value":"Type-Clock-Weekday"
              },
              {
                "@key":"ya-method-24",
                "@value":"Clock-WeekdayName"
              },
              {
                "@key":"ya-type-method-24",
                "@value":"Type-Clock-WeekdayName"
              },
              {
                "@key":"ya-method-25",
                "@value":"Clock-Year"
              },
              {
                "@key":"ya-type-method-25",
                "@value":"Type-Clock-Year"
              }
            ]
          },
          "description":{
            "text":"Non-visible component that provides the phone's clock, a timer, and time calculations."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"Timer",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Clock-Timer",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Timer has gone off."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"AddDays",
          "@kind":"function",
          "@name":"Clock-AddDays",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"days"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"InstantInTime"
              },
              {
                "@key":"socket-allow-1",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"days/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"instant/InstantInTime"
              },
              {
                "@key":"socket-allow-4",
                "@value":"days/number"
              }
            ]
          },
          "description":{
            "text":"An instant in time some days after the argument"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"AddDays",
          "@kind":"function",
          "@name":"Type-Clock-AddDays",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"days"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"InstantInTime"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"days/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"instant/InstantInTime"
              },
              {
                "@key":"socket-allow-6",
                "@value":"days/number"
              }
            ]
          },
          "description":{
            "text":"An instant in time some days after the argument"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"AddHours",
          "@kind":"function",
          "@name":"Clock-AddHours",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"hours"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"InstantInTime"
              },
              {
                "@key":"socket-allow-1",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"hours/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"instant/InstantInTime"
              },
              {
                "@key":"socket-allow-4",
                "@value":"hours/number"
              }
            ]
          },
          "description":{
            "text":"An instant in time some hours after the argument"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"AddHours",
          "@kind":"function",
          "@name":"Type-Clock-AddHours",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"hours"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"InstantInTime"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"hours/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"instant/InstantInTime"
              },
              {
                "@key":"socket-allow-6",
                "@value":"hours/number"
              }
            ]
          },
          "description":{
            "text":"An instant in time some hours after the argument"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"AddMinutes",
          "@kind":"function",
          "@name":"Clock-AddMinutes",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"minutes"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"InstantInTime"
              },
              {
                "@key":"socket-allow-1",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"minutes/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"instant/InstantInTime"
              },
              {
                "@key":"socket-allow-4",
                "@value":"minutes/number"
              }
            ]
          },
          "description":{
            "text":"An instant in time some minutes after the argument"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"AddMinutes",
          "@kind":"function",
          "@name":"Type-Clock-AddMinutes",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"minutes"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"InstantInTime"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"minutes/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"instant/InstantInTime"
              },
              {
                "@key":"socket-allow-6",
                "@value":"minutes/number"
              }
            ]
          },
          "description":{
            "text":"An instant in time some minutes after the argument"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"AddMonths",
          "@kind":"function",
          "@name":"Clock-AddMonths",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"months"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"InstantInTime"
              },
              {
                "@key":"socket-allow-1",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"months/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"instant/InstantInTime"
              },
              {
                "@key":"socket-allow-4",
                "@value":"months/number"
              }
            ]
          },
          "description":{
            "text":"An instant in time some months after the argument"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"AddMonths",
          "@kind":"function",
          "@name":"Type-Clock-AddMonths",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"months"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"InstantInTime"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"months/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"instant/InstantInTime"
              },
              {
                "@key":"socket-allow-6",
                "@value":"months/number"
              }
            ]
          },
          "description":{
            "text":"An instant in time some months after the argument"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"AddSeconds",
          "@kind":"function",
          "@name":"Clock-AddSeconds",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"seconds"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"InstantInTime"
              },
              {
                "@key":"socket-allow-1",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"seconds/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"instant/InstantInTime"
              },
              {
                "@key":"socket-allow-4",
                "@value":"seconds/number"
              }
            ]
          },
          "description":{
            "text":"An instant in time some seconds after the argument"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"AddSeconds",
          "@kind":"function",
          "@name":"Type-Clock-AddSeconds",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"seconds"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"InstantInTime"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"seconds/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"instant/InstantInTime"
              },
              {
                "@key":"socket-allow-6",
                "@value":"seconds/number"
              }
            ]
          },
          "description":{
            "text":"An instant in time some seconds after the argument"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"AddWeeks",
          "@kind":"function",
          "@name":"Clock-AddWeeks",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"weeks"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"InstantInTime"
              },
              {
                "@key":"socket-allow-1",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"weeks/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"instant/InstantInTime"
              },
              {
                "@key":"socket-allow-4",
                "@value":"weeks/number"
              }
            ]
          },
          "description":{
            "text":"An instant in time some weeks after the argument"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"AddWeeks",
          "@kind":"function",
          "@name":"Type-Clock-AddWeeks",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"weeks"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"InstantInTime"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"weeks/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"instant/InstantInTime"
              },
              {
                "@key":"socket-allow-6",
                "@value":"weeks/number"
              }
            ]
          },
          "description":{
            "text":"An instant in time some weeks after the argument"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"AddYears",
          "@kind":"function",
          "@name":"Clock-AddYears",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"years"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"InstantInTime"
              },
              {
                "@key":"socket-allow-1",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"years/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"instant/InstantInTime"
              },
              {
                "@key":"socket-allow-4",
                "@value":"years/number"
              }
            ]
          },
          "description":{
            "text":"An instant in time some years after the argument"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"AddYears",
          "@kind":"function",
          "@name":"Type-Clock-AddYears",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"years"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"InstantInTime"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"years/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"instant/InstantInTime"
              },
              {
                "@key":"socket-allow-6",
                "@value":"years/number"
              }
            ]
          },
          "description":{
            "text":"An instant in time some years after the argument"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"DayOfMonth",
          "@kind":"function",
          "@name":"Clock-DayOfMonth",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"instant/InstantInTime"
              }
            ]
          },
          "description":{
            "text":"The day of the month"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"DayOfMonth",
          "@kind":"function",
          "@name":"Type-Clock-DayOfMonth",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"instant/InstantInTime"
              }
            ]
          },
          "description":{
            "text":"The day of the month"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Duration",
          "@kind":"function",
          "@name":"Clock-Duration",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"start"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"end"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"start/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"end/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"start/InstantInTime"
              },
              {
                "@key":"socket-allow-4",
                "@value":"end/InstantInTime"
              }
            ]
          },
          "description":{
            "text":"Milliseconds between instants"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Duration",
          "@kind":"function",
          "@name":"Type-Clock-Duration",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"start"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"end"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"start/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"end/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"start/InstantInTime"
              },
              {
                "@key":"socket-allow-6",
                "@value":"end/InstantInTime"
              }
            ]
          },
          "description":{
            "text":"Milliseconds between instants"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"FormatDate",
          "@kind":"function",
          "@name":"Clock-FormatDate",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"instant/InstantInTime"
              }
            ]
          },
          "description":{
            "text":"Text describing the date of an instant"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"FormatDate",
          "@kind":"function",
          "@name":"Type-Clock-FormatDate",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"instant/InstantInTime"
              }
            ]
          },
          "description":{
            "text":"Text describing the date of an instant"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"FormatDateTime",
          "@kind":"function",
          "@name":"Clock-FormatDateTime",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"instant/InstantInTime"
              }
            ]
          },
          "description":{
            "text":"Text describing the date and time of an instant"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"FormatDateTime",
          "@kind":"function",
          "@name":"Type-Clock-FormatDateTime",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"instant/InstantInTime"
              }
            ]
          },
          "description":{
            "text":"Text describing the date and time of an instant"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"FormatTime",
          "@kind":"function",
          "@name":"Clock-FormatTime",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"instant/InstantInTime"
              }
            ]
          },
          "description":{
            "text":"Text describing time time of an instant"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"FormatTime",
          "@kind":"function",
          "@name":"Type-Clock-FormatTime",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"instant/InstantInTime"
              }
            ]
          },
          "description":{
            "text":"Text describing time time of an instant"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetMillis",
          "@kind":"function",
          "@name":"Clock-GetMillis",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"instant/InstantInTime"
              }
            ]
          },
          "description":{
            "text":"The instant in time measured as milliseconds since 1970."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetMillis",
          "@kind":"function",
          "@name":"Type-Clock-GetMillis",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"instant/InstantInTime"
              }
            ]
          },
          "description":{
            "text":"The instant in time measured as milliseconds since 1970."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Hour",
          "@kind":"function",
          "@name":"Clock-Hour",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"instant/InstantInTime"
              }
            ]
          },
          "description":{
            "text":"The hour of the day"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Hour",
          "@kind":"function",
          "@name":"Type-Clock-Hour",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"instant/InstantInTime"
              }
            ]
          },
          "description":{
            "text":"The hour of the day"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"MakeInstant",
          "@kind":"function",
          "@name":"Clock-MakeInstant",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"from"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"InstantInTime"
              },
              {
                "@key":"socket-allow-1",
                "@value":"from/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"from/text"
              }
            ]
          },
          "description":{
            "text":"An instant specified by MM/DD/YYYY hh:mm:ss or MM/DD/YYYY or hh:mm"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"MakeInstant",
          "@kind":"function",
          "@name":"Type-Clock-MakeInstant",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"from"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"InstantInTime"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"from/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"from/text"
              }
            ]
          },
          "description":{
            "text":"An instant specified by MM/DD/YYYY hh:mm:ss or MM/DD/YYYY or hh:mm"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"MakeInstantFromMillis",
          "@kind":"function",
          "@name":"Clock-MakeInstantFromMillis",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"millis"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"InstantInTime"
              },
              {
                "@key":"socket-allow-1",
                "@value":"millis/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"millis/number"
              }
            ]
          },
          "description":{
            "text":"An instant in time specified by the milliseconds since 1970."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"MakeInstantFromMillis",
          "@kind":"function",
          "@name":"Type-Clock-MakeInstantFromMillis",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"millis"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"InstantInTime"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"millis/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"millis/number"
              }
            ]
          },
          "description":{
            "text":"An instant in time specified by the milliseconds since 1970."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Minute",
          "@kind":"function",
          "@name":"Clock-Minute",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"instant/InstantInTime"
              }
            ]
          },
          "description":{
            "text":"The minute of the hour"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Minute",
          "@kind":"function",
          "@name":"Type-Clock-Minute",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"instant/InstantInTime"
              }
            ]
          },
          "description":{
            "text":"The minute of the hour"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Month",
          "@kind":"function",
          "@name":"Clock-Month",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"instant/InstantInTime"
              }
            ]
          },
          "description":{
            "text":"The month of the year, a number from 1 to 12)"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Month",
          "@kind":"function",
          "@name":"Type-Clock-Month",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"instant/InstantInTime"
              }
            ]
          },
          "description":{
            "text":"The month of the year, a number from 1 to 12)"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"MonthName",
          "@kind":"function",
          "@name":"Clock-MonthName",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"instant/InstantInTime"
              }
            ]
          },
          "description":{
            "text":"The name of the month"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"MonthName",
          "@kind":"function",
          "@name":"Type-Clock-MonthName",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"instant/InstantInTime"
              }
            ]
          },
          "description":{
            "text":"The name of the month"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Now",
          "@kind":"function",
          "@name":"Clock-Now",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"InstantInTime"
              }
            ]
          },
          "description":{
            "text":"The instant in time read from phone's clock"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Now",
          "@kind":"function",
          "@name":"Type-Clock-Now",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"InstantInTime"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"The instant in time read from phone's clock"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Second",
          "@kind":"function",
          "@name":"Clock-Second",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"instant/InstantInTime"
              }
            ]
          },
          "description":{
            "text":"The second of the minute"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Second",
          "@kind":"function",
          "@name":"Type-Clock-Second",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"instant/InstantInTime"
              }
            ]
          },
          "description":{
            "text":"The second of the minute"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SystemTime",
          "@kind":"function",
          "@name":"Clock-SystemTime",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"The phone's internal time"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SystemTime",
          "@kind":"function",
          "@name":"Type-Clock-SystemTime",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"The phone's internal time"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Weekday",
          "@kind":"function",
          "@name":"Clock-Weekday",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"instant/InstantInTime"
              }
            ]
          },
          "description":{
            "text":"The day of the week. a number from 1 (Sunday) to 7 (Saturday)"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Weekday",
          "@kind":"function",
          "@name":"Type-Clock-Weekday",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"instant/InstantInTime"
              }
            ]
          },
          "description":{
            "text":"The day of the week. a number from 1 (Sunday) to 7 (Saturday)"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"WeekdayName",
          "@kind":"function",
          "@name":"Clock-WeekdayName",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"instant/InstantInTime"
              }
            ]
          },
          "description":{
            "text":"The name of the day of the week"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"WeekdayName",
          "@kind":"function",
          "@name":"Type-Clock-WeekdayName",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"instant/InstantInTime"
              }
            ]
          },
          "description":{
            "text":"The name of the day of the week"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Year",
          "@kind":"function",
          "@name":"Clock-Year",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"instant/InstantInTime"
              }
            ]
          },
          "description":{
            "text":"The year"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Year",
          "@kind":"function",
          "@name":"Type-Clock-Year",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instant"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"instant/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"instant/InstantInTime"
              }
            ]
          },
          "description":{
            "text":"The year"
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"ContactPicker",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"ContactPicker",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"4"
              },
              {
                "@key":"ya-event-1",
                "@value":"ContactPicker-AfterPicking"
              },
              {
                "@key":"ya-event-2",
                "@value":"ContactPicker-BeforePicking"
              },
              {
                "@key":"ya-event-3",
                "@value":"ContactPicker-GotFocus"
              },
              {
                "@key":"ya-event-4",
                "@value":"ContactPicker-LostFocus"
              },
              {
                "@key":"ya-prop-1",
                "@value":"BackgroundColor/read-write-property/number/Returns the button's background color"
              },
              {
                "@key":"ya-prop-2",
                "@value":"Column/invisible-property/number/"
              },
              {
                "@key":"ya-prop-3",
                "@value":"ContactName/read-only-property/text/"
              },
              {
                "@key":"ya-prop-4",
                "@value":"EmailAddress/read-only-property/text/"
              },
              {
                "@key":"ya-prop-5",
                "@value":"Enabled/read-write-property/boolean/"
              },
              {
                "@key":"ya-prop-6",
                "@value":"FontBold/invisible-property/boolean/"
              },
              {
                "@key":"ya-prop-7",
                "@value":"FontItalic/invisible-property/boolean/"
              },
              {
                "@key":"ya-prop-8",
                "@value":"FontSize/invisible-property/number/"
              },
              {
                "@key":"ya-prop-9",
                "@value":"FontTypeface/invisible-property/number/"
              },
              {
                "@key":"ya-prop-10",
                "@value":"Height/read-write-property/number/"
              },
              {
                "@key":"ya-prop-11",
                "@value":"Image/read-write-property/text/Specifies the path of the button's image. If there is both an Image and a BackgroundColor, only the Image will be visible."
              },
              {
                "@key":"ya-prop-12",
                "@value":"Picture/read-only-property/text/"
              },
              {
                "@key":"ya-prop-13",
                "@value":"Row/invisible-property/number/"
              },
              {
                "@key":"ya-prop-14",
                "@value":"Shape/invisible-property/number/Specifies the button's shape (default, rounded, rectangular, oval). The shape will not be visible if an Image is being displayed."
              },
              {
                "@key":"ya-prop-15",
                "@value":"ShowFeedback/read-write-property/boolean/Specifies if a visual feedback should be shown for a button that as an image as background."
              },
              {
                "@key":"ya-prop-16",
                "@value":"Text/read-write-property/text/"
              },
              {
                "@key":"ya-prop-17",
                "@value":"TextAlignment/invisible-property/number/"
              },
              {
                "@key":"ya-prop-18",
                "@value":"TextColor/read-write-property/number/"
              },
              {
                "@key":"ya-prop-19",
                "@value":"Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."
              },
              {
                "@key":"ya-prop-20",
                "@value":"Width/read-write-property/number/"
              },
              {
                "@key":"ya-method-1",
                "@value":"ContactPicker-Open"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-ContactPicker-Open"
              }
            ]
          },
          "description":{
            "text":"A button that, when clicked on, displays a list of the contacts to choose among. After the user has made a selection, the following properties will be set to information about the chosen contact: - ContactName: the contact's name - EmailAddress: the contact's primary email address - Picture: the name of the file containing the contact's image, which can be used as a Picture property value for the Image or ImageSprite component. Other properties affect the appearance of the button (TextAlignment, BackgroundColor, etc.) and whether it can be clicked on (Enabled). Picking is not supported on all phones. If it fails, this component will show a notification. The error behavior can be overridden with the Screen.ErrorOccurred event handler."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"AfterPicking",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"ContactPicker-AfterPicking",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Simple event to be raised after the picker activity returns its result and the properties have been filled in."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"BeforePicking",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"ContactPicker-BeforePicking",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Simple event to raise when the component is clicked but before the picker activity is started."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"GotFocus",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"ContactPicker-GotFocus",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Indicates the cursor moved over the button so it is now possible to click it."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"LostFocus",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"ContactPicker-LostFocus",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Indicates the cursor moved away from the button so it is now no longer possible to click it."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Open",
          "@kind":"command",
          "@name":"ContactPicker-Open",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Opens the picker, as though the user clicked on it."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Open",
          "@kind":"command",
          "@name":"Type-ContactPicker-Open",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Opens the picker, as though the user clicked on it."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"EmailPicker",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"EmailPicker",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"2"
              },
              {
                "@key":"ya-event-1",
                "@value":"EmailPicker-GotFocus"
              },
              {
                "@key":"ya-event-2",
                "@value":"EmailPicker-LostFocus"
              },
              {
                "@key":"ya-prop-1",
                "@value":"BackgroundColor/read-write-property/number/The background color of the input box. You can choose a color by name in the Designer or in the Blocks Editor. The default background color is 'default' (shaded 3-D look)."
              },
              {
                "@key":"ya-prop-2",
                "@value":"Column/invisible-property/number/"
              },
              {
                "@key":"ya-prop-3",
                "@value":"Enabled/read-write-property/boolean/Whether the user can enter text into this input box. By default, this is true."
              },
              {
                "@key":"ya-prop-4",
                "@value":"FontBold/invisible-property/boolean/Whether the font for the text should be bold. By default, it is not."
              },
              {
                "@key":"ya-prop-5",
                "@value":"FontItalic/invisible-property/boolean/Whether the text should appear in italics. By default, it does not."
              },
              {
                "@key":"ya-prop-6",
                "@value":"FontSize/read-write-property/number/The font size for the text. By default, it is 14.0 points."
              },
              {
                "@key":"ya-prop-7",
                "@value":"FontTypeface/invisible-property/number/The font for the text. The value can be changed in the Designer."
              },
              {
                "@key":"ya-prop-8",
                "@value":"Height/read-write-property/number/"
              },
              {
                "@key":"ya-prop-9",
                "@value":"Hint/read-write-property/text/Text that should appear faintly in the input box to provide a hint as to what the user should enter. This can only be seen if the Text property is empty."
              },
              {
                "@key":"ya-prop-10",
                "@value":"Row/invisible-property/number/"
              },
              {
                "@key":"ya-prop-11",
                "@value":"Text/read-write-property/text/The text in the input box, which can be set by the programmer in the Designer or Blocks Editor, or it can be entered by the user (unless the Enabled property is false)."
              },
              {
                "@key":"ya-prop-12",
                "@value":"TextAlignment/invisible-property/number/Whether the text should be left justified, centered, or right justified. By default, text is left justified."
              },
              {
                "@key":"ya-prop-13",
                "@value":"TextColor/read-write-property/number/The color for the text. You can choose a color by name in the Designer or in the Blocks Editor. The default text color is black."
              },
              {
                "@key":"ya-prop-14",
                "@value":"Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."
              },
              {
                "@key":"ya-prop-15",
                "@value":"Width/read-write-property/number/"
              }
            ]
          },
          "description":{
            "text":"A text box in which a user can begin entering an email address of a contact and be offered auto-completion. The initial value of the box and the value after user entry is in the Text property. If the Text property is initially empty, the contents of the Hint property will be faintly shown in the text box as a hint to the user. Other properties affect the appearance of the text box (TextAlignment, BackgroundColor, etc.) and whether it can be used (Enabled). Text boxes are usually used with the Button component, with the user clicking on the button when text entry is complete."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"GotFocus",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"EmailPicker-GotFocus",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Event raised when this component is selected for input, such as by the user touching it."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"LostFocus",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"EmailPicker-LostFocus",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Event raised when this component is no longer selected for input, such as if the user touches a different text box."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"Screen",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"Screen",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"10"
              },
              {
                "@key":"ya-event-1",
                "@value":"Screen-BackPressed"
              },
              {
                "@key":"ya-event-2",
                "@value":"Screen-ErrorOccurred"
              },
              {
                "@key":"ya-event-3",
                "@value":"Screen-Initialize"
              },
              {
                "@key":"ya-event-4",
                "@value":"Screen-OtherScreenClosed"
              },
              {
                "@key":"ya-event-5",
                "@value":"Screen-ScreenOrientationChanged"
              },
              {
                "@key":"ya-prop-1",
                "@value":"AlignHorizontal/read-write-property/number/A number that encodes how contents of the screen are aligned horizontally. The choices are: 1 = left aligned, 2 = horizontally centered, 3 = right aligned."
              },
              {
                "@key":"ya-prop-2",
                "@value":"AlignVertical/read-write-property/number/A number that encodes how the contents of the arrangement are aligned vertically. The choices are: 1 = aligned at the top, 2 = vertically centered, 3 = aligned at the bottom. Vertical alignment has no effect if the screen is scrollable."
              },
              {
                "@key":"ya-prop-3",
                "@value":"BackgroundColor/read-write-property/number/"
              },
              {
                "@key":"ya-prop-4",
                "@value":"BackgroundImage/read-write-property/text/The screen background image."
              },
              {
                "@key":"ya-prop-5",
                "@value":"Height/read-only-property/number/"
              },
              {
                "@key":"ya-prop-6",
                "@value":"Icon/invisible-property/text/"
              },
              {
                "@key":"ya-prop-7",
                "@value":"ScreenOrientation/read-write-property/text/The requested screen orientation. Commonly used values are unspecified (-1), landscape (0), portrait (1), sensor (4), and user (2). See the Android developer docuemntation for ActivityInfo.Screen_Orientation for the complete list of possible settings."
              },
              {
                "@key":"ya-prop-8",
                "@value":"Scrollable/read-write-property/boolean/"
              },
              {
                "@key":"ya-prop-9",
                "@value":"Title/read-write-property/text/"
              },
              {
                "@key":"ya-prop-10",
                "@value":"VersionCode/invisible-property/number/"
              },
              {
                "@key":"ya-prop-11",
                "@value":"VersionName/invisible-property/text/"
              },
              {
                "@key":"ya-prop-12",
                "@value":"Width/read-only-property/number/"
              },
              {
                "@key":"ya-method-1",
                "@value":"Screen-CloseScreenAnimation"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-Screen-CloseScreenAnimation"
              },
              {
                "@key":"ya-method-2",
                "@value":"Screen-OpenScreenAnimation"
              },
              {
                "@key":"ya-type-method-2",
                "@value":"Type-Screen-OpenScreenAnimation"
              }
            ]
          },
          "description":{
            "text":"Top-level component containing all other components in the program"
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"BackPressed",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Screen-BackPressed",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Device back button pressed."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"ErrorOccurred",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Screen-ErrorOccurred",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"component"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"functionName",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"functionName"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"errorNumber",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"errorNumber"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"message",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"message"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"functionName/argument"
              },
              {
                "@key":"socket-allow-3",
                "@value":"errorNumber/argument"
              },
              {
                "@key":"socket-allow-4",
                "@value":"message/argument"
              }
            ]
          },
          "description":{
            "text":"Event raised when an error occurs. Only some errors will raise this condition. For those errors, the system will show a notification by default. You can use this event handler to prescribe an error behavior different than the default."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"Initialize",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Screen-Initialize",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Screen starting"
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"OtherScreenClosed",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Screen-OtherScreenClosed",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"otherScreenName",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"otherScreenName"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"result",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"result"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"otherScreenName/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"result/argument"
              }
            ]
          },
          "description":{
            "text":"Event raised when another screen has closed and control has returned to this screen."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"ScreenOrientationChanged",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Screen-ScreenOrientationChanged",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Screen orientation changed"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"CloseScreenAnimation",
          "@kind":"command",
          "@name":"Screen-CloseScreenAnimation",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"animType"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"animType/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"animType/text"
              }
            ]
          },
          "description":{
            "text":"Sets the animation for closing current screen and returning to the previous screen. Valid options are default, fade, zoom, slidehorizontal, slidevertical, and none"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"CloseScreenAnimation",
          "@kind":"command",
          "@name":"Type-Screen-CloseScreenAnimation",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"animType"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"animType/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"animType/text"
              }
            ]
          },
          "description":{
            "text":"Sets the animation for closing current screen and returning to the previous screen. Valid options are default, fade, zoom, slidehorizontal, slidevertical, and none"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"OpenScreenAnimation",
          "@kind":"command",
          "@name":"Screen-OpenScreenAnimation",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"animType"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"animType/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"animType/text"
              }
            ]
          },
          "description":{
            "text":"Sets the animation for switching to another screen. Valid options are default, fade, zoom, slidehorizontal, slidevertical, and none"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"OpenScreenAnimation",
          "@kind":"command",
          "@name":"Type-Screen-OpenScreenAnimation",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"animType"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"animType/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"animType/text"
              }
            ]
          },
          "description":{
            "text":"Sets the animation for switching to another screen. Valid options are default, fade, zoom, slidehorizontal, slidevertical, and none"
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"FusiontablesControl",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"FusiontablesControl",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"2"
              },
              {
                "@key":"ya-event-1",
                "@value":"FusiontablesControl-GotResult"
              },
              {
                "@key":"ya-prop-1",
                "@value":"ApiKey/read-write-property/text/Your Google API Key. For help, click on the questionmark (?) next to the FusiontablesControl component in the Palette."
              },
              {
                "@key":"ya-prop-2",
                "@value":"Query/read-write-property/text/The query to send to the Fusion Tables API. For legal query formats and examples, see the Fusion Tables API v1.0 reference manual. Note that you do not need to worry about UTF-encoding the query. But you do need to make sure it follows the syntax described in the reference manual, which means that things like capitalization for names of columns matters, and that single quotes need to be used around column names if there are spaces in them."
              },
              {
                "@key":"ya-method-1",
                "@value":"FusiontablesControl-DoQuery"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-FusiontablesControl-DoQuery"
              },
              {
                "@key":"ya-method-2",
                "@value":"FusiontablesControl-ForgetLogin"
              },
              {
                "@key":"ya-type-method-2",
                "@value":"Type-FusiontablesControl-ForgetLogin"
              },
              {
                "@key":"ya-method-3",
                "@value":"FusiontablesControl-SendQuery"
              },
              {
                "@key":"ya-type-method-3",
                "@value":"Type-FusiontablesControl-SendQuery"
              }
            ]
          },
          "description":{
            "text":"A non-visible component that communicates with Google Fusion Tables. Fusion Tables let you store, share, query and visualize data tables; this component lets you query, create, and modify these tables. This component uses the Fusion Tables API V1.0. In order to develop apps that use Fusiontables, you must obtain an API Key. To get an API key, follow these instructions. - Go to your Google APIs Console and login if necessary. - Select the Services item from the menu on the left. - Choose the Fusiontables service from the list provided and turn it on. - Go back to the main menu and select the API Access item. Your API Key will be near the bottom of that pane in the section called \"Simple API Access\".You will have to provide that key as the value for the ApiKey property in your Fusiontables app. Once you have an API key, set the value of the Query property to a valid Fusiontables SQL query and call SendQuery to execute the query. App Inventor will send the query to the Fusion Tables server and the GotResult block will fire when a result is returned from the server.Query results will be returned in CSV format, and can be converted to list format using the \"list from csv table\" or \"list from csv row\" blocks. Note that you do not need to worry about UTF-encoding the query. But you do need to make sure the query follows the syntax described in the reference manual, which means that things like capitalization for names of columns matters, and that single quotes must be used around column names if there are spaces in them."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"GotResult",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"FusiontablesControl-GotResult",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"result",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"result"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"result/argument"
              }
            ]
          },
          "description":{
            "text":"Indicates that the Fusion Tables query has finished processing, with a result. The result of the query will generally be returned in CSV format, and can be converted to list format using the \"list from csv table\" or \"list from csv row\" blocks."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"DoQuery",
          "@kind":"command",
          "@name":"FusiontablesControl-DoQuery",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"DEPRECATED. This block will be deprecated by the end of 2012. Use SendQuery."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"DoQuery",
          "@kind":"command",
          "@name":"Type-FusiontablesControl-DoQuery",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"DEPRECATED. This block will be deprecated by the end of 2012. Use SendQuery."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ForgetLogin",
          "@kind":"command",
          "@name":"FusiontablesControl-ForgetLogin",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Method for ForgetLogin"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ForgetLogin",
          "@kind":"command",
          "@name":"Type-FusiontablesControl-ForgetLogin",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Method for ForgetLogin"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SendQuery",
          "@kind":"command",
          "@name":"FusiontablesControl-SendQuery",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Send the query to the Fusiontables server."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SendQuery",
          "@kind":"command",
          "@name":"Type-FusiontablesControl-SendQuery",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Send the query to the Fusiontables server."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"GameClient",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"GameClient",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"1"
              },
              {
                "@key":"ya-event-1",
                "@value":"GameClient-FunctionCompleted"
              },
              {
                "@key":"ya-event-2",
                "@value":"GameClient-GotMessage"
              },
              {
                "@key":"ya-event-3",
                "@value":"GameClient-Info"
              },
              {
                "@key":"ya-event-4",
                "@value":"GameClient-InstanceIdChanged"
              },
              {
                "@key":"ya-event-5",
                "@value":"GameClient-Invited"
              },
              {
                "@key":"ya-event-6",
                "@value":"GameClient-NewInstanceMade"
              },
              {
                "@key":"ya-event-7",
                "@value":"GameClient-NewLeader"
              },
              {
                "@key":"ya-event-8",
                "@value":"GameClient-PlayerJoined"
              },
              {
                "@key":"ya-event-9",
                "@value":"GameClient-PlayerLeft"
              },
              {
                "@key":"ya-event-10",
                "@value":"GameClient-ServerCommandFailure"
              },
              {
                "@key":"ya-event-11",
                "@value":"GameClient-ServerCommandSuccess"
              },
              {
                "@key":"ya-event-12",
                "@value":"GameClient-UserEmailAddressSet"
              },
              {
                "@key":"ya-event-13",
                "@value":"GameClient-WebServiceError"
              },
              {
                "@key":"ya-prop-1",
                "@value":"GameId/read-only-property/text/The game name for this application. The same game ID can have one or more game instances."
              },
              {
                "@key":"ya-prop-2",
                "@value":"InstanceId/read-only-property/text/The game instance id. Taken together,the game ID and the instance ID uniquely identify the game."
              },
              {
                "@key":"ya-prop-3",
                "@value":"InvitedInstances/read-only-property/list/The set of game instances to which this player has been invited but has not yet joined. To ensure current values are returned, first invoke GetInstanceLists."
              },
              {
                "@key":"ya-prop-4",
                "@value":"JoinedInstances/read-only-property/list/The set of game instances in which this player is participating. To ensure current values are returned, first invoke GetInstanceLists."
              },
              {
                "@key":"ya-prop-5",
                "@value":"Leader/read-only-property/text/The game's leader. At any time, each game instance has only one leader, but the leader may change with time. Initially, the leader is the game instance creator. Application writers determine special properties of the leader. The leader value is updated each time a successful communication is made with the server."
              },
              {
                "@key":"ya-prop-6",
                "@value":"Players/read-only-property/list/The current set of players for this game instance. Each player is designated by an email address, which is a string. The list of players is updated each time a successful communication is made with the game server."
              },
              {
                "@key":"ya-prop-7",
                "@value":"PublicInstances/read-only-property/list/The set of game instances that have been marked public. To ensure current values are returned, first invoke {@link #GetInstanceLists}."
              },
              {
                "@key":"ya-prop-8",
                "@value":"ServiceUrl/read-only-property/text/The URL of the game server."
              },
              {
                "@key":"ya-prop-9",
                "@value":"UserEmailAddress/read-write-property/text/The email address that is being used as the player id for this game client. At present, users must set this manually in oder to join a game. But this property will change in the future so that is set automatically, and users will not be able to change it."
              },
              {
                "@key":"ya-method-1",
                "@value":"GameClient-GetInstanceLists"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-GameClient-GetInstanceLists"
              },
              {
                "@key":"ya-method-2",
                "@value":"GameClient-GetMessages"
              },
              {
                "@key":"ya-type-method-2",
                "@value":"Type-GameClient-GetMessages"
              },
              {
                "@key":"ya-method-3",
                "@value":"GameClient-Invite"
              },
              {
                "@key":"ya-type-method-3",
                "@value":"Type-GameClient-Invite"
              },
              {
                "@key":"ya-method-4",
                "@value":"GameClient-LeaveInstance"
              },
              {
                "@key":"ya-type-method-4",
                "@value":"Type-GameClient-LeaveInstance"
              },
              {
                "@key":"ya-method-5",
                "@value":"GameClient-MakeNewInstance"
              },
              {
                "@key":"ya-type-method-5",
                "@value":"Type-GameClient-MakeNewInstance"
              },
              {
                "@key":"ya-method-6",
                "@value":"GameClient-SendMessage"
              },
              {
                "@key":"ya-type-method-6",
                "@value":"Type-GameClient-SendMessage"
              },
              {
                "@key":"ya-method-7",
                "@value":"GameClient-ServerCommand"
              },
              {
                "@key":"ya-type-method-7",
                "@value":"Type-GameClient-ServerCommand"
              },
              {
                "@key":"ya-method-8",
                "@value":"GameClient-SetInstance"
              },
              {
                "@key":"ya-type-method-8",
                "@value":"Type-GameClient-SetInstance"
              },
              {
                "@key":"ya-method-9",
                "@value":"GameClient-SetLeader"
              },
              {
                "@key":"ya-type-method-9",
                "@value":"Type-GameClient-SetLeader"
              }
            ]
          },
          "description":{
            "text":"Provides a way for applications to communicate with online game servers"
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"FunctionCompleted",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"GameClient-FunctionCompleted",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"functionName",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"functionName"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"functionName/argument"
              }
            ]
          },
          "description":{
            "text":"Indicates that a function call completed."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"GotMessage",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"GameClient-GotMessage",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"type",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"type"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"sender",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"sender"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"contents",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"contents"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"type/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"sender/argument"
              },
              {
                "@key":"socket-allow-3",
                "@value":"contents/argument"
              }
            ]
          },
          "description":{
            "text":"Indicates that a new message has been received."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"Info",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"GameClient-Info",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"message",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"message"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"message/argument"
              }
            ]
          },
          "description":{
            "text":"Indicates that something has occurred which the player should know about."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"InstanceIdChanged",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"GameClient-InstanceIdChanged",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instanceId",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"instanceId"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"instanceId/argument"
              }
            ]
          },
          "description":{
            "text":"Indicates that the InstanceId property has changed as a result of calling MakeNewInstance or SetInstance."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"Invited",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"GameClient-Invited",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instanceId",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"instanceId"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"instanceId/argument"
              }
            ]
          },
          "description":{
            "text":"Indicates that a user has been invited to this game instance."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"NewInstanceMade",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"GameClient-NewInstanceMade",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instanceId",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"instanceId"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"instanceId/argument"
              }
            ]
          },
          "description":{
            "text":"Indicates that a new instance was successfully created after calling MakeNewInstance."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"NewLeader",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"GameClient-NewLeader",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"playerId",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"playerId"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"playerId/argument"
              }
            ]
          },
          "description":{
            "text":"Indicates that this game has a new leader as specified through SetLeader"
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"PlayerJoined",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"GameClient-PlayerJoined",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"playerId",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"playerId"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"playerId/argument"
              }
            ]
          },
          "description":{
            "text":"Indicates that a new player has joined this game instance."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"PlayerLeft",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"GameClient-PlayerLeft",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"playerId",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"playerId"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"playerId/argument"
              }
            ]
          },
          "description":{
            "text":"Indicates that a player has left this game instance."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"ServerCommandFailure",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"GameClient-ServerCommandFailure",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"command",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"command"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"arguments",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"arguments"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"command/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"arguments/argument"
              }
            ]
          },
          "description":{
            "text":"Indicates that a server command failed."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"ServerCommandSuccess",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"GameClient-ServerCommandSuccess",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"command",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"command"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"response",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"response"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"command/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"response/argument"
              }
            ]
          },
          "description":{
            "text":"Indicates that a server command returned successfully."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"UserEmailAddressSet",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"GameClient-UserEmailAddressSet",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"emailAddress",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"emailAddress"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"emailAddress/argument"
              }
            ]
          },
          "description":{
            "text":"Indicates that the user email address has been set."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"WebServiceError",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"GameClient-WebServiceError",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"functionName",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"functionName"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"message",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"message"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"functionName/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"message/argument"
              }
            ]
          },
          "description":{
            "text":"Indicates that an error occurred while communicating with the web server."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetInstanceLists",
          "@kind":"command",
          "@name":"GameClient-GetInstanceLists",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Updates the InstancesJoined and InstancesInvited lists. This procedure can be called before setting the InstanceId."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetInstanceLists",
          "@kind":"command",
          "@name":"Type-GameClient-GetInstanceLists",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Updates the InstancesJoined and InstancesInvited lists. This procedure can be called before setting the InstanceId."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetMessages",
          "@kind":"command",
          "@name":"GameClient-GetMessages",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"type"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"count"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"type/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"count/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"type/text"
              },
              {
                "@key":"socket-allow-4",
                "@value":"count/number"
              }
            ]
          },
          "description":{
            "text":"Retrieves messages of the specified type."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetMessages",
          "@kind":"command",
          "@name":"Type-GameClient-GetMessages",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"type"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"count"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"type/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"count/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"type/text"
              },
              {
                "@key":"socket-allow-6",
                "@value":"count/number"
              }
            ]
          },
          "description":{
            "text":"Retrieves messages of the specified type."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Invite",
          "@kind":"command",
          "@name":"GameClient-Invite",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"playerEmail"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"playerEmail/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"playerEmail/text"
              }
            ]
          },
          "description":{
            "text":"Invites a player to this game instance."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Invite",
          "@kind":"command",
          "@name":"Type-GameClient-Invite",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"playerEmail"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"playerEmail/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"playerEmail/text"
              }
            ]
          },
          "description":{
            "text":"Invites a player to this game instance."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"LeaveInstance",
          "@kind":"command",
          "@name":"GameClient-LeaveInstance",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Leaves the current instance."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"LeaveInstance",
          "@kind":"command",
          "@name":"Type-GameClient-LeaveInstance",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Leaves the current instance."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"MakeNewInstance",
          "@kind":"command",
          "@name":"GameClient-MakeNewInstance",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instanceId"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"makePublic"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"instanceId/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"makePublic/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"instanceId/text"
              },
              {
                "@key":"socket-allow-4",
                "@value":"makePublic/boolean"
              }
            ]
          },
          "description":{
            "text":"Asks the server to create a new instance of this game."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"MakeNewInstance",
          "@kind":"command",
          "@name":"Type-GameClient-MakeNewInstance",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instanceId"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"makePublic"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"instanceId/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"makePublic/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"instanceId/text"
              },
              {
                "@key":"socket-allow-6",
                "@value":"makePublic/boolean"
              }
            ]
          },
          "description":{
            "text":"Asks the server to create a new instance of this game."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SendMessage",
          "@kind":"command",
          "@name":"GameClient-SendMessage",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"type"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"recipients"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"contents"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"type/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"recipients/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"contents/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"type/text"
              },
              {
                "@key":"socket-allow-5",
                "@value":"recipients/list"
              },
              {
                "@key":"socket-allow-6",
                "@value":"contents/list"
              }
            ]
          },
          "description":{
            "text":"Sends a keyed message to all recipients in the recipients list. The message will consist of the contents list."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SendMessage",
          "@kind":"command",
          "@name":"Type-GameClient-SendMessage",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"type"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"recipients"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"contents"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"type/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"recipients/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"contents/value"
              },
              {
                "@key":"socket-allow-6",
                "@value":"type/text"
              },
              {
                "@key":"socket-allow-7",
                "@value":"recipients/list"
              },
              {
                "@key":"socket-allow-8",
                "@value":"contents/list"
              }
            ]
          },
          "description":{
            "text":"Sends a keyed message to all recipients in the recipients list. The message will consist of the contents list."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ServerCommand",
          "@kind":"command",
          "@name":"GameClient-ServerCommand",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"command"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"arguments"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"command/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"arguments/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"command/text"
              },
              {
                "@key":"socket-allow-4",
                "@value":"arguments/list"
              }
            ]
          },
          "description":{
            "text":"Sends the specified command to the game server."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ServerCommand",
          "@kind":"command",
          "@name":"Type-GameClient-ServerCommand",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"command"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"arguments"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"command/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"arguments/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"command/text"
              },
              {
                "@key":"socket-allow-6",
                "@value":"arguments/list"
              }
            ]
          },
          "description":{
            "text":"Sends the specified command to the game server."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SetInstance",
          "@kind":"command",
          "@name":"GameClient-SetInstance",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"instanceId"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"instanceId/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"instanceId/text"
              }
            ]
          },
          "description":{
            "text":"Sets InstanceId and joins the specified instance."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SetInstance",
          "@kind":"command",
          "@name":"Type-GameClient-SetInstance",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"instanceId"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"instanceId/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"instanceId/text"
              }
            ]
          },
          "description":{
            "text":"Sets InstanceId and joins the specified instance."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SetLeader",
          "@kind":"command",
          "@name":"GameClient-SetLeader",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"playerEmail"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"playerEmail/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"playerEmail/text"
              }
            ]
          },
          "description":{
            "text":"Tells the server to set the leader to playerId. Only the current leader may successfully set a new leader."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SetLeader",
          "@kind":"command",
          "@name":"Type-GameClient-SetLeader",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"playerEmail"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"playerEmail/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"playerEmail/text"
              }
            ]
          },
          "description":{
            "text":"Tells the server to set the leader to playerId. Only the current leader may successfully set a new leader."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"HorizontalArrangement",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"HorizontalArrangement",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"2"
              },
              {
                "@key":"ya-prop-1",
                "@value":"AlignHorizontal/read-write-property/number/A number that encodes how contents of the arrangement are aligned horizontally. The choices are: 1 = left aligned, 2 = horizontally centered, 3 = right aligned. Alignment has no effect if the arrangement's width is automatic."
              },
              {
                "@key":"ya-prop-2",
                "@value":"AlignVertical/read-write-property/number/A number that encodes how the contents of the arrangement are aligned vertically. The choices are: 1 = aligned at the top, 2 = vertically centered, 3 = aligned at the bottom. Alignment has no effect if the arrangement's height is automatic."
              },
              {
                "@key":"ya-prop-3",
                "@value":"Column/invisible-property/number/"
              },
              {
                "@key":"ya-prop-4",
                "@value":"Height/read-write-property/number/"
              },
              {
                "@key":"ya-prop-5",
                "@value":"Row/invisible-property/number/"
              },
              {
                "@key":"ya-prop-6",
                "@value":"Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."
              },
              {
                "@key":"ya-prop-7",
                "@value":"Width/read-write-property/number/"
              }
            ]
          },
          "description":{
            "text":"A formatting element in which to place components that should be displayed from left to right. If you wish to have components displayed one over another, use VerticalArrangement instead."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"Image",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"Image",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"1"
              },
              {
                "@key":"ya-prop-1",
                "@value":"Animation/write-only-property/text/"
              },
              {
                "@key":"ya-prop-2",
                "@value":"Column/invisible-property/number/"
              },
              {
                "@key":"ya-prop-3",
                "@value":"Height/read-write-property/number/"
              },
              {
                "@key":"ya-prop-4",
                "@value":"Picture/read-write-property/text/"
              },
              {
                "@key":"ya-prop-5",
                "@value":"Row/invisible-property/number/"
              },
              {
                "@key":"ya-prop-6",
                "@value":"Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."
              },
              {
                "@key":"ya-prop-7",
                "@value":"Width/read-write-property/number/"
              }
            ]
          },
          "description":{
            "text":"Component for displaying images. The picture to display, and other aspects of the Image's appearance, can be specified in the Designer or in the Blocks Editor."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"ImagePicker",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"ImagePicker",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"5"
              },
              {
                "@key":"ya-event-1",
                "@value":"ImagePicker-AfterPicking"
              },
              {
                "@key":"ya-event-2",
                "@value":"ImagePicker-BeforePicking"
              },
              {
                "@key":"ya-event-3",
                "@value":"ImagePicker-GotFocus"
              },
              {
                "@key":"ya-event-4",
                "@value":"ImagePicker-LostFocus"
              },
              {
                "@key":"ya-prop-1",
                "@value":"BackgroundColor/read-write-property/number/Returns the button's background color"
              },
              {
                "@key":"ya-prop-2",
                "@value":"Column/invisible-property/number/"
              },
              {
                "@key":"ya-prop-3",
                "@value":"Enabled/read-write-property/boolean/"
              },
              {
                "@key":"ya-prop-4",
                "@value":"FontBold/invisible-property/boolean/"
              },
              {
                "@key":"ya-prop-5",
                "@value":"FontItalic/invisible-property/boolean/"
              },
              {
                "@key":"ya-prop-6",
                "@value":"FontSize/invisible-property/number/"
              },
              {
                "@key":"ya-prop-7",
                "@value":"FontTypeface/invisible-property/number/"
              },
              {
                "@key":"ya-prop-8",
                "@value":"Height/read-write-property/number/"
              },
              {
                "@key":"ya-prop-9",
                "@value":"Image/read-write-property/text/Specifies the path of the button's image. If there is both an Image and a BackgroundColor, only the Image will be visible."
              },
              {
                "@key":"ya-prop-10",
                "@value":"Row/invisible-property/number/"
              },
              {
                "@key":"ya-prop-11",
                "@value":"Selection/read-only-property/text/Path to the file containing the image that was selected."
              },
              {
                "@key":"ya-prop-12",
                "@value":"Shape/invisible-property/number/Specifies the button's shape (default, rounded, rectangular, oval). The shape will not be visible if an Image is being displayed."
              },
              {
                "@key":"ya-prop-13",
                "@value":"ShowFeedback/read-write-property/boolean/Specifies if a visual feedback should be shown for a button that as an image as background."
              },
              {
                "@key":"ya-prop-14",
                "@value":"Text/read-write-property/text/"
              },
              {
                "@key":"ya-prop-15",
                "@value":"TextAlignment/invisible-property/number/"
              },
              {
                "@key":"ya-prop-16",
                "@value":"TextColor/read-write-property/number/"
              },
              {
                "@key":"ya-prop-17",
                "@value":"Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."
              },
              {
                "@key":"ya-prop-18",
                "@value":"Width/read-write-property/number/"
              },
              {
                "@key":"ya-method-1",
                "@value":"ImagePicker-Open"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-ImagePicker-Open"
              }
            ]
          },
          "description":{
            "text":"A special-purpose button. When the user taps an image picker, the device's image gallery appears, and the user can choose an image. After an image is picked, it is saved on the SD card and the ImageFile property will be the name of the file where the image is stored. In order to not fill up storage, a maximum of 10 images will be stored. Picking more images will delete previous images, in order from oldest to newest."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"AfterPicking",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"ImagePicker-AfterPicking",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Simple event to be raised after the picker activity returns its result and the properties have been filled in."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"BeforePicking",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"ImagePicker-BeforePicking",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Simple event to raise when the component is clicked but before the picker activity is started."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"GotFocus",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"ImagePicker-GotFocus",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Indicates the cursor moved over the button so it is now possible to click it."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"LostFocus",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"ImagePicker-LostFocus",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Indicates the cursor moved away from the button so it is now no longer possible to click it."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Open",
          "@kind":"command",
          "@name":"ImagePicker-Open",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Opens the picker, as though the user clicked on it."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Open",
          "@kind":"command",
          "@name":"Type-ImagePicker-Open",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Opens the picker, as though the user clicked on it."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"ImageSprite",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"ImageSprite",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"6"
              },
              {
                "@key":"ya-event-1",
                "@value":"ImageSprite-CollidedWith"
              },
              {
                "@key":"ya-event-2",
                "@value":"ImageSprite-Dragged"
              },
              {
                "@key":"ya-event-3",
                "@value":"ImageSprite-EdgeReached"
              },
              {
                "@key":"ya-event-4",
                "@value":"ImageSprite-Flung"
              },
              {
                "@key":"ya-event-5",
                "@value":"ImageSprite-NoLongerCollidingWith"
              },
              {
                "@key":"ya-event-6",
                "@value":"ImageSprite-TouchDown"
              },
              {
                "@key":"ya-event-7",
                "@value":"ImageSprite-TouchUp"
              },
              {
                "@key":"ya-event-8",
                "@value":"ImageSprite-Touched"
              },
              {
                "@key":"ya-prop-1",
                "@value":"Enabled/read-write-property/boolean/Controls whether the sprite moves when its speed is non-zero."
              },
              {
                "@key":"ya-prop-2",
                "@value":"Heading/read-write-property/number/Returns the sprite's heading in degrees above the positive x-axis. Zero degrees is toward the right of the screen; 90 degrees is toward the top of the screen."
              },
              {
                "@key":"ya-prop-3",
                "@value":"Height/read-write-property/number/"
              },
              {
                "@key":"ya-prop-4",
                "@value":"Interval/read-write-property/number/The interval in milliseconds at which the sprite's position is updated. For example, if the interval is 50 and the speed is 10, then the sprite will move 10 pixels every 50 milliseconds."
              },
              {
                "@key":"ya-prop-5",
                "@value":"Picture/read-write-property/text/The picture that determines the sprite's appearence"
              },
              {
                "@key":"ya-prop-6",
                "@value":"Rotates/read-write-property/boolean/If true, the sprite image rotates to match the sprite's heading. If false, the sprite image does not rotate when the sprite changes heading. The sprite rotates around its centerpoint."
              },
              {
                "@key":"ya-prop-7",
                "@value":"Speed/read-write-property/number/The speed at which the sprite moves. The sprite moves this many pixels every interval."
              },
              {
                "@key":"ya-prop-8",
                "@value":"Visible/read-write-property/boolean/True if the sprite is visible."
              },
              {
                "@key":"ya-prop-9",
                "@value":"Width/read-write-property/number/"
              },
              {
                "@key":"ya-prop-10",
                "@value":"X/read-write-property/number/The horizontal coordinate of the left edge of the sprite, increasing as the sprite moves to the right."
              },
              {
                "@key":"ya-prop-11",
                "@value":"Y/read-write-property/number/The vertical coordinate of the top of the sprite, increasing as the sprite moves down."
              },
              {
                "@key":"ya-prop-12",
                "@value":"Z/read-write-property/number/How the sprite should be layered relative to other sprits, with higher-numbered layers in front of lower-numbered layers."
              },
              {
                "@key":"ya-method-1",
                "@value":"ImageSprite-Bounce"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-ImageSprite-Bounce"
              },
              {
                "@key":"ya-method-2",
                "@value":"ImageSprite-CollidingWith"
              },
              {
                "@key":"ya-type-method-2",
                "@value":"Type-ImageSprite-CollidingWith"
              },
              {
                "@key":"ya-method-3",
                "@value":"ImageSprite-MoveIntoBounds"
              },
              {
                "@key":"ya-type-method-3",
                "@value":"Type-ImageSprite-MoveIntoBounds"
              },
              {
                "@key":"ya-method-4",
                "@value":"ImageSprite-MoveTo"
              },
              {
                "@key":"ya-type-method-4",
                "@value":"Type-ImageSprite-MoveTo"
              },
              {
                "@key":"ya-method-5",
                "@value":"ImageSprite-PointInDirection"
              },
              {
                "@key":"ya-type-method-5",
                "@value":"Type-ImageSprite-PointInDirection"
              },
              {
                "@key":"ya-method-6",
                "@value":"ImageSprite-PointTowards"
              },
              {
                "@key":"ya-type-method-6",
                "@value":"Type-ImageSprite-PointTowards"
              }
            ]
          },
          "description":{
            "text":"A 'sprite' that can be placed on a Canvas, where it can react to touches and drags, interact with other sprites (Balls and other ImageSprites) and the edge of the Canvas, and move according to its property values. Its appearance is that of the image specified in its Picture property (unless its Visible property is False. To have an ImageSprite move 10 pixels to the left every 1000 milliseconds (one second), for example, you would set the Speed property to 10 [pixels], the Interval property to 1000 [milliseconds], the Heading property to 180 [degrees], and the Enabled property to True. A sprite whose Rotates property is True will rotate its image as the sprite's Heading changes. Checking for collisions with a rotated sprite currently checks the sprite's unrotated position so that collision checking will be inaccurate for tall narrow or short wide sprites that are rotated. Any of the sprite properties can be changed at any time under program control."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"CollidedWith",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"ImageSprite-CollidedWith",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"other",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"other"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"other/argument"
              }
            ]
          },
          "description":{
            "text":"Handler for CollidedWith events, called when two sprites collide. Note that checking for collisions with a rotated ImageSprite currently checks against the sprite's unrotated position. Therefore, collision checking will be inaccurate for tall narrow or short wide sprites that are rotated."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"Dragged",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"ImageSprite-Dragged",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"startX",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"startX"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"startY",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"startY"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"prevX",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"prevX"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"prevY",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"prevY"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"currentX",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"currentX"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"currentY",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"currentY"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"startX/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"startY/argument"
              },
              {
                "@key":"socket-allow-3",
                "@value":"prevX/argument"
              },
              {
                "@key":"socket-allow-4",
                "@value":"prevY/argument"
              },
              {
                "@key":"socket-allow-5",
                "@value":"currentX/argument"
              },
              {
                "@key":"socket-allow-6",
                "@value":"currentY/argument"
              }
            ]
          },
          "description":{
            "text":"Handler for Dragged events. On all calls, the starting coordinates are where the screen was first touched, and the \"current\" coordinates describe the endpoint of the current line segment. On the first call within a given drag, the \"previous\" coordinates are the same as the starting coordinates; subsequently, they are the \"current\" coordinates from the prior call. Note that the Sprite won't actually move anywhere in response to the Dragged event unless MoveTo is specifically called."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"EdgeReached",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"ImageSprite-EdgeReached",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"edge",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"edge"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"edge/argument"
              }
            ]
          },
          "description":{
            "text":"Event handler called when the sprite reaches an edge of the screen. If Bounce is then called with that edge, the sprite will appear to bounce off of the edge it reached."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"Flung",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"ImageSprite-Flung",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"x"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"y"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"speed",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"speed"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"heading",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"heading"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"xvel",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"xvel"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"yvel",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"yvel"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"x/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"y/argument"
              },
              {
                "@key":"socket-allow-3",
                "@value":"speed/argument"
              },
              {
                "@key":"socket-allow-4",
                "@value":"heading/argument"
              },
              {
                "@key":"socket-allow-5",
                "@value":"xvel/argument"
              },
              {
                "@key":"socket-allow-6",
                "@value":"yvel/argument"
              }
            ]
          },
          "description":{
            "text":"When a fling gesture (quick swipe) is made on the sprite: provides the (x,y) position of the start of the fling, relative to the upper left of the canvas. Also provides the speed (pixels per millisecond) and heading (0-360 degrees) of the fling, as well as the x velocity and y velocity components of the fling's vector."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"NoLongerCollidingWith",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"ImageSprite-NoLongerCollidingWith",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"other",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"other"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"other/argument"
              }
            ]
          },
          "description":{
            "text":"Event indicating that a pair of sprites are no longer colliding."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"TouchDown",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"ImageSprite-TouchDown",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"x"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"y"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"x/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"y/argument"
              }
            ]
          },
          "description":{
            "text":"When the user begins touching the sprite (places finger on sprite and leaves it there): provides the (x,y) position of the touch, relative to the upper left of the canvas"
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"TouchUp",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"ImageSprite-TouchUp",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"x"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"y"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"x/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"y/argument"
              }
            ]
          },
          "description":{
            "text":"When the user stops touching the sprite (lifts finger after a TouchDown event): provides the (x,y) position of the touch, relative to the upper left of the canvas"
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"Touched",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"ImageSprite-Touched",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"x"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"y"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"x/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"y/argument"
              }
            ]
          },
          "description":{
            "text":"When the user touches the sprite and then immediately lifts finger: provides the (x,y) position of the touch, relative to the upper left of the canvas"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Bounce",
          "@kind":"command",
          "@name":"ImageSprite-Bounce",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"edge"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"edge/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"edge/number"
              }
            ]
          },
          "description":{
            "text":"Makes this sprite bounce, as if off a wall. For normal bouncing, the edge argument should be the one returned by EdgeReached."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Bounce",
          "@kind":"command",
          "@name":"Type-ImageSprite-Bounce",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"edge"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"edge/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"edge/number"
              }
            ]
          },
          "description":{
            "text":"Makes this sprite bounce, as if off a wall. For normal bouncing, the edge argument should be the one returned by EdgeReached."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"CollidingWith",
          "@kind":"function",
          "@name":"ImageSprite-CollidingWith",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"other"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              },
              {
                "@key":"socket-allow-1",
                "@value":"other/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"other/component"
              }
            ]
          },
          "description":{
            "text":"Indicates whether a collision has been registered between this sprite and the passed sprite."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"CollidingWith",
          "@kind":"function",
          "@name":"Type-ImageSprite-CollidingWith",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"other"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"other/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"other/component"
              }
            ]
          },
          "description":{
            "text":"Indicates whether a collision has been registered between this sprite and the passed sprite."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"MoveIntoBounds",
          "@kind":"command",
          "@name":"ImageSprite-MoveIntoBounds",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Moves the sprite back in bounds if part of it extends out of bounds, having no effect otherwise. If the sprite is too wide to fit on the canvas, this aligns the left side of the sprite with the left side of the canvas. If the sprite is too tall to fit on the canvas, this aligns the top side of the sprite with the top side of the canvas."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"MoveIntoBounds",
          "@kind":"command",
          "@name":"Type-ImageSprite-MoveIntoBounds",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Moves the sprite back in bounds if part of it extends out of bounds, having no effect otherwise. If the sprite is too wide to fit on the canvas, this aligns the left side of the sprite with the left side of the canvas. If the sprite is too tall to fit on the canvas, this aligns the top side of the sprite with the top side of the canvas."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"MoveTo",
          "@kind":"command",
          "@name":"ImageSprite-MoveTo",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"x/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"y/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"x/number"
              },
              {
                "@key":"socket-allow-4",
                "@value":"y/number"
              }
            ]
          },
          "description":{
            "text":"Moves the sprite so that its left top corner is at the specfied x and y coordinates."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"MoveTo",
          "@kind":"command",
          "@name":"Type-ImageSprite-MoveTo",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"x/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"y/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"x/number"
              },
              {
                "@key":"socket-allow-6",
                "@value":"y/number"
              }
            ]
          },
          "description":{
            "text":"Moves the sprite so that its left top corner is at the specfied x and y coordinates."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"PointInDirection",
          "@kind":"command",
          "@name":"ImageSprite-PointInDirection",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"x/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"y/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"x/number"
              },
              {
                "@key":"socket-allow-4",
                "@value":"y/number"
              }
            ]
          },
          "description":{
            "text":"Turns the sprite to point towards the point with coordinates as (x, y)."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"PointInDirection",
          "@kind":"command",
          "@name":"Type-ImageSprite-PointInDirection",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"x"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"y"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"x/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"y/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"x/number"
              },
              {
                "@key":"socket-allow-6",
                "@value":"y/number"
              }
            ]
          },
          "description":{
            "text":"Turns the sprite to point towards the point with coordinates as (x, y)."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"PointTowards",
          "@kind":"command",
          "@name":"ImageSprite-PointTowards",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"target"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"target/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"target/component"
              }
            ]
          },
          "description":{
            "text":"Turns the sprite to point towards a designated target sprite. The new heading will be parallel to the line joining the centerpoints of the two sprites."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"PointTowards",
          "@kind":"command",
          "@name":"Type-ImageSprite-PointTowards",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"target"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"target/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"target/component"
              }
            ]
          },
          "description":{
            "text":"Turns the sprite to point towards a designated target sprite. The new heading will be parallel to the line joining the centerpoints of the two sprites."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"Label",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"Label",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"2"
              },
              {
                "@key":"ya-prop-1",
                "@value":"BackgroundColor/read-write-property/number/"
              },
              {
                "@key":"ya-prop-2",
                "@value":"Column/invisible-property/number/"
              },
              {
                "@key":"ya-prop-3",
                "@value":"FontBold/invisible-property/boolean/"
              },
              {
                "@key":"ya-prop-4",
                "@value":"FontItalic/invisible-property/boolean/"
              },
              {
                "@key":"ya-prop-5",
                "@value":"FontSize/read-write-property/number/"
              },
              {
                "@key":"ya-prop-6",
                "@value":"FontTypeface/invisible-property/number/"
              },
              {
                "@key":"ya-prop-7",
                "@value":"Height/read-write-property/number/"
              },
              {
                "@key":"ya-prop-8",
                "@value":"Row/invisible-property/number/"
              },
              {
                "@key":"ya-prop-9",
                "@value":"Text/read-write-property/text/"
              },
              {
                "@key":"ya-prop-10",
                "@value":"TextAlignment/invisible-property/number/"
              },
              {
                "@key":"ya-prop-11",
                "@value":"TextColor/read-write-property/number/"
              },
              {
                "@key":"ya-prop-12",
                "@value":"Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."
              },
              {
                "@key":"ya-prop-13",
                "@value":"Width/read-write-property/number/"
              }
            ]
          },
          "description":{
            "text":"A Label displays a piece of text, which is specified through the Text property. Other properties, all of which can be set in the Designer or Blocks Editor, control the appearance and placement of the text."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"ListPicker",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"ListPicker",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"6"
              },
              {
                "@key":"ya-event-1",
                "@value":"ListPicker-AfterPicking"
              },
              {
                "@key":"ya-event-2",
                "@value":"ListPicker-BeforePicking"
              },
              {
                "@key":"ya-event-3",
                "@value":"ListPicker-GotFocus"
              },
              {
                "@key":"ya-event-4",
                "@value":"ListPicker-LostFocus"
              },
              {
                "@key":"ya-prop-1",
                "@value":"BackgroundColor/read-write-property/number/Returns the button's background color"
              },
              {
                "@key":"ya-prop-2",
                "@value":"Column/invisible-property/number/"
              },
              {
                "@key":"ya-prop-3",
                "@value":"Elements/read-write-property/list/"
              },
              {
                "@key":"ya-prop-4",
                "@value":"ElementsFromString/write-only-property/text/"
              },
              {
                "@key":"ya-prop-5",
                "@value":"Enabled/read-write-property/boolean/"
              },
              {
                "@key":"ya-prop-6",
                "@value":"FontBold/invisible-property/boolean/"
              },
              {
                "@key":"ya-prop-7",
                "@value":"FontItalic/invisible-property/boolean/"
              },
              {
                "@key":"ya-prop-8",
                "@value":"FontSize/invisible-property/number/"
              },
              {
                "@key":"ya-prop-9",
                "@value":"FontTypeface/invisible-property/number/"
              },
              {
                "@key":"ya-prop-10",
                "@value":"Height/read-write-property/number/"
              },
              {
                "@key":"ya-prop-11",
                "@value":"Image/read-write-property/text/Specifies the path of the button's image. If there is both an Image and a BackgroundColor, only the Image will be visible."
              },
              {
                "@key":"ya-prop-12",
                "@value":"Row/invisible-property/number/"
              },
              {
                "@key":"ya-prop-13",
                "@value":"Selection/read-write-property/text/The selected item. When directly changed by the programmer, the SelectionIndex property is also changed to the first item in the ListPicker with the given value. If the value does not appear, SelectionIndex will be set to 0."
              },
              {
                "@key":"ya-prop-14",
                "@value":"SelectionIndex/read-write-property/number/The index of the currently selected item, starting at 1. If no item is selected, the value will be 0. If an attempt is made to set this to a number less than 1 or greater than the number of items in the ListPicker, SelectionIndex will be set to 0, and Selection will be set to the empty text."
              },
              {
                "@key":"ya-prop-15",
                "@value":"Shape/invisible-property/number/Specifies the button's shape (default, rounded, rectangular, oval). The shape will not be visible if an Image is being displayed."
              },
              {
                "@key":"ya-prop-16",
                "@value":"ShowFeedback/read-write-property/boolean/Specifies if a visual feedback should be shown for a button that as an image as background."
              },
              {
                "@key":"ya-prop-17",
                "@value":"Text/read-write-property/text/"
              },
              {
                "@key":"ya-prop-18",
                "@value":"TextAlignment/invisible-property/number/"
              },
              {
                "@key":"ya-prop-19",
                "@value":"TextColor/read-write-property/number/"
              },
              {
                "@key":"ya-prop-20",
                "@value":"Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."
              },
              {
                "@key":"ya-prop-21",
                "@value":"Width/read-write-property/number/"
              },
              {
                "@key":"ya-method-1",
                "@value":"ListPicker-Open"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-ListPicker-Open"
              }
            ]
          },
          "description":{
            "text":"A button that, when clicked on, displays a list of texts for the user to choose among. The texts can be specified through the Designer or Blocks Editor by setting the ElementsFromString property to their string-separated concatenation (for example, choice 1, choice 2, choice 3) or by setting the Elements property to a List in the Blocks editor. Other properties affect the appearance of the button (TextAlignment, BackgroundColor, etc.) and whether it can be clicked on (Enabled)."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"AfterPicking",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"ListPicker-AfterPicking",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Simple event to be raised after the picker activity returns its result and the properties have been filled in."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"BeforePicking",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"ListPicker-BeforePicking",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Simple event to raise when the component is clicked but before the picker activity is started."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"GotFocus",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"ListPicker-GotFocus",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Indicates the cursor moved over the button so it is now possible to click it."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"LostFocus",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"ListPicker-LostFocus",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Indicates the cursor moved away from the button so it is now no longer possible to click it."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Open",
          "@kind":"command",
          "@name":"ListPicker-Open",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Opens the picker, as though the user clicked on it."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Open",
          "@kind":"command",
          "@name":"Type-ListPicker-Open",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Opens the picker, as though the user clicked on it."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"LocationSensor",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"LocationSensor",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"2"
              },
              {
                "@key":"ya-event-1",
                "@value":"LocationSensor-LocationChanged"
              },
              {
                "@key":"ya-event-2",
                "@value":"LocationSensor-StatusChanged"
              },
              {
                "@key":"ya-prop-1",
                "@value":"Accuracy/read-only-property/number/"
              },
              {
                "@key":"ya-prop-2",
                "@value":"Altitude/read-only-property/number/"
              },
              {
                "@key":"ya-prop-3",
                "@value":"AvailableProviders/read-only-property/list/"
              },
              {
                "@key":"ya-prop-4",
                "@value":"CurrentAddress/read-only-property/text/"
              },
              {
                "@key":"ya-prop-5",
                "@value":"DistanceInterval/read-write-property/number/Determines the minimum distance interval, in meters, that the sensor will try to use for sending out location updates. For example, if this is set to 5, then the sensor will fire a LocationChanged event only after 5 meters have been traversed. However, the sensor does not guarantee that an update will be received at exactly the distance interval. It may take more than 5 meters to fire an event, for instance."
              },
              {
                "@key":"ya-prop-6",
                "@value":"Enabled/read-write-property/boolean/"
              },
              {
                "@key":"ya-prop-7",
                "@value":"HasAccuracy/read-only-property/boolean/"
              },
              {
                "@key":"ya-prop-8",
                "@value":"HasAltitude/read-only-property/boolean/"
              },
              {
                "@key":"ya-prop-9",
                "@value":"HasLongitudeLatitude/read-only-property/boolean/"
              },
              {
                "@key":"ya-prop-10",
                "@value":"Latitude/read-only-property/number/"
              },
              {
                "@key":"ya-prop-11",
                "@value":"Longitude/read-only-property/number/"
              },
              {
                "@key":"ya-prop-12",
                "@value":"ProviderLocked/read-write-property/boolean/"
              },
              {
                "@key":"ya-prop-13",
                "@value":"ProviderName/read-write-property/text/"
              },
              {
                "@key":"ya-prop-14",
                "@value":"TimeInterval/read-write-property/number/Determines the minimum time interval, in milliseconds, that the sensor will try to use for sending out location updates. However, location updates will only be received when the location of the phone actually changes, and use of the specified time interval is not guaranteed. For example, if 1000 is used as the time interval, location updates will never be fired sooner than 1000ms, but they may be fired anytime after."
              },
              {
                "@key":"ya-method-1",
                "@value":"LocationSensor-LatitudeFromAddress"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-LocationSensor-LatitudeFromAddress"
              },
              {
                "@key":"ya-method-2",
                "@value":"LocationSensor-LongitudeFromAddress"
              },
              {
                "@key":"ya-type-method-2",
                "@value":"Type-LocationSensor-LongitudeFromAddress"
              }
            ]
          },
          "description":{
            "text":"Non-visible component providing location information, including longitude, latitude, altitude (if supported by the device), and address. This can also perform \"geocoding\", converting a given address (not necessarily the current one) to a latitude (with the LatitudeFromAddress method) and a longitude (with the LongitudeFromAddress method). In order to function, the component must have its Enabled property set to True, and the device must have location sensing enabled through either wireless networks or GPS satellites (if outside)."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"LocationChanged",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"LocationSensor-LocationChanged",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"latitude",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"latitude"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"longitude",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"longitude"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"altitude",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"altitude"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"latitude/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"longitude/argument"
              },
              {
                "@key":"socket-allow-3",
                "@value":"altitude/argument"
              }
            ]
          },
          "description":{
            "text":"Indicates that a new location has been detected."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"StatusChanged",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"LocationSensor-StatusChanged",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"provider",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"provider"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"status",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"status"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"provider/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"status/argument"
              }
            ]
          },
          "description":{
            "text":"Indicates that the status of the provider has changed."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"LatitudeFromAddress",
          "@kind":"function",
          "@name":"LocationSensor-LatitudeFromAddress",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"locationName"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"locationName/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"locationName/text"
              }
            ]
          },
          "description":{
            "text":"Derives latitude of given address"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"LatitudeFromAddress",
          "@kind":"function",
          "@name":"Type-LocationSensor-LatitudeFromAddress",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"locationName"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"locationName/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"locationName/text"
              }
            ]
          },
          "description":{
            "text":"Derives latitude of given address"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"LongitudeFromAddress",
          "@kind":"function",
          "@name":"LocationSensor-LongitudeFromAddress",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"locationName"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"locationName/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"locationName/text"
              }
            ]
          },
          "description":{
            "text":"Derives longitude of given address"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"LongitudeFromAddress",
          "@kind":"function",
          "@name":"Type-LocationSensor-LongitudeFromAddress",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"locationName"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"locationName/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"locationName/text"
              }
            ]
          },
          "description":{
            "text":"Derives longitude of given address"
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"Notifier",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"Notifier",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"2"
              },
              {
                "@key":"ya-event-1",
                "@value":"Notifier-AfterChoosing"
              },
              {
                "@key":"ya-event-2",
                "@value":"Notifier-AfterTextInput"
              },
              {
                "@key":"ya-method-1",
                "@value":"Notifier-LogError"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-Notifier-LogError"
              },
              {
                "@key":"ya-method-2",
                "@value":"Notifier-LogInfo"
              },
              {
                "@key":"ya-type-method-2",
                "@value":"Type-Notifier-LogInfo"
              },
              {
                "@key":"ya-method-3",
                "@value":"Notifier-LogWarning"
              },
              {
                "@key":"ya-type-method-3",
                "@value":"Type-Notifier-LogWarning"
              },
              {
                "@key":"ya-method-4",
                "@value":"Notifier-ShowAlert"
              },
              {
                "@key":"ya-type-method-4",
                "@value":"Type-Notifier-ShowAlert"
              },
              {
                "@key":"ya-method-5",
                "@value":"Notifier-ShowChooseDialog"
              },
              {
                "@key":"ya-type-method-5",
                "@value":"Type-Notifier-ShowChooseDialog"
              },
              {
                "@key":"ya-method-6",
                "@value":"Notifier-ShowMessageDialog"
              },
              {
                "@key":"ya-type-method-6",
                "@value":"Type-Notifier-ShowMessageDialog"
              },
              {
                "@key":"ya-method-7",
                "@value":"Notifier-ShowTextDialog"
              },
              {
                "@key":"ya-type-method-7",
                "@value":"Type-Notifier-ShowTextDialog"
              }
            ]
          },
          "description":{
            "text":"Component that creates alert messages, popup dialogs, and log entries."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"AfterChoosing",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Notifier-AfterChoosing",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"choice",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"choice"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"choice/argument"
              }
            ]
          },
          "description":{
            "text":"Event after the user has made a selection for ShowChooseDialog."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"AfterTextInput",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Notifier-AfterTextInput",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"response",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"response"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"response/argument"
              }
            ]
          },
          "description":{
            "text":"Event raised after the user has responded to ShowTextDialog."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"LogError",
          "@kind":"command",
          "@name":"Notifier-LogError",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"message"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"message/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"message/text"
              }
            ]
          },
          "description":{
            "text":"Log an error message."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"LogError",
          "@kind":"command",
          "@name":"Type-Notifier-LogError",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"message"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"message/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"message/text"
              }
            ]
          },
          "description":{
            "text":"Log an error message."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"LogInfo",
          "@kind":"command",
          "@name":"Notifier-LogInfo",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"message"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"message/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"message/text"
              }
            ]
          },
          "description":{
            "text":"Log an information message."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"LogInfo",
          "@kind":"command",
          "@name":"Type-Notifier-LogInfo",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"message"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"message/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"message/text"
              }
            ]
          },
          "description":{
            "text":"Log an information message."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"LogWarning",
          "@kind":"command",
          "@name":"Notifier-LogWarning",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"message"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"message/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"message/text"
              }
            ]
          },
          "description":{
            "text":"Log a warning message."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"LogWarning",
          "@kind":"command",
          "@name":"Type-Notifier-LogWarning",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"message"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"message/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"message/text"
              }
            ]
          },
          "description":{
            "text":"Log a warning message."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ShowAlert",
          "@kind":"command",
          "@name":"Notifier-ShowAlert",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"notice"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"notice/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"notice/text"
              }
            ]
          },
          "description":{
            "text":"Display a temporary notification"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ShowAlert",
          "@kind":"command",
          "@name":"Type-Notifier-ShowAlert",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"notice"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"notice/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"notice/text"
              }
            ]
          },
          "description":{
            "text":"Display a temporary notification"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ShowChooseDialog",
          "@kind":"command",
          "@name":"Notifier-ShowChooseDialog",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"message"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"title"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"button1Text"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"button2Text"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"cancelable"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"message/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"title/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"button1Text/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"button2Text/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"cancelable/value"
              },
              {
                "@key":"socket-allow-6",
                "@value":"message/text"
              },
              {
                "@key":"socket-allow-7",
                "@value":"title/text"
              },
              {
                "@key":"socket-allow-8",
                "@value":"button1Text/text"
              },
              {
                "@key":"socket-allow-9",
                "@value":"button2Text/text"
              },
              {
                "@key":"socket-allow-10",
                "@value":"cancelable/boolean"
              }
            ]
          },
          "description":{
            "text":"Displays an alert with two buttons that have specified text, and additional button marked CANCEL if cancelable is set. Raises the AfterChoosing event when the choice has been made, and returns the text of the button that was pressed."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ShowChooseDialog",
          "@kind":"command",
          "@name":"Type-Notifier-ShowChooseDialog",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"message"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"title"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"button1Text"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"button2Text"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"cancelable"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"message/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"title/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"button1Text/value"
              },
              {
                "@key":"socket-allow-6",
                "@value":"button2Text/value"
              },
              {
                "@key":"socket-allow-7",
                "@value":"cancelable/value"
              },
              {
                "@key":"socket-allow-8",
                "@value":"message/text"
              },
              {
                "@key":"socket-allow-9",
                "@value":"title/text"
              },
              {
                "@key":"socket-allow-10",
                "@value":"button1Text/text"
              },
              {
                "@key":"socket-allow-11",
                "@value":"button2Text/text"
              },
              {
                "@key":"socket-allow-12",
                "@value":"cancelable/boolean"
              }
            ]
          },
          "description":{
            "text":"Displays an alert with two buttons that have specified text, and additional button marked CANCEL if cancelable is set. Raises the AfterChoosing event when the choice has been made, and returns the text of the button that was pressed."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ShowMessageDialog",
          "@kind":"command",
          "@name":"Notifier-ShowMessageDialog",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"message"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"title"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"buttonText"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"message/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"title/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"buttonText/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"message/text"
              },
              {
                "@key":"socket-allow-5",
                "@value":"title/text"
              },
              {
                "@key":"socket-allow-6",
                "@value":"buttonText/text"
              }
            ]
          },
          "description":{
            "text":"Display an alert dialog with a single button"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ShowMessageDialog",
          "@kind":"command",
          "@name":"Type-Notifier-ShowMessageDialog",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"message"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"title"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"buttonText"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"message/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"title/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"buttonText/value"
              },
              {
                "@key":"socket-allow-6",
                "@value":"message/text"
              },
              {
                "@key":"socket-allow-7",
                "@value":"title/text"
              },
              {
                "@key":"socket-allow-8",
                "@value":"buttonText/text"
              }
            ]
          },
          "description":{
            "text":"Display an alert dialog with a single button"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ShowTextDialog",
          "@kind":"command",
          "@name":"Notifier-ShowTextDialog",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"message"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"title"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"cancelable"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"message/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"title/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"cancelable/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"message/text"
              },
              {
                "@key":"socket-allow-5",
                "@value":"title/text"
              },
              {
                "@key":"socket-allow-6",
                "@value":"cancelable/boolean"
              }
            ]
          },
          "description":{
            "text":"Shows a dialog box in which the user can enter text, after which the AfterTextInput event is raised."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ShowTextDialog",
          "@kind":"command",
          "@name":"Type-Notifier-ShowTextDialog",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"message"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"title"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"cancelable"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"message/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"title/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"cancelable/value"
              },
              {
                "@key":"socket-allow-6",
                "@value":"message/text"
              },
              {
                "@key":"socket-allow-7",
                "@value":"title/text"
              },
              {
                "@key":"socket-allow-8",
                "@value":"cancelable/boolean"
              }
            ]
          },
          "description":{
            "text":"Shows a dialog box in which the user can enter text, after which the AfterTextInput event is raised."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"NxtColorSensor",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"NxtColorSensor",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"1"
              },
              {
                "@key":"ya-event-1",
                "@value":"NxtColorSensor-AboveRange"
              },
              {
                "@key":"ya-event-2",
                "@value":"NxtColorSensor-BelowRange"
              },
              {
                "@key":"ya-event-3",
                "@value":"NxtColorSensor-ColorChanged"
              },
              {
                "@key":"ya-event-4",
                "@value":"NxtColorSensor-WithinRange"
              },
              {
                "@key":"ya-prop-1",
                "@value":"AboveRangeEventEnabled/read-write-property/boolean/Whether the AboveRange event should fire when the DetectColor property is set to False and the light level goes above the TopOfRange."
              },
              {
                "@key":"ya-prop-2",
                "@value":"BelowRangeEventEnabled/read-write-property/boolean/Whether the BelowRange event should fire when the DetectColor property is set to False and the light level goes below the BottomOfRange."
              },
              {
                "@key":"ya-prop-3",
                "@value":"BluetoothClient/invisible-property/component/The BluetoothClient component that should be used for communication."
              },
              {
                "@key":"ya-prop-4",
                "@value":"BottomOfRange/read-write-property/number/The bottom of the range used for the BelowRange, WithinRange, and AboveRange events."
              },
              {
                "@key":"ya-prop-5",
                "@value":"ColorChangedEventEnabled/read-write-property/boolean/Whether the ColorChanged event should fire when the DetectColor property is set to True and the detected color changes."
              },
              {
                "@key":"ya-prop-6",
                "@value":"DetectColor/read-write-property/boolean/Whether the sensor should detect color or light. True indicates that the sensor should detect color; False indicates that the sensor should detect light. If the DetectColor property is set to True, the BelowRange, WithinRange, and AboveRange events will not occur and the sensor will not generate color. If the DetectColor property is set to False, the ColorChanged event will not occur."
              },
              {
                "@key":"ya-prop-7",
                "@value":"GenerateColor/read-write-property/number/The color that should generated by the sensor. Only None, Red, Green, or Blue are valid values. The sensor will not generate color when the DetectColor property is set to True."
              },
              {
                "@key":"ya-prop-8",
                "@value":"SensorPort/invisible-property/text/The sensor port that the sensor is connected to."
              },
              {
                "@key":"ya-prop-9",
                "@value":"TopOfRange/read-write-property/number/The top of the range used for the BelowRange, WithinRange, and AboveRange events."
              },
              {
                "@key":"ya-prop-10",
                "@value":"WithinRangeEventEnabled/read-write-property/boolean/Whether the WithinRange event should fire when the DetectColor property is set to False and the light level goes between the BottomOfRange and the TopOfRange."
              },
              {
                "@key":"ya-method-1",
                "@value":"NxtColorSensor-GetColor"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-NxtColorSensor-GetColor"
              },
              {
                "@key":"ya-method-2",
                "@value":"NxtColorSensor-GetLightLevel"
              },
              {
                "@key":"ya-type-method-2",
                "@value":"Type-NxtColorSensor-GetLightLevel"
              }
            ]
          },
          "description":{
            "text":"A component that provides a high-level interface to a color sensor on a LEGO MINDSTORMS NXT robot."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"AboveRange",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"NxtColorSensor-AboveRange",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Light level has gone above the range. The AboveRange event will not occur if the DetectColor property is set to True or if the AboveRangeEventEnabled property is set to False."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"BelowRange",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"NxtColorSensor-BelowRange",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Light level has gone below the range. The BelowRange event will not occur if the DetectColor property is set to True or if the BelowRangeEventEnabled property is set to False."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"ColorChanged",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"NxtColorSensor-ColorChanged",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"color",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"color"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"color/argument"
              }
            ]
          },
          "description":{
            "text":"Detected color has changed. The ColorChanged event will not occur if the DetectColor property is set to False or if the ColorChangedEventEnabled property is set to False."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"WithinRange",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"NxtColorSensor-WithinRange",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Light level has gone within the range. The WithinRange event will not occur if the DetectColor property is set to True or if the WithinRangeEventEnabled property is set to False."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetColor",
          "@kind":"function",
          "@name":"NxtColorSensor-GetColor",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Returns the current detected color, or the color None if the color can not be read or if the DetectColor property is set to False."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetColor",
          "@kind":"function",
          "@name":"Type-NxtColorSensor-GetColor",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Returns the current detected color, or the color None if the color can not be read or if the DetectColor property is set to False."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetLightLevel",
          "@kind":"function",
          "@name":"NxtColorSensor-GetLightLevel",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Returns the current light level as a value between 0 and 1023, or -1 if the light level can not be read or if the DetectColor property is set to True."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetLightLevel",
          "@kind":"function",
          "@name":"Type-NxtColorSensor-GetLightLevel",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Returns the current light level as a value between 0 and 1023, or -1 if the light level can not be read or if the DetectColor property is set to True."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"NxtDirectCommands",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"NxtDirectCommands",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"1"
              },
              {
                "@key":"ya-prop-1",
                "@value":"BluetoothClient/invisible-property/component/The BluetoothClient component that should be used for communication."
              },
              {
                "@key":"ya-method-1",
                "@value":"NxtDirectCommands-DeleteFile"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-NxtDirectCommands-DeleteFile"
              },
              {
                "@key":"ya-method-2",
                "@value":"NxtDirectCommands-DownloadFile"
              },
              {
                "@key":"ya-type-method-2",
                "@value":"Type-NxtDirectCommands-DownloadFile"
              },
              {
                "@key":"ya-method-3",
                "@value":"NxtDirectCommands-GetBatteryLevel"
              },
              {
                "@key":"ya-type-method-3",
                "@value":"Type-NxtDirectCommands-GetBatteryLevel"
              },
              {
                "@key":"ya-method-4",
                "@value":"NxtDirectCommands-GetBrickName"
              },
              {
                "@key":"ya-type-method-4",
                "@value":"Type-NxtDirectCommands-GetBrickName"
              },
              {
                "@key":"ya-method-5",
                "@value":"NxtDirectCommands-GetCurrentProgramName"
              },
              {
                "@key":"ya-type-method-5",
                "@value":"Type-NxtDirectCommands-GetCurrentProgramName"
              },
              {
                "@key":"ya-method-6",
                "@value":"NxtDirectCommands-GetFirmwareVersion"
              },
              {
                "@key":"ya-type-method-6",
                "@value":"Type-NxtDirectCommands-GetFirmwareVersion"
              },
              {
                "@key":"ya-method-7",
                "@value":"NxtDirectCommands-GetInputValues"
              },
              {
                "@key":"ya-type-method-7",
                "@value":"Type-NxtDirectCommands-GetInputValues"
              },
              {
                "@key":"ya-method-8",
                "@value":"NxtDirectCommands-GetOutputState"
              },
              {
                "@key":"ya-type-method-8",
                "@value":"Type-NxtDirectCommands-GetOutputState"
              },
              {
                "@key":"ya-method-9",
                "@value":"NxtDirectCommands-KeepAlive"
              },
              {
                "@key":"ya-type-method-9",
                "@value":"Type-NxtDirectCommands-KeepAlive"
              },
              {
                "@key":"ya-method-10",
                "@value":"NxtDirectCommands-ListFiles"
              },
              {
                "@key":"ya-type-method-10",
                "@value":"Type-NxtDirectCommands-ListFiles"
              },
              {
                "@key":"ya-method-11",
                "@value":"NxtDirectCommands-LsGetStatus"
              },
              {
                "@key":"ya-type-method-11",
                "@value":"Type-NxtDirectCommands-LsGetStatus"
              },
              {
                "@key":"ya-method-12",
                "@value":"NxtDirectCommands-LsRead"
              },
              {
                "@key":"ya-type-method-12",
                "@value":"Type-NxtDirectCommands-LsRead"
              },
              {
                "@key":"ya-method-13",
                "@value":"NxtDirectCommands-LsWrite"
              },
              {
                "@key":"ya-type-method-13",
                "@value":"Type-NxtDirectCommands-LsWrite"
              },
              {
                "@key":"ya-method-14",
                "@value":"NxtDirectCommands-MessageRead"
              },
              {
                "@key":"ya-type-method-14",
                "@value":"Type-NxtDirectCommands-MessageRead"
              },
              {
                "@key":"ya-method-15",
                "@value":"NxtDirectCommands-MessageWrite"
              },
              {
                "@key":"ya-type-method-15",
                "@value":"Type-NxtDirectCommands-MessageWrite"
              },
              {
                "@key":"ya-method-16",
                "@value":"NxtDirectCommands-PlaySoundFile"
              },
              {
                "@key":"ya-type-method-16",
                "@value":"Type-NxtDirectCommands-PlaySoundFile"
              },
              {
                "@key":"ya-method-17",
                "@value":"NxtDirectCommands-PlayTone"
              },
              {
                "@key":"ya-type-method-17",
                "@value":"Type-NxtDirectCommands-PlayTone"
              },
              {
                "@key":"ya-method-18",
                "@value":"NxtDirectCommands-ResetInputScaledValue"
              },
              {
                "@key":"ya-type-method-18",
                "@value":"Type-NxtDirectCommands-ResetInputScaledValue"
              },
              {
                "@key":"ya-method-19",
                "@value":"NxtDirectCommands-ResetMotorPosition"
              },
              {
                "@key":"ya-type-method-19",
                "@value":"Type-NxtDirectCommands-ResetMotorPosition"
              },
              {
                "@key":"ya-method-20",
                "@value":"NxtDirectCommands-SetBrickName"
              },
              {
                "@key":"ya-type-method-20",
                "@value":"Type-NxtDirectCommands-SetBrickName"
              },
              {
                "@key":"ya-method-21",
                "@value":"NxtDirectCommands-SetInputMode"
              },
              {
                "@key":"ya-type-method-21",
                "@value":"Type-NxtDirectCommands-SetInputMode"
              },
              {
                "@key":"ya-method-22",
                "@value":"NxtDirectCommands-SetOutputState"
              },
              {
                "@key":"ya-type-method-22",
                "@value":"Type-NxtDirectCommands-SetOutputState"
              },
              {
                "@key":"ya-method-23",
                "@value":"NxtDirectCommands-StartProgram"
              },
              {
                "@key":"ya-type-method-23",
                "@value":"Type-NxtDirectCommands-StartProgram"
              },
              {
                "@key":"ya-method-24",
                "@value":"NxtDirectCommands-StopProgram"
              },
              {
                "@key":"ya-type-method-24",
                "@value":"Type-NxtDirectCommands-StopProgram"
              },
              {
                "@key":"ya-method-25",
                "@value":"NxtDirectCommands-StopSoundPlayback"
              },
              {
                "@key":"ya-type-method-25",
                "@value":"Type-NxtDirectCommands-StopSoundPlayback"
              }
            ]
          },
          "description":{
            "text":"A component that provides a low-level interface to a LEGO MINDSTORMS NXT robot, with functions to send NXT Direct Commands."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"DeleteFile",
          "@kind":"command",
          "@name":"NxtDirectCommands-DeleteFile",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"fileName"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"fileName/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"fileName/text"
              }
            ]
          },
          "description":{
            "text":"Delete a file on the robot."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"DeleteFile",
          "@kind":"command",
          "@name":"Type-NxtDirectCommands-DeleteFile",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"fileName"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"fileName/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"fileName/text"
              }
            ]
          },
          "description":{
            "text":"Delete a file on the robot."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"DownloadFile",
          "@kind":"command",
          "@name":"NxtDirectCommands-DownloadFile",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"source"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"destination"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"source/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"destination/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"source/text"
              },
              {
                "@key":"socket-allow-4",
                "@value":"destination/text"
              }
            ]
          },
          "description":{
            "text":"Download a file to the robot."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"DownloadFile",
          "@kind":"command",
          "@name":"Type-NxtDirectCommands-DownloadFile",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"source"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"destination"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"source/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"destination/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"source/text"
              },
              {
                "@key":"socket-allow-6",
                "@value":"destination/text"
              }
            ]
          },
          "description":{
            "text":"Download a file to the robot."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetBatteryLevel",
          "@kind":"function",
          "@name":"NxtDirectCommands-GetBatteryLevel",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Get the battery level for the robot. Returns the voltage in millivolts."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetBatteryLevel",
          "@kind":"function",
          "@name":"Type-NxtDirectCommands-GetBatteryLevel",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Get the battery level for the robot. Returns the voltage in millivolts."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetBrickName",
          "@kind":"function",
          "@name":"NxtDirectCommands-GetBrickName",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              }
            ]
          },
          "description":{
            "text":"Get the brick name of the robot."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetBrickName",
          "@kind":"function",
          "@name":"Type-NxtDirectCommands-GetBrickName",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Get the brick name of the robot."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetCurrentProgramName",
          "@kind":"function",
          "@name":"NxtDirectCommands-GetCurrentProgramName",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              }
            ]
          },
          "description":{
            "text":"Get the name of currently running program on the robot."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetCurrentProgramName",
          "@kind":"function",
          "@name":"Type-NxtDirectCommands-GetCurrentProgramName",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Get the name of currently running program on the robot."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetFirmwareVersion",
          "@kind":"function",
          "@name":"NxtDirectCommands-GetFirmwareVersion",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"list"
              }
            ]
          },
          "description":{
            "text":"Get the firmware and protocol version numbers for the robot as a list where the first element is the firmware version number and the second element is the protocol version number."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetFirmwareVersion",
          "@kind":"function",
          "@name":"Type-NxtDirectCommands-GetFirmwareVersion",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"list"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Get the firmware and protocol version numbers for the robot as a list where the first element is the firmware version number and the second element is the protocol version number."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetInputValues",
          "@kind":"function",
          "@name":"NxtDirectCommands-GetInputValues",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"sensorPortLetter"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"list"
              },
              {
                "@key":"socket-allow-1",
                "@value":"sensorPortLetter/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"sensorPortLetter/text"
              }
            ]
          },
          "description":{
            "text":"Reads the values of an input sensor on the robot. Assumes sensor type has been configured via SetInputMode."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetInputValues",
          "@kind":"function",
          "@name":"Type-NxtDirectCommands-GetInputValues",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"sensorPortLetter"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"list"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"sensorPortLetter/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"sensorPortLetter/text"
              }
            ]
          },
          "description":{
            "text":"Reads the values of an input sensor on the robot. Assumes sensor type has been configured via SetInputMode."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetOutputState",
          "@kind":"function",
          "@name":"NxtDirectCommands-GetOutputState",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"motorPortLetter"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"list"
              },
              {
                "@key":"socket-allow-1",
                "@value":"motorPortLetter/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"motorPortLetter/text"
              }
            ]
          },
          "description":{
            "text":"Reads the output state of a motor on the robot."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetOutputState",
          "@kind":"function",
          "@name":"Type-NxtDirectCommands-GetOutputState",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"motorPortLetter"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"list"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"motorPortLetter/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"motorPortLetter/text"
              }
            ]
          },
          "description":{
            "text":"Reads the output state of a motor on the robot."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"KeepAlive",
          "@kind":"function",
          "@name":"NxtDirectCommands-KeepAlive",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Keep Alive. Returns the current sleep time limit in milliseconds."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"KeepAlive",
          "@kind":"function",
          "@name":"Type-NxtDirectCommands-KeepAlive",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Keep Alive. Returns the current sleep time limit in milliseconds."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ListFiles",
          "@kind":"function",
          "@name":"NxtDirectCommands-ListFiles",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"wildcard"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"list"
              },
              {
                "@key":"socket-allow-1",
                "@value":"wildcard/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"wildcard/text"
              }
            ]
          },
          "description":{
            "text":"Returns a list containing the names of matching files found on the robot."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ListFiles",
          "@kind":"function",
          "@name":"Type-NxtDirectCommands-ListFiles",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"wildcard"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"list"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"wildcard/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"wildcard/text"
              }
            ]
          },
          "description":{
            "text":"Returns a list containing the names of matching files found on the robot."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"LsGetStatus",
          "@kind":"function",
          "@name":"NxtDirectCommands-LsGetStatus",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"sensorPortLetter"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"sensorPortLetter/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"sensorPortLetter/text"
              }
            ]
          },
          "description":{
            "text":"Returns the count of available bytes to read."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"LsGetStatus",
          "@kind":"function",
          "@name":"Type-NxtDirectCommands-LsGetStatus",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"sensorPortLetter"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"sensorPortLetter/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"sensorPortLetter/text"
              }
            ]
          },
          "description":{
            "text":"Returns the count of available bytes to read."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"LsRead",
          "@kind":"function",
          "@name":"NxtDirectCommands-LsRead",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"sensorPortLetter"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"list"
              },
              {
                "@key":"socket-allow-1",
                "@value":"sensorPortLetter/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"sensorPortLetter/text"
              }
            ]
          },
          "description":{
            "text":"Reads unsigned low speed data from an input sensor on the robot. Assumes sensor type has been configured via SetInputMode."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"LsRead",
          "@kind":"function",
          "@name":"Type-NxtDirectCommands-LsRead",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"sensorPortLetter"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"list"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"sensorPortLetter/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"sensorPortLetter/text"
              }
            ]
          },
          "description":{
            "text":"Reads unsigned low speed data from an input sensor on the robot. Assumes sensor type has been configured via SetInputMode."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"LsWrite",
          "@kind":"command",
          "@name":"NxtDirectCommands-LsWrite",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"sensorPortLetter"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"list"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"rxDataLength"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"sensorPortLetter/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"list/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"rxDataLength/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"sensorPortLetter/text"
              },
              {
                "@key":"socket-allow-5",
                "@value":"list/list"
              },
              {
                "@key":"socket-allow-6",
                "@value":"rxDataLength/number"
              }
            ]
          },
          "description":{
            "text":"Writes low speed data to an input sensor on the robot. Assumes sensor type has been configured via SetInputMode."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"LsWrite",
          "@kind":"command",
          "@name":"Type-NxtDirectCommands-LsWrite",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"sensorPortLetter"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"list"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"rxDataLength"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"sensorPortLetter/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"list/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"rxDataLength/value"
              },
              {
                "@key":"socket-allow-6",
                "@value":"sensorPortLetter/text"
              },
              {
                "@key":"socket-allow-7",
                "@value":"list/list"
              },
              {
                "@key":"socket-allow-8",
                "@value":"rxDataLength/number"
              }
            ]
          },
          "description":{
            "text":"Writes low speed data to an input sensor on the robot. Assumes sensor type has been configured via SetInputMode."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"MessageRead",
          "@kind":"function",
          "@name":"NxtDirectCommands-MessageRead",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"mailbox"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"mailbox/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"mailbox/number"
              }
            ]
          },
          "description":{
            "text":"Read a message from a mailbox (1-10) on the robot."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"MessageRead",
          "@kind":"function",
          "@name":"Type-NxtDirectCommands-MessageRead",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"mailbox"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"mailbox/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"mailbox/number"
              }
            ]
          },
          "description":{
            "text":"Read a message from a mailbox (1-10) on the robot."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"MessageWrite",
          "@kind":"command",
          "@name":"NxtDirectCommands-MessageWrite",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"mailbox"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"message"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"mailbox/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"message/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"mailbox/number"
              },
              {
                "@key":"socket-allow-4",
                "@value":"message/text"
              }
            ]
          },
          "description":{
            "text":"Write a message to a mailbox (1-10) on the robot."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"MessageWrite",
          "@kind":"command",
          "@name":"Type-NxtDirectCommands-MessageWrite",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"mailbox"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"message"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"mailbox/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"message/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"mailbox/number"
              },
              {
                "@key":"socket-allow-6",
                "@value":"message/text"
              }
            ]
          },
          "description":{
            "text":"Write a message to a mailbox (1-10) on the robot."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"PlaySoundFile",
          "@kind":"command",
          "@name":"NxtDirectCommands-PlaySoundFile",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"fileName"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"fileName/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"fileName/text"
              }
            ]
          },
          "description":{
            "text":"Play a sound file on the robot."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"PlaySoundFile",
          "@kind":"command",
          "@name":"Type-NxtDirectCommands-PlaySoundFile",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"fileName"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"fileName/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"fileName/text"
              }
            ]
          },
          "description":{
            "text":"Play a sound file on the robot."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"PlayTone",
          "@kind":"command",
          "@name":"NxtDirectCommands-PlayTone",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"frequencyHz"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"durationMs"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"frequencyHz/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"durationMs/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"frequencyHz/number"
              },
              {
                "@key":"socket-allow-4",
                "@value":"durationMs/number"
              }
            ]
          },
          "description":{
            "text":"Make the robot play a tone."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"PlayTone",
          "@kind":"command",
          "@name":"Type-NxtDirectCommands-PlayTone",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"frequencyHz"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"durationMs"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"frequencyHz/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"durationMs/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"frequencyHz/number"
              },
              {
                "@key":"socket-allow-6",
                "@value":"durationMs/number"
              }
            ]
          },
          "description":{
            "text":"Make the robot play a tone."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ResetInputScaledValue",
          "@kind":"command",
          "@name":"NxtDirectCommands-ResetInputScaledValue",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"sensorPortLetter"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"sensorPortLetter/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"sensorPortLetter/text"
              }
            ]
          },
          "description":{
            "text":"Reset the scaled value of an input sensor on the robot."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ResetInputScaledValue",
          "@kind":"command",
          "@name":"Type-NxtDirectCommands-ResetInputScaledValue",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"sensorPortLetter"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"sensorPortLetter/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"sensorPortLetter/text"
              }
            ]
          },
          "description":{
            "text":"Reset the scaled value of an input sensor on the robot."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ResetMotorPosition",
          "@kind":"command",
          "@name":"NxtDirectCommands-ResetMotorPosition",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"motorPortLetter"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"relative"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"motorPortLetter/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"relative/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"motorPortLetter/text"
              },
              {
                "@key":"socket-allow-4",
                "@value":"relative/boolean"
              }
            ]
          },
          "description":{
            "text":"Reset motor position."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ResetMotorPosition",
          "@kind":"command",
          "@name":"Type-NxtDirectCommands-ResetMotorPosition",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"motorPortLetter"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"relative"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"motorPortLetter/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"relative/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"motorPortLetter/text"
              },
              {
                "@key":"socket-allow-6",
                "@value":"relative/boolean"
              }
            ]
          },
          "description":{
            "text":"Reset motor position."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SetBrickName",
          "@kind":"command",
          "@name":"NxtDirectCommands-SetBrickName",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"name"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"name/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"name/text"
              }
            ]
          },
          "description":{
            "text":"Set the brick name of the robot."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SetBrickName",
          "@kind":"command",
          "@name":"Type-NxtDirectCommands-SetBrickName",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"name"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"name/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"name/text"
              }
            ]
          },
          "description":{
            "text":"Set the brick name of the robot."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SetInputMode",
          "@kind":"command",
          "@name":"NxtDirectCommands-SetInputMode",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"sensorPortLetter"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"sensorType"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"sensorMode"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"sensorPortLetter/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"sensorType/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"sensorMode/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"sensorPortLetter/text"
              },
              {
                "@key":"socket-allow-5",
                "@value":"sensorType/number"
              },
              {
                "@key":"socket-allow-6",
                "@value":"sensorMode/number"
              }
            ]
          },
          "description":{
            "text":"Configure an input sensor on the robot."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SetInputMode",
          "@kind":"command",
          "@name":"Type-NxtDirectCommands-SetInputMode",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"sensorPortLetter"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"sensorType"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"sensorMode"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"sensorPortLetter/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"sensorType/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"sensorMode/value"
              },
              {
                "@key":"socket-allow-6",
                "@value":"sensorPortLetter/text"
              },
              {
                "@key":"socket-allow-7",
                "@value":"sensorType/number"
              },
              {
                "@key":"socket-allow-8",
                "@value":"sensorMode/number"
              }
            ]
          },
          "description":{
            "text":"Configure an input sensor on the robot."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SetOutputState",
          "@kind":"command",
          "@name":"NxtDirectCommands-SetOutputState",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"motorPortLetter"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"power"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"mode"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"regulationMode"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"turnRatio"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"runState"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"tachoLimit"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"motorPortLetter/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"power/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"mode/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"regulationMode/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"turnRatio/value"
              },
              {
                "@key":"socket-allow-6",
                "@value":"runState/value"
              },
              {
                "@key":"socket-allow-7",
                "@value":"tachoLimit/value"
              },
              {
                "@key":"socket-allow-8",
                "@value":"motorPortLetter/text"
              },
              {
                "@key":"socket-allow-9",
                "@value":"power/number"
              },
              {
                "@key":"socket-allow-10",
                "@value":"mode/number"
              },
              {
                "@key":"socket-allow-11",
                "@value":"regulationMode/number"
              },
              {
                "@key":"socket-allow-12",
                "@value":"turnRatio/number"
              },
              {
                "@key":"socket-allow-13",
                "@value":"runState/number"
              },
              {
                "@key":"socket-allow-14",
                "@value":"tachoLimit/number"
              }
            ]
          },
          "description":{
            "text":"Sets the output state of a motor on the robot."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SetOutputState",
          "@kind":"command",
          "@name":"Type-NxtDirectCommands-SetOutputState",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"motorPortLetter"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"power"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"mode"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"regulationMode"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"turnRatio"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"runState"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"tachoLimit"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"motorPortLetter/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"power/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"mode/value"
              },
              {
                "@key":"socket-allow-6",
                "@value":"regulationMode/value"
              },
              {
                "@key":"socket-allow-7",
                "@value":"turnRatio/value"
              },
              {
                "@key":"socket-allow-8",
                "@value":"runState/value"
              },
              {
                "@key":"socket-allow-9",
                "@value":"tachoLimit/value"
              },
              {
                "@key":"socket-allow-10",
                "@value":"motorPortLetter/text"
              },
              {
                "@key":"socket-allow-11",
                "@value":"power/number"
              },
              {
                "@key":"socket-allow-12",
                "@value":"mode/number"
              },
              {
                "@key":"socket-allow-13",
                "@value":"regulationMode/number"
              },
              {
                "@key":"socket-allow-14",
                "@value":"turnRatio/number"
              },
              {
                "@key":"socket-allow-15",
                "@value":"runState/number"
              },
              {
                "@key":"socket-allow-16",
                "@value":"tachoLimit/number"
              }
            ]
          },
          "description":{
            "text":"Sets the output state of a motor on the robot."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"StartProgram",
          "@kind":"command",
          "@name":"NxtDirectCommands-StartProgram",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"programName"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"programName/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"programName/text"
              }
            ]
          },
          "description":{
            "text":"Start execution of a previously downloaded program on the robot."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"StartProgram",
          "@kind":"command",
          "@name":"Type-NxtDirectCommands-StartProgram",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"programName"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"programName/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"programName/text"
              }
            ]
          },
          "description":{
            "text":"Start execution of a previously downloaded program on the robot."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"StopProgram",
          "@kind":"command",
          "@name":"NxtDirectCommands-StopProgram",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Stop execution of the currently running program on the robot."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"StopProgram",
          "@kind":"command",
          "@name":"Type-NxtDirectCommands-StopProgram",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Stop execution of the currently running program on the robot."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"StopSoundPlayback",
          "@kind":"command",
          "@name":"NxtDirectCommands-StopSoundPlayback",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Stop sound playback."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"StopSoundPlayback",
          "@kind":"command",
          "@name":"Type-NxtDirectCommands-StopSoundPlayback",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Stop sound playback."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"NxtDrive",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"NxtDrive",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"1"
              },
              {
                "@key":"ya-prop-1",
                "@value":"BluetoothClient/invisible-property/component/The BluetoothClient component that should be used for communication."
              },
              {
                "@key":"ya-prop-2",
                "@value":"DriveMotors/invisible-property/text/The motor ports that are used for driving: the left wheel's motor port followed by the right wheel's motor port."
              },
              {
                "@key":"ya-prop-3",
                "@value":"StopBeforeDisconnect/read-write-property/boolean/Whether to stop the drive motors before disconnecting."
              },
              {
                "@key":"ya-prop-4",
                "@value":"WheelDiameter/invisible-property/number/The diameter of the wheels used for driving."
              },
              {
                "@key":"ya-method-1",
                "@value":"NxtDrive-MoveBackward"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-NxtDrive-MoveBackward"
              },
              {
                "@key":"ya-method-2",
                "@value":"NxtDrive-MoveBackwardIndefinitely"
              },
              {
                "@key":"ya-type-method-2",
                "@value":"Type-NxtDrive-MoveBackwardIndefinitely"
              },
              {
                "@key":"ya-method-3",
                "@value":"NxtDrive-MoveForward"
              },
              {
                "@key":"ya-type-method-3",
                "@value":"Type-NxtDrive-MoveForward"
              },
              {
                "@key":"ya-method-4",
                "@value":"NxtDrive-MoveForwardIndefinitely"
              },
              {
                "@key":"ya-type-method-4",
                "@value":"Type-NxtDrive-MoveForwardIndefinitely"
              },
              {
                "@key":"ya-method-5",
                "@value":"NxtDrive-Stop"
              },
              {
                "@key":"ya-type-method-5",
                "@value":"Type-NxtDrive-Stop"
              },
              {
                "@key":"ya-method-6",
                "@value":"NxtDrive-TurnClockwiseIndefinitely"
              },
              {
                "@key":"ya-type-method-6",
                "@value":"Type-NxtDrive-TurnClockwiseIndefinitely"
              },
              {
                "@key":"ya-method-7",
                "@value":"NxtDrive-TurnCounterClockwiseIndefinitely"
              },
              {
                "@key":"ya-type-method-7",
                "@value":"Type-NxtDrive-TurnCounterClockwiseIndefinitely"
              }
            ]
          },
          "description":{
            "text":"A component that provides a high-level interface to a LEGO MINDSTORMS NXT robot, with functions that can move and turn the robot."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"MoveBackward",
          "@kind":"command",
          "@name":"NxtDrive-MoveBackward",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"power"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"distance"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"power/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"distance/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"power/number"
              },
              {
                "@key":"socket-allow-4",
                "@value":"distance/number"
              }
            ]
          },
          "description":{
            "text":"Move the robot backward the given distance, with the specified percentage of maximum power, by powering both drive motors backward."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"MoveBackward",
          "@kind":"command",
          "@name":"Type-NxtDrive-MoveBackward",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"power"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"distance"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"power/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"distance/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"power/number"
              },
              {
                "@key":"socket-allow-6",
                "@value":"distance/number"
              }
            ]
          },
          "description":{
            "text":"Move the robot backward the given distance, with the specified percentage of maximum power, by powering both drive motors backward."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"MoveBackwardIndefinitely",
          "@kind":"command",
          "@name":"NxtDrive-MoveBackwardIndefinitely",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"power"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"power/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"power/number"
              }
            ]
          },
          "description":{
            "text":"Move the robot backward indefinitely, with the specified percentage of maximum power, by powering both drive motors backward."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"MoveBackwardIndefinitely",
          "@kind":"command",
          "@name":"Type-NxtDrive-MoveBackwardIndefinitely",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"power"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"power/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"power/number"
              }
            ]
          },
          "description":{
            "text":"Move the robot backward indefinitely, with the specified percentage of maximum power, by powering both drive motors backward."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"MoveForward",
          "@kind":"command",
          "@name":"NxtDrive-MoveForward",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"power"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"distance"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"power/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"distance/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"power/number"
              },
              {
                "@key":"socket-allow-4",
                "@value":"distance/number"
              }
            ]
          },
          "description":{
            "text":"Move the robot forward the given distance, with the specified percentage of maximum power, by powering both drive motors forward."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"MoveForward",
          "@kind":"command",
          "@name":"Type-NxtDrive-MoveForward",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"power"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"distance"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"power/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"distance/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"power/number"
              },
              {
                "@key":"socket-allow-6",
                "@value":"distance/number"
              }
            ]
          },
          "description":{
            "text":"Move the robot forward the given distance, with the specified percentage of maximum power, by powering both drive motors forward."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"MoveForwardIndefinitely",
          "@kind":"command",
          "@name":"NxtDrive-MoveForwardIndefinitely",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"power"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"power/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"power/number"
              }
            ]
          },
          "description":{
            "text":"Move the robot forward indefinitely, with the specified percentage of maximum power, by powering both drive motors forward."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"MoveForwardIndefinitely",
          "@kind":"command",
          "@name":"Type-NxtDrive-MoveForwardIndefinitely",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"power"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"power/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"power/number"
              }
            ]
          },
          "description":{
            "text":"Move the robot forward indefinitely, with the specified percentage of maximum power, by powering both drive motors forward."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Stop",
          "@kind":"command",
          "@name":"NxtDrive-Stop",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Stop the drive motors of the robot."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Stop",
          "@kind":"command",
          "@name":"Type-NxtDrive-Stop",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Stop the drive motors of the robot."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"TurnClockwiseIndefinitely",
          "@kind":"command",
          "@name":"NxtDrive-TurnClockwiseIndefinitely",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"power"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"power/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"power/number"
              }
            ]
          },
          "description":{
            "text":"Turn the robot clockwise indefinitely, with the specified percentage of maximum power, by powering the left drive motor forward and the right drive motor backward."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"TurnClockwiseIndefinitely",
          "@kind":"command",
          "@name":"Type-NxtDrive-TurnClockwiseIndefinitely",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"power"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"power/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"power/number"
              }
            ]
          },
          "description":{
            "text":"Turn the robot clockwise indefinitely, with the specified percentage of maximum power, by powering the left drive motor forward and the right drive motor backward."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"TurnCounterClockwiseIndefinitely",
          "@kind":"command",
          "@name":"NxtDrive-TurnCounterClockwiseIndefinitely",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"power"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"power/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"power/number"
              }
            ]
          },
          "description":{
            "text":"Turn the robot counterclockwise indefinitely, with the specified percentage of maximum power, by powering the right drive motor forward and the left drive motor backward."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"TurnCounterClockwiseIndefinitely",
          "@kind":"command",
          "@name":"Type-NxtDrive-TurnCounterClockwiseIndefinitely",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"power"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"power/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"power/number"
              }
            ]
          },
          "description":{
            "text":"Turn the robot counterclockwise indefinitely, with the specified percentage of maximum power, by powering the right drive motor forward and the left drive motor backward."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"NxtLightSensor",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"NxtLightSensor",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"1"
              },
              {
                "@key":"ya-event-1",
                "@value":"NxtLightSensor-AboveRange"
              },
              {
                "@key":"ya-event-2",
                "@value":"NxtLightSensor-BelowRange"
              },
              {
                "@key":"ya-event-3",
                "@value":"NxtLightSensor-WithinRange"
              },
              {
                "@key":"ya-prop-1",
                "@value":"AboveRangeEventEnabled/read-write-property/boolean/Whether the AboveRange event should fire when the light level goes above the TopOfRange."
              },
              {
                "@key":"ya-prop-2",
                "@value":"BelowRangeEventEnabled/read-write-property/boolean/Whether the BelowRange event should fire when the light level goes below the BottomOfRange."
              },
              {
                "@key":"ya-prop-3",
                "@value":"BluetoothClient/invisible-property/component/The BluetoothClient component that should be used for communication."
              },
              {
                "@key":"ya-prop-4",
                "@value":"BottomOfRange/read-write-property/number/The bottom of the range used for the BelowRange, WithinRange, and AboveRange events."
              },
              {
                "@key":"ya-prop-5",
                "@value":"GenerateLight/read-write-property/boolean/Whether the light sensor should generate light."
              },
              {
                "@key":"ya-prop-6",
                "@value":"SensorPort/invisible-property/text/The sensor port that the sensor is connected to."
              },
              {
                "@key":"ya-prop-7",
                "@value":"TopOfRange/read-write-property/number/The top of the range used for the BelowRange, WithinRange, and AboveRange events."
              },
              {
                "@key":"ya-prop-8",
                "@value":"WithinRangeEventEnabled/read-write-property/boolean/Whether the WithinRange event should fire when the light level goes between the BottomOfRange and the TopOfRange."
              },
              {
                "@key":"ya-method-1",
                "@value":"NxtLightSensor-GetLightLevel"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-NxtLightSensor-GetLightLevel"
              }
            ]
          },
          "description":{
            "text":"A component that provides a high-level interface to a light sensor on a LEGO MINDSTORMS NXT robot."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"AboveRange",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"NxtLightSensor-AboveRange",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Light level has gone above the range."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"BelowRange",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"NxtLightSensor-BelowRange",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Light level has gone below the range."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"WithinRange",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"NxtLightSensor-WithinRange",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Light level has gone within the range."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetLightLevel",
          "@kind":"function",
          "@name":"NxtLightSensor-GetLightLevel",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Returns the current light level as a value between 0 and 1023, or -1 if the light level can not be read."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetLightLevel",
          "@kind":"function",
          "@name":"Type-NxtLightSensor-GetLightLevel",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Returns the current light level as a value between 0 and 1023, or -1 if the light level can not be read."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"NxtSoundSensor",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"NxtSoundSensor",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"1"
              },
              {
                "@key":"ya-event-1",
                "@value":"NxtSoundSensor-AboveRange"
              },
              {
                "@key":"ya-event-2",
                "@value":"NxtSoundSensor-BelowRange"
              },
              {
                "@key":"ya-event-3",
                "@value":"NxtSoundSensor-WithinRange"
              },
              {
                "@key":"ya-prop-1",
                "@value":"AboveRangeEventEnabled/read-write-property/boolean/Whether the AboveRange event should fire when the sound level goes above the TopOfRange."
              },
              {
                "@key":"ya-prop-2",
                "@value":"BelowRangeEventEnabled/read-write-property/boolean/Whether the BelowRange event should fire when the sound level goes below the BottomOfRange."
              },
              {
                "@key":"ya-prop-3",
                "@value":"BluetoothClient/invisible-property/component/The BluetoothClient component that should be used for communication."
              },
              {
                "@key":"ya-prop-4",
                "@value":"BottomOfRange/read-write-property/number/The bottom of the range used for the BelowRange, WithinRange, and AboveRange events."
              },
              {
                "@key":"ya-prop-5",
                "@value":"SensorPort/invisible-property/text/The sensor port that the sensor is connected to."
              },
              {
                "@key":"ya-prop-6",
                "@value":"TopOfRange/read-write-property/number/The top of the range used for the BelowRange, WithinRange, and AboveRange events."
              },
              {
                "@key":"ya-prop-7",
                "@value":"WithinRangeEventEnabled/read-write-property/boolean/Whether the WithinRange event should fire when the sound level goes between the BottomOfRange and the TopOfRange."
              },
              {
                "@key":"ya-method-1",
                "@value":"NxtSoundSensor-GetSoundLevel"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-NxtSoundSensor-GetSoundLevel"
              }
            ]
          },
          "description":{
            "text":"A component that provides a high-level interface to a sound sensor on a LEGO MINDSTORMS NXT robot."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"AboveRange",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"NxtSoundSensor-AboveRange",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Sound level has gone above the range."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"BelowRange",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"NxtSoundSensor-BelowRange",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Sound level has gone below the range."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"WithinRange",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"NxtSoundSensor-WithinRange",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Sound level has gone within the range."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetSoundLevel",
          "@kind":"function",
          "@name":"NxtSoundSensor-GetSoundLevel",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Returns the current sound level as a value between 0 and 1023, or -1 if the sound level can not be read."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetSoundLevel",
          "@kind":"function",
          "@name":"Type-NxtSoundSensor-GetSoundLevel",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Returns the current sound level as a value between 0 and 1023, or -1 if the sound level can not be read."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"NxtTouchSensor",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"NxtTouchSensor",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"1"
              },
              {
                "@key":"ya-event-1",
                "@value":"NxtTouchSensor-Pressed"
              },
              {
                "@key":"ya-event-2",
                "@value":"NxtTouchSensor-Released"
              },
              {
                "@key":"ya-prop-1",
                "@value":"BluetoothClient/invisible-property/component/The BluetoothClient component that should be used for communication."
              },
              {
                "@key":"ya-prop-2",
                "@value":"PressedEventEnabled/read-write-property/boolean/Whether the Pressed event should fire when the touch sensor is pressed."
              },
              {
                "@key":"ya-prop-3",
                "@value":"ReleasedEventEnabled/read-write-property/boolean/Whether the Released event should fire when the touch sensor is released."
              },
              {
                "@key":"ya-prop-4",
                "@value":"SensorPort/invisible-property/text/The sensor port that the sensor is connected to."
              },
              {
                "@key":"ya-method-1",
                "@value":"NxtTouchSensor-IsPressed"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-NxtTouchSensor-IsPressed"
              }
            ]
          },
          "description":{
            "text":"A component that provides a high-level interface to a touch sensor on a LEGO MINDSTORMS NXT robot."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"Pressed",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"NxtTouchSensor-Pressed",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Touch sensor has been pressed."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"Released",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"NxtTouchSensor-Released",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Touch sensor has been released."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"IsPressed",
          "@kind":"function",
          "@name":"NxtTouchSensor-IsPressed",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              }
            ]
          },
          "description":{
            "text":"Returns true if the touch sensor is pressed."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"IsPressed",
          "@kind":"function",
          "@name":"Type-NxtTouchSensor-IsPressed",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Returns true if the touch sensor is pressed."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"NxtUltrasonicSensor",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"NxtUltrasonicSensor",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"1"
              },
              {
                "@key":"ya-event-1",
                "@value":"NxtUltrasonicSensor-AboveRange"
              },
              {
                "@key":"ya-event-2",
                "@value":"NxtUltrasonicSensor-BelowRange"
              },
              {
                "@key":"ya-event-3",
                "@value":"NxtUltrasonicSensor-WithinRange"
              },
              {
                "@key":"ya-prop-1",
                "@value":"AboveRangeEventEnabled/read-write-property/boolean/Whether the AboveRange event should fire when the distance goes above the TopOfRange."
              },
              {
                "@key":"ya-prop-2",
                "@value":"BelowRangeEventEnabled/read-write-property/boolean/Whether the BelowRange event should fire when the distance goes below the BottomOfRange."
              },
              {
                "@key":"ya-prop-3",
                "@value":"BluetoothClient/invisible-property/component/The BluetoothClient component that should be used for communication."
              },
              {
                "@key":"ya-prop-4",
                "@value":"BottomOfRange/read-write-property/number/The bottom of the range used for the BelowRange, WithinRange, and AboveRange events."
              },
              {
                "@key":"ya-prop-5",
                "@value":"SensorPort/invisible-property/text/The sensor port that the sensor is connected to."
              },
              {
                "@key":"ya-prop-6",
                "@value":"TopOfRange/read-write-property/number/The top of the range used for the BelowRange, WithinRange, and AboveRange events."
              },
              {
                "@key":"ya-prop-7",
                "@value":"WithinRangeEventEnabled/read-write-property/boolean/Whether the WithinRange event should fire when the distance goes between the BottomOfRange and the TopOfRange."
              },
              {
                "@key":"ya-method-1",
                "@value":"NxtUltrasonicSensor-GetDistance"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-NxtUltrasonicSensor-GetDistance"
              }
            ]
          },
          "description":{
            "text":"A component that provides a high-level interface to an ultrasonic sensor on a LEGO MINDSTORMS NXT robot."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"AboveRange",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"NxtUltrasonicSensor-AboveRange",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Distance has gone above the range."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"BelowRange",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"NxtUltrasonicSensor-BelowRange",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Distance has gone below the range."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"WithinRange",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"NxtUltrasonicSensor-WithinRange",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Distance has gone within the range."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetDistance",
          "@kind":"function",
          "@name":"NxtUltrasonicSensor-GetDistance",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Returns the current distance in centimeters as a value between 0 and 254, or -1 if the distance can not be read."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetDistance",
          "@kind":"function",
          "@name":"Type-NxtUltrasonicSensor-GetDistance",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Returns the current distance in centimeters as a value between 0 and 254, or -1 if the distance can not be read."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"OrientationSensor",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"OrientationSensor",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"2"
              },
              {
                "@key":"ya-event-1",
                "@value":"OrientationSensor-OrientationChanged"
              },
              {
                "@key":"ya-prop-1",
                "@value":"Angle/read-only-property/number/"
              },
              {
                "@key":"ya-prop-2",
                "@value":"Available/read-only-property/boolean/"
              },
              {
                "@key":"ya-prop-3",
                "@value":"Azimuth/read-only-property/number/"
              },
              {
                "@key":"ya-prop-4",
                "@value":"Enabled/read-write-property/boolean/"
              },
              {
                "@key":"ya-prop-5",
                "@value":"Magnitude/read-only-property/number/"
              },
              {
                "@key":"ya-prop-6",
                "@value":"Pitch/read-only-property/number/"
              },
              {
                "@key":"ya-prop-7",
                "@value":"Roll/read-only-property/number/"
              }
            ]
          },
          "description":{
            "text":"Non-visible component providing information about the device's physical orientation in three dimensions: - Roll: 0 degrees when the device is level, increases to 90 degrees as the device is tilted up on its left side, and decreases to -90 degrees when the device is tilted up on its right side. - Pitch: 0 degrees when the device is level, up to 90 degrees as the device is tilted so its top is pointing down, up to 180 degrees as it gets turned over. Similarly, as the device is tilted so its bottom points down, pitch decreases to -90 degrees, then further decreases to -180 degrees as it gets turned all the way over. - Azimuth: 0 degrees when the top of the device is pointing north, 90 degrees when it is pointing east, 180 degrees when it is pointing south, 270 degrees when it is pointing west, etc. These measurements assume that the device itself is not moving."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"OrientationChanged",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"OrientationSensor-OrientationChanged",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"azimuth",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"azimuth"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"pitch",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"pitch"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"roll",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"roll"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"azimuth/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"pitch/argument"
              },
              {
                "@key":"socket-allow-3",
                "@value":"roll/argument"
              }
            ]
          },
          "description":{
            "text":"Default OrientationChanged event handler. This event is signalled when the device's orientation has changed. It reports the new values of azimuth, pich, and roll, and it also sets the Azimuth, Pitch, and roll properties. Azimuth is the compass heading in degrees, pitch indicates how the device is tilted from top to bottom, and roll indicates how much the device is tilted from side to side."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"PasswordTextBox",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"PasswordTextBox",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"2"
              },
              {
                "@key":"ya-event-1",
                "@value":"PasswordTextBox-GotFocus"
              },
              {
                "@key":"ya-event-2",
                "@value":"PasswordTextBox-LostFocus"
              },
              {
                "@key":"ya-prop-1",
                "@value":"BackgroundColor/read-write-property/number/The background color of the input box. You can choose a color by name in the Designer or in the Blocks Editor. The default background color is 'default' (shaded 3-D look)."
              },
              {
                "@key":"ya-prop-2",
                "@value":"Column/invisible-property/number/"
              },
              {
                "@key":"ya-prop-3",
                "@value":"Enabled/read-write-property/boolean/Whether the user can enter text into this input box. By default, this is true."
              },
              {
                "@key":"ya-prop-4",
                "@value":"FontBold/invisible-property/boolean/Whether the font for the text should be bold. By default, it is not."
              },
              {
                "@key":"ya-prop-5",
                "@value":"FontItalic/invisible-property/boolean/Whether the text should appear in italics. By default, it does not."
              },
              {
                "@key":"ya-prop-6",
                "@value":"FontSize/read-write-property/number/The font size for the text. By default, it is 14.0 points."
              },
              {
                "@key":"ya-prop-7",
                "@value":"FontTypeface/invisible-property/number/The font for the text. The value can be changed in the Designer."
              },
              {
                "@key":"ya-prop-8",
                "@value":"Height/read-write-property/number/"
              },
              {
                "@key":"ya-prop-9",
                "@value":"Hint/read-write-property/text/Text that should appear faintly in the input box to provide a hint as to what the user should enter. This can only be seen if the Text property is empty."
              },
              {
                "@key":"ya-prop-10",
                "@value":"Row/invisible-property/number/"
              },
              {
                "@key":"ya-prop-11",
                "@value":"Text/read-write-property/text/The text in the input box, which can be set by the programmer in the Designer or Blocks Editor, or it can be entered by the user (unless the Enabled property is false)."
              },
              {
                "@key":"ya-prop-12",
                "@value":"TextAlignment/invisible-property/number/Whether the text should be left justified, centered, or right justified. By default, text is left justified."
              },
              {
                "@key":"ya-prop-13",
                "@value":"TextColor/read-write-property/number/The color for the text. You can choose a color by name in the Designer or in the Blocks Editor. The default text color is black."
              },
              {
                "@key":"ya-prop-14",
                "@value":"Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."
              },
              {
                "@key":"ya-prop-15",
                "@value":"Width/read-write-property/number/"
              }
            ]
          },
          "description":{
            "text":"A box for entering passwords. This is the same as the ordinary TextBox component except this does not display the characters typed by the user. The value of the text in the box can be found or set through the Text property. If blank, the Hint property, which appears as faint text in the box, can provide the user with guidance as to what to type. Text boxes are usually used with the Button component, with the user clicking on the button when text entry is complete."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"GotFocus",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"PasswordTextBox-GotFocus",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Event raised when this component is selected for input, such as by the user touching it."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"LostFocus",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"PasswordTextBox-LostFocus",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Event raised when this component is no longer selected for input, such as if the user touches a different text box."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"Pedometer",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"Pedometer",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"1"
              },
              {
                "@key":"ya-event-1",
                "@value":"Pedometer-CalibrationFailed"
              },
              {
                "@key":"ya-event-2",
                "@value":"Pedometer-GPSAvailable"
              },
              {
                "@key":"ya-event-3",
                "@value":"Pedometer-GPSLost"
              },
              {
                "@key":"ya-event-4",
                "@value":"Pedometer-SimpleStep"
              },
              {
                "@key":"ya-event-5",
                "@value":"Pedometer-StartedMoving"
              },
              {
                "@key":"ya-event-6",
                "@value":"Pedometer-StoppedMoving"
              },
              {
                "@key":"ya-event-7",
                "@value":"Pedometer-WalkStep"
              },
              {
                "@key":"ya-prop-1",
                "@value":"CalibrateStrideLength/read-write-property/boolean/"
              },
              {
                "@key":"ya-prop-2",
                "@value":"Distance/read-only-property/number/"
              },
              {
                "@key":"ya-prop-3",
                "@value":"ElapsedTime/read-only-property/number/"
              },
              {
                "@key":"ya-prop-4",
                "@value":"Moving/read-only-property/boolean/"
              },
              {
                "@key":"ya-prop-5",
                "@value":"StopDetectionTimeout/read-write-property/number/"
              },
              {
                "@key":"ya-prop-6",
                "@value":"StrideLength/read-write-property/number/"
              },
              {
                "@key":"ya-prop-7",
                "@value":"UseGPS/read-write-property/boolean/"
              },
              {
                "@key":"ya-method-1",
                "@value":"Pedometer-Pause"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-Pedometer-Pause"
              },
              {
                "@key":"ya-method-2",
                "@value":"Pedometer-Reset"
              },
              {
                "@key":"ya-type-method-2",
                "@value":"Type-Pedometer-Reset"
              },
              {
                "@key":"ya-method-3",
                "@value":"Pedometer-Resume"
              },
              {
                "@key":"ya-type-method-3",
                "@value":"Type-Pedometer-Resume"
              },
              {
                "@key":"ya-method-4",
                "@value":"Pedometer-Save"
              },
              {
                "@key":"ya-type-method-4",
                "@value":"Type-Pedometer-Save"
              },
              {
                "@key":"ya-method-5",
                "@value":"Pedometer-Start"
              },
              {
                "@key":"ya-type-method-5",
                "@value":"Type-Pedometer-Start"
              },
              {
                "@key":"ya-method-6",
                "@value":"Pedometer-Stop"
              },
              {
                "@key":"ya-type-method-6",
                "@value":"Type-Pedometer-Stop"
              }
            ]
          },
          "description":{
            "text":"Component that can count steps."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"CalibrationFailed",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Pedometer-CalibrationFailed",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Indicates that the calibration has failed. This could happen is the GPS is not active, or if the client has set UseGps to false."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"GPSAvailable",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Pedometer-GPSAvailable",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Indicates that the GPS is now available to use for distance measurement, and that calibration is now possible."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"GPSLost",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Pedometer-GPSLost",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Indicates that the GPS signal is lost."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"SimpleStep",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Pedometer-SimpleStep",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"simpleSteps",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"simpleSteps"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"distance",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"distance"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"simpleSteps/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"distance/argument"
              }
            ]
          },
          "description":{
            "text":"This event is run when a raw step is detected"
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"StartedMoving",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Pedometer-StartedMoving",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Indicates that the device is moving."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"StoppedMoving",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Pedometer-StoppedMoving",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Indicates that the device has stopped."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"WalkStep",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Pedometer-WalkStep",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"walkSteps",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"walkSteps"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"distance",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"distance"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"walkSteps/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"distance/argument"
              }
            ]
          },
          "description":{
            "text":"This event is run when a walking step is detected"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Pause",
          "@kind":"command",
          "@name":"Pedometer-Pause",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Pauses the counting of steps."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Pause",
          "@kind":"command",
          "@name":"Type-Pedometer-Pause",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Pauses the counting of steps."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Reset",
          "@kind":"command",
          "@name":"Pedometer-Reset",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Resets the step count, distance, and clock."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Reset",
          "@kind":"command",
          "@name":"Type-Pedometer-Reset",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Resets the step count, distance, and clock."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Resume",
          "@kind":"command",
          "@name":"Pedometer-Resume",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Resumes the counting of steps."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Resume",
          "@kind":"command",
          "@name":"Type-Pedometer-Resume",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Resumes the counting of steps."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Save",
          "@kind":"command",
          "@name":"Pedometer-Save",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Saves the pedometer state to the phone"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Save",
          "@kind":"command",
          "@name":"Type-Pedometer-Save",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Saves the pedometer state to the phone"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Start",
          "@kind":"command",
          "@name":"Pedometer-Start",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Starts the pedometer."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Start",
          "@kind":"command",
          "@name":"Type-Pedometer-Start",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Starts the pedometer."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Stop",
          "@kind":"command",
          "@name":"Pedometer-Stop",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Stops the pedometer."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Stop",
          "@kind":"command",
          "@name":"Type-Pedometer-Stop",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Stops the pedometer."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"PhoneCall",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"PhoneCall",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"1"
              },
              {
                "@key":"ya-prop-1",
                "@value":"PhoneNumber/read-write-property/text/"
              },
              {
                "@key":"ya-method-1",
                "@value":"PhoneCall-MakePhoneCall"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-PhoneCall-MakePhoneCall"
              }
            ]
          },
          "description":{
            "text":"A non-visible component that makes a phone call to the number specified in the PhoneNumber property, which can be set either in the Designer or Blocks Editor. The component has a MakePhoneCall method, enabling the program to launch a phone call. Often, this component is used with the ContactPicker component, which lets the user select a contact from the ones stored on the phone and sets the PhoneNumber property to the contact's phone number. To directly specify the phone number (e.g., 650-555-1212), set the PhoneNumber property to a Text with the specified digits (e.g., \"6505551212\"). Dashes, dots, and parentheses may be included (e.g., \"(650)-555-1212\") but will be ignored; spaces may not be included."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"MakePhoneCall",
          "@kind":"command",
          "@name":"PhoneCall-MakePhoneCall",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Makes a phone call using the number in the PhoneNumber property."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"MakePhoneCall",
          "@kind":"command",
          "@name":"Type-PhoneCall-MakePhoneCall",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Makes a phone call using the number in the PhoneNumber property."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"PhoneNumberPicker",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"PhoneNumberPicker",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"4"
              },
              {
                "@key":"ya-event-1",
                "@value":"PhoneNumberPicker-AfterPicking"
              },
              {
                "@key":"ya-event-2",
                "@value":"PhoneNumberPicker-BeforePicking"
              },
              {
                "@key":"ya-event-3",
                "@value":"PhoneNumberPicker-GotFocus"
              },
              {
                "@key":"ya-event-4",
                "@value":"PhoneNumberPicker-LostFocus"
              },
              {
                "@key":"ya-prop-1",
                "@value":"BackgroundColor/read-write-property/number/Returns the button's background color"
              },
              {
                "@key":"ya-prop-2",
                "@value":"Column/invisible-property/number/"
              },
              {
                "@key":"ya-prop-3",
                "@value":"ContactName/read-only-property/text/"
              },
              {
                "@key":"ya-prop-4",
                "@value":"EmailAddress/read-only-property/text/"
              },
              {
                "@key":"ya-prop-5",
                "@value":"Enabled/read-write-property/boolean/"
              },
              {
                "@key":"ya-prop-6",
                "@value":"FontBold/invisible-property/boolean/"
              },
              {
                "@key":"ya-prop-7",
                "@value":"FontItalic/invisible-property/boolean/"
              },
              {
                "@key":"ya-prop-8",
                "@value":"FontSize/invisible-property/number/"
              },
              {
                "@key":"ya-prop-9",
                "@value":"FontTypeface/invisible-property/number/"
              },
              {
                "@key":"ya-prop-10",
                "@value":"Height/read-write-property/number/"
              },
              {
                "@key":"ya-prop-11",
                "@value":"Image/read-write-property/text/Specifies the path of the button's image. If there is both an Image and a BackgroundColor, only the Image will be visible."
              },
              {
                "@key":"ya-prop-12",
                "@value":"PhoneNumber/read-only-property/text/"
              },
              {
                "@key":"ya-prop-13",
                "@value":"Picture/read-only-property/text/"
              },
              {
                "@key":"ya-prop-14",
                "@value":"Row/invisible-property/number/"
              },
              {
                "@key":"ya-prop-15",
                "@value":"Shape/invisible-property/number/Specifies the button's shape (default, rounded, rectangular, oval). The shape will not be visible if an Image is being displayed."
              },
              {
                "@key":"ya-prop-16",
                "@value":"ShowFeedback/read-write-property/boolean/Specifies if a visual feedback should be shown for a button that as an image as background."
              },
              {
                "@key":"ya-prop-17",
                "@value":"Text/read-write-property/text/"
              },
              {
                "@key":"ya-prop-18",
                "@value":"TextAlignment/invisible-property/number/"
              },
              {
                "@key":"ya-prop-19",
                "@value":"TextColor/read-write-property/number/"
              },
              {
                "@key":"ya-prop-20",
                "@value":"Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."
              },
              {
                "@key":"ya-prop-21",
                "@value":"Width/read-write-property/number/"
              },
              {
                "@key":"ya-method-1",
                "@value":"PhoneNumberPicker-Open"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-PhoneNumberPicker-Open"
              }
            ]
          },
          "description":{
            "text":"A button that, when clicked on, displays a list of the contacts' phone numbers to choose among. After the user has made a selection, the following properties will be set to information about the chosen contact: - ContactName: the contact's name - PhoneNumber: the contact's phone number - EmailAddress: the contact's email address - Picture: the name of the file containing the contact's image, which can be used as a Picture property value for the Image or ImageSprite component. Other properties affect the appearance of the button (TextAlignment, BackgroundColor, etc.) and whether it can be clicked on (Enabled). Picking is not supported on all phones. If it fails, this component will show a notification. This default error behavior can be overridden with the Screen.ErrorOccurred event handler."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"AfterPicking",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"PhoneNumberPicker-AfterPicking",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Simple event to be raised after the picker activity returns its result and the properties have been filled in."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"BeforePicking",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"PhoneNumberPicker-BeforePicking",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Simple event to raise when the component is clicked but before the picker activity is started."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"GotFocus",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"PhoneNumberPicker-GotFocus",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Indicates the cursor moved over the button so it is now possible to click it."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"LostFocus",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"PhoneNumberPicker-LostFocus",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Indicates the cursor moved away from the button so it is now no longer possible to click it."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Open",
          "@kind":"command",
          "@name":"PhoneNumberPicker-Open",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Opens the picker, as though the user clicked on it."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Open",
          "@kind":"command",
          "@name":"Type-PhoneNumberPicker-Open",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Opens the picker, as though the user clicked on it."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"PhoneStatus",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"PhoneStatus",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"1"
              },
              {
                "@key":"ya-method-1",
                "@value":"PhoneStatus-GetWifiIpAddress"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-PhoneStatus-GetWifiIpAddress"
              },
              {
                "@key":"ya-method-2",
                "@value":"PhoneStatus-isConnected"
              },
              {
                "@key":"ya-type-method-2",
                "@value":"Type-PhoneStatus-isConnected"
              }
            ]
          },
          "description":{
            "text":"Component that returns information about the phone."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetWifiIpAddress",
          "@kind":"function",
          "@name":"PhoneStatus-GetWifiIpAddress",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              }
            ]
          },
          "description":{
            "text":"Returns the IP address of the phone in the form of a String"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetWifiIpAddress",
          "@kind":"function",
          "@name":"Type-PhoneStatus-GetWifiIpAddress",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Returns the IP address of the phone in the form of a String"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"isConnected",
          "@kind":"function",
          "@name":"PhoneStatus-isConnected",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              }
            ]
          },
          "description":{
            "text":"Returns TRUE if the phone is on Wifi, FALSE otherwise"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"isConnected",
          "@kind":"function",
          "@name":"Type-PhoneStatus-isConnected",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Returns TRUE if the phone is on Wifi, FALSE otherwise"
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"Player",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"Player",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"4"
              },
              {
                "@key":"ya-event-1",
                "@value":"Player-Completed"
              },
              {
                "@key":"ya-prop-1",
                "@value":"IsLooping/read-write-property/boolean/Whether the media is looping"
              },
              {
                "@key":"ya-prop-2",
                "@value":"IsPlaying/read-only-property/boolean/Whether the media is playing"
              },
              {
                "@key":"ya-prop-3",
                "@value":"Source/read-write-property/text/"
              },
              {
                "@key":"ya-prop-4",
                "@value":"Volume/write-only-property/number/Sets the volume to a number between 0 and 100"
              },
              {
                "@key":"ya-method-1",
                "@value":"Player-Pause"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-Player-Pause"
              },
              {
                "@key":"ya-method-2",
                "@value":"Player-Start"
              },
              {
                "@key":"ya-type-method-2",
                "@value":"Type-Player-Start"
              },
              {
                "@key":"ya-method-3",
                "@value":"Player-Stop"
              },
              {
                "@key":"ya-type-method-3",
                "@value":"Type-Player-Stop"
              },
              {
                "@key":"ya-method-4",
                "@value":"Player-Vibrate"
              },
              {
                "@key":"ya-type-method-4",
                "@value":"Type-Player-Vibrate"
              }
            ]
          },
          "description":{
            "text":"Multimedia component that plays audio or video and controls phone vibration. The name of a multimedia field is specified in the Source property, which can be set in the Designer or in the Blocks Editor. The length of time for a vibration is specified in the Blocks Editor in milliseconds (thousandths of a second). For legal sound and video formats, see Android Supported Media Formats. If you will only be playing sound files and vibrating, not using video, this component is best for long sound files, such as songs, while the Sound component is more efficient for short files, such as sound effects."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"Completed",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Player-Completed",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Indicates that the media has reached the end"
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"PlayerError",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Player-PlayerError",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"message",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"message"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"message/argument"
              }
            ]
          },
          "description":{
            "text":"The PlayerError event is no longer used. Please use the Screen.ErrorOccurred event instead."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Pause",
          "@kind":"command",
          "@name":"Player-Pause",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Suspends playing the media if it is playing."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Pause",
          "@kind":"command",
          "@name":"Type-Player-Pause",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Suspends playing the media if it is playing."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Start",
          "@kind":"command",
          "@name":"Player-Start",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Plays the media. If it was previously paused, the playing is resumed. If it was previously stopped, it starts from the beginning."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Start",
          "@kind":"command",
          "@name":"Type-Player-Start",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Plays the media. If it was previously paused, the playing is resumed. If it was previously stopped, it starts from the beginning."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Stop",
          "@kind":"command",
          "@name":"Player-Stop",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Stops playing the media and seeks to the beginning of the song."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Stop",
          "@kind":"command",
          "@name":"Type-Player-Stop",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Stops playing the media and seeks to the beginning of the song."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Vibrate",
          "@kind":"command",
          "@name":"Player-Vibrate",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"milliseconds"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"milliseconds/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"milliseconds/number"
              }
            ]
          },
          "description":{
            "text":"Vibrates for specified number of milliseconds."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Vibrate",
          "@kind":"command",
          "@name":"Type-Player-Vibrate",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"milliseconds"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"milliseconds/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"milliseconds/number"
              }
            ]
          },
          "description":{
            "text":"Vibrates for specified number of milliseconds."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"Slider",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"Slider",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"1"
              },
              {
                "@key":"ya-event-1",
                "@value":"Slider-PositionChanged"
              },
              {
                "@key":"ya-prop-1",
                "@value":"ColorLeft/read-write-property/number/The color of slider to the left of the thumb."
              },
              {
                "@key":"ya-prop-2",
                "@value":"ColorRight/read-write-property/number/The color of slider to the left of the thumb."
              },
              {
                "@key":"ya-prop-3",
                "@value":"Column/invisible-property/number/"
              },
              {
                "@key":"ya-prop-4",
                "@value":"MaxValue/read-write-property/number/Sets the maximum value of slider. Changing the maximum value also resets Thumbposition to be halfway between the minimum and the (new) maximum. If the new maximum is less than the current minimum, then minimum and maximum will both be set to this value. Setting MaxValue resets the thumb position to halfway between MinValue and MaxValue and signals the PositionChanged event."
              },
              {
                "@key":"ya-prop-5",
                "@value":"MinValue/read-write-property/number/Sets the minimum value of slider. Changing the minimum value also resets Thumbposition to be halfway between the (new) minimum and the maximum. If the new minimum is greater than the current maximum, then minimum and maximum will both be set to this value. Setting MinValue resets the thumb position to halfway between MinValue and MaxValue and signals the PositionChanged event."
              },
              {
                "@key":"ya-prop-6",
                "@value":"Row/invisible-property/number/"
              },
              {
                "@key":"ya-prop-7",
                "@value":"ThumbPosition/read-write-property/number/Sets the position of the slider thumb. If this value is greater than MaxValue, then it will be set to same value as MaxValue. If this value is less than MinValue, then it will be set to same value as MinValue."
              },
              {
                "@key":"ya-prop-8",
                "@value":"Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."
              },
              {
                "@key":"ya-prop-9",
                "@value":"Width/read-write-property/number/"
              }
            ]
          },
          "description":{
            "text":"A Slider is a progress bar that adds a draggable thumb. You can touch the thumb and drag left or right to set the slider thumb position. As the Slider thumb is dragged, it will trigger the PositionChanged event, reporting the position of the Slider thumb. The reported position of the Slider thumb can be used to dynamically update another component attribute, such as the font size of a TextBox or the radius of a Ball."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"PositionChanged",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Slider-PositionChanged",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"thumbPosition",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"thumbPosition"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"thumbPosition/argument"
              }
            ]
          },
          "description":{
            "text":"Indicates that position of the slider thumb has changed."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"Sound",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"Sound",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"3"
              },
              {
                "@key":"ya-prop-1",
                "@value":"MinimumInterval/read-write-property/number/The minimum interval..."
              },
              {
                "@key":"ya-prop-2",
                "@value":"Source/read-write-property/text/The name of the sound file. Only certain formats are supported."
              },
              {
                "@key":"ya-method-1",
                "@value":"Sound-Pause"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-Sound-Pause"
              },
              {
                "@key":"ya-method-2",
                "@value":"Sound-Play"
              },
              {
                "@key":"ya-type-method-2",
                "@value":"Type-Sound-Play"
              },
              {
                "@key":"ya-method-3",
                "@value":"Sound-Resume"
              },
              {
                "@key":"ya-type-method-3",
                "@value":"Type-Sound-Resume"
              },
              {
                "@key":"ya-method-4",
                "@value":"Sound-Stop"
              },
              {
                "@key":"ya-type-method-4",
                "@value":"Type-Sound-Stop"
              },
              {
                "@key":"ya-method-5",
                "@value":"Sound-Vibrate"
              },
              {
                "@key":"ya-type-method-5",
                "@value":"Type-Sound-Vibrate"
              }
            ]
          },
          "description":{
            "text":"A multimedia component that plays sound files and optionally vibrates for the number of milliseconds (thousandths of a second) specified in the Blocks Editor. The name of the sound file to play can be specified either in the Designer or in the Blocks Editor. For legal sound and video formats, see Android Supported Media Formats. This component is best for short sound files, such as sound effects, while the Player component is more efficient for longer sounds, such as songs."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"SoundError",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Sound-SoundError",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"message",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"message"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"message/argument"
              }
            ]
          },
          "description":{
            "text":"The SoundError event is no longer used. Please use the Screen.ErrorOccurred event instead."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Pause",
          "@kind":"command",
          "@name":"Sound-Pause",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Pauses playing the sound if it is being played."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Pause",
          "@kind":"command",
          "@name":"Type-Sound-Pause",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Pauses playing the sound if it is being played."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Play",
          "@kind":"command",
          "@name":"Sound-Play",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Plays the sound."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Play",
          "@kind":"command",
          "@name":"Type-Sound-Play",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Plays the sound."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Resume",
          "@kind":"command",
          "@name":"Sound-Resume",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Resumes playing the sound after a pause."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Resume",
          "@kind":"command",
          "@name":"Type-Sound-Resume",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Resumes playing the sound after a pause."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Stop",
          "@kind":"command",
          "@name":"Sound-Stop",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Stops playing the sound if it is being played."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Stop",
          "@kind":"command",
          "@name":"Type-Sound-Stop",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Stops playing the sound if it is being played."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Vibrate",
          "@kind":"command",
          "@name":"Sound-Vibrate",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"millisecs"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"millisecs/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"millisecs/number"
              }
            ]
          },
          "description":{
            "text":"Vibrates for the specified number of milliseconds."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Vibrate",
          "@kind":"command",
          "@name":"Type-Sound-Vibrate",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"millisecs"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"millisecs/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"millisecs/number"
              }
            ]
          },
          "description":{
            "text":"Vibrates for the specified number of milliseconds."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"SoundRecorder",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"SoundRecorder",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"1"
              },
              {
                "@key":"ya-event-1",
                "@value":"SoundRecorder-AfterSoundRecorded"
              },
              {
                "@key":"ya-event-2",
                "@value":"SoundRecorder-StartedRecording"
              },
              {
                "@key":"ya-event-3",
                "@value":"SoundRecorder-StoppedRecording"
              },
              {
                "@key":"ya-method-1",
                "@value":"SoundRecorder-Start"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-SoundRecorder-Start"
              },
              {
                "@key":"ya-method-2",
                "@value":"SoundRecorder-Stop"
              },
              {
                "@key":"ya-type-method-2",
                "@value":"Type-SoundRecorder-Stop"
              }
            ]
          },
          "description":{
            "text":"Multimedia component that records audio."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"AfterSoundRecorded",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"SoundRecorder-AfterSoundRecorded",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"sound",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"sound"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"sound/argument"
              }
            ]
          },
          "description":{
            "text":"Provides the location of the newly created sound."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"StartedRecording",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"SoundRecorder-StartedRecording",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Indicates that the recorder has started, and can be stopped."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"StoppedRecording",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"SoundRecorder-StoppedRecording",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Indicates that the recorder has stopped, and can be started again."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Start",
          "@kind":"command",
          "@name":"SoundRecorder-Start",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Starts recording."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Start",
          "@kind":"command",
          "@name":"Type-SoundRecorder-Start",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Starts recording."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Stop",
          "@kind":"command",
          "@name":"SoundRecorder-Stop",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Stops recording."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Stop",
          "@kind":"command",
          "@name":"Type-SoundRecorder-Stop",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Stops recording."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"SpeechRecognizer",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"SpeechRecognizer",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"1"
              },
              {
                "@key":"ya-event-1",
                "@value":"SpeechRecognizer-AfterGettingText"
              },
              {
                "@key":"ya-event-2",
                "@value":"SpeechRecognizer-BeforeGettingText"
              },
              {
                "@key":"ya-prop-1",
                "@value":"Result/read-only-property/text/"
              },
              {
                "@key":"ya-method-1",
                "@value":"SpeechRecognizer-GetText"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-SpeechRecognizer-GetText"
              }
            ]
          },
          "description":{
            "text":"Component for using Voice Recognition to convert from speech to text"
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"AfterGettingText",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"SpeechRecognizer-AfterGettingText",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"result",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"result"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"result/argument"
              }
            ]
          },
          "description":{
            "text":"Simple event to raise after the VoiceReco activity has returned"
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"BeforeGettingText",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"SpeechRecognizer-BeforeGettingText",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Simple event to raise when VoiceReco is invoked but before the VoiceReco activity is started."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetText",
          "@kind":"command",
          "@name":"SpeechRecognizer-GetText",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Solicits speech input from the user. After the speech is converted to text, the AfterGettingText event will be raised."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetText",
          "@kind":"command",
          "@name":"Type-SpeechRecognizer-GetText",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Solicits speech input from the user. After the speech is converted to text, the AfterGettingText event will be raised."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"TableArrangement",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"TableArrangement",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"1"
              },
              {
                "@key":"ya-prop-1",
                "@value":"Column/invisible-property/number/"
              },
              {
                "@key":"ya-prop-2",
                "@value":"Columns/invisible-property/number/"
              },
              {
                "@key":"ya-prop-3",
                "@value":"Height/read-write-property/number/"
              },
              {
                "@key":"ya-prop-4",
                "@value":"Row/invisible-property/number/"
              },
              {
                "@key":"ya-prop-5",
                "@value":"Rows/invisible-property/number/"
              },
              {
                "@key":"ya-prop-6",
                "@value":"Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."
              },
              {
                "@key":"ya-prop-7",
                "@value":"Width/read-write-property/number/"
              }
            ]
          },
          "description":{
            "text":"A formatting element in which to place components that should be displayed in tabular form."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"TextBox",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"TextBox",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"4"
              },
              {
                "@key":"ya-event-1",
                "@value":"TextBox-GotFocus"
              },
              {
                "@key":"ya-event-2",
                "@value":"TextBox-LostFocus"
              },
              {
                "@key":"ya-prop-1",
                "@value":"BackgroundColor/read-write-property/number/The background color of the input box. You can choose a color by name in the Designer or in the Blocks Editor. The default background color is 'default' (shaded 3-D look)."
              },
              {
                "@key":"ya-prop-2",
                "@value":"Column/invisible-property/number/"
              },
              {
                "@key":"ya-prop-3",
                "@value":"Enabled/read-write-property/boolean/Whether the user can enter text into this input box. By default, this is true."
              },
              {
                "@key":"ya-prop-4",
                "@value":"FontBold/invisible-property/boolean/Whether the font for the text should be bold. By default, it is not."
              },
              {
                "@key":"ya-prop-5",
                "@value":"FontItalic/invisible-property/boolean/Whether the text should appear in italics. By default, it does not."
              },
              {
                "@key":"ya-prop-6",
                "@value":"FontSize/read-write-property/number/The font size for the text. By default, it is 14.0 points."
              },
              {
                "@key":"ya-prop-7",
                "@value":"FontTypeface/invisible-property/number/The font for the text. The value can be changed in the Designer."
              },
              {
                "@key":"ya-prop-8",
                "@value":"Height/read-write-property/number/"
              },
              {
                "@key":"ya-prop-9",
                "@value":"Hint/read-write-property/text/Text that should appear faintly in the input box to provide a hint as to what the user should enter. This can only be seen if the Text property is empty."
              },
              {
                "@key":"ya-prop-10",
                "@value":"MultiLine/read-write-property/boolean/If true, then this text box accepts multiple lines of input, which are entered using the return key. For single line text boxes there is a Done key instead of a return key, and pressing Done hides the keyboard. The app should call the HideKeyboard method to hide the keyboard for a mutiline text box."
              },
              {
                "@key":"ya-prop-11",
                "@value":"NumbersOnly/read-write-property/boolean/If true, then this text box accepts only numbers as keyboard input. Numbers can include a decimal point and an optional leading minus sign. This applies to keyboard input only. Even if NumbersOnly is true, you can use [set Text to] to enter any text at all."
              },
              {
                "@key":"ya-prop-12",
                "@value":"Row/invisible-property/number/"
              },
              {
                "@key":"ya-prop-13",
                "@value":"Text/read-write-property/text/The text in the input box, which can be set by the programmer in the Designer or Blocks Editor, or it can be entered by the user (unless the Enabled property is false)."
              },
              {
                "@key":"ya-prop-14",
                "@value":"TextAlignment/invisible-property/number/Whether the text should be left justified, centered, or right justified. By default, text is left justified."
              },
              {
                "@key":"ya-prop-15",
                "@value":"TextColor/read-write-property/number/The color for the text. You can choose a color by name in the Designer or in the Blocks Editor. The default text color is black."
              },
              {
                "@key":"ya-prop-16",
                "@value":"Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."
              },
              {
                "@key":"ya-prop-17",
                "@value":"Width/read-write-property/number/"
              },
              {
                "@key":"ya-method-1",
                "@value":"TextBox-HideKeyboard"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-TextBox-HideKeyboard"
              }
            ]
          },
          "description":{
            "text":"A box for the user to enter text. The initial or user-entered text value is in the Text property. If blank, the Hint property, which appears as faint text in the box, can provide the user with guidance as to what to type. The MultiLine property determines if the text can havemore than one line. For a single line text box, the keyboard will closeautomatically when the user presses the Done key. To close the keyboard for multiline text boxes, the app should use the HideKeyboard method or rely on the user to press the Back key. The NumbersOnly property restricts the keyboard to acceptnumeric input only. Other properties affect the appearance of the text box (TextAlignment, BackgroundColor, etc.) and whether it can be used (Enabled). Text boxes are usually used with the Button component, with the user clicking on the button when text entry is complete. If the text entered by the user should not be displayed, use PasswordTextBox instead."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"GotFocus",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"TextBox-GotFocus",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Event raised when this component is selected for input, such as by the user touching it."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"LostFocus",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"TextBox-LostFocus",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Event raised when this component is no longer selected for input, such as if the user touches a different text box."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"HideKeyboard",
          "@kind":"command",
          "@name":"TextBox-HideKeyboard",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Hide the keyboard. Only multiline text boxes need this. Single line text boxes close the keyboard when the users presses the Done key."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"HideKeyboard",
          "@kind":"command",
          "@name":"Type-TextBox-HideKeyboard",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Hide the keyboard. Only multiline text boxes need this. Single line text boxes close the keyboard when the users presses the Done key."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"TextToSpeech",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"TextToSpeech",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"1"
              },
              {
                "@key":"ya-event-1",
                "@value":"TextToSpeech-AfterSpeaking"
              },
              {
                "@key":"ya-event-2",
                "@value":"TextToSpeech-BeforeSpeaking"
              },
              {
                "@key":"ya-prop-1",
                "@value":"Country/read-write-property/text/"
              },
              {
                "@key":"ya-prop-2",
                "@value":"Language/read-write-property/text/"
              },
              {
                "@key":"ya-prop-3",
                "@value":"Result/read-only-property/boolean/"
              },
              {
                "@key":"ya-method-1",
                "@value":"TextToSpeech-Speak"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-TextToSpeech-Speak"
              }
            ]
          },
          "description":{
            "text":"Component for using TextToSpeech to speak a message"
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"AfterSpeaking",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"TextToSpeech-AfterSpeaking",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"result",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"result"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"result/argument"
              }
            ]
          },
          "description":{
            "text":"Event to raise after the message is spoken."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"BeforeSpeaking",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"TextToSpeech-BeforeSpeaking",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Event to raise when Speak is invoked, before the message is spoken."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Speak",
          "@kind":"command",
          "@name":"TextToSpeech-Speak",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"message"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"message/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"message/text"
              }
            ]
          },
          "description":{
            "text":"Speaks the given message."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Speak",
          "@kind":"command",
          "@name":"Type-TextToSpeech-Speak",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"message"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"message/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"message/text"
              }
            ]
          },
          "description":{
            "text":"Speaks the given message."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"Texting",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"Texting",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"3"
              },
              {
                "@key":"ya-event-1",
                "@value":"Texting-MessageReceived"
              },
              {
                "@key":"ya-prop-1",
                "@value":"GoogleVoiceEnabled/read-write-property/boolean/If true, then SendMessage will attempt to send messages over Wifi using Google Voice. This requires that the Google Voice app must be installed and set up on the phone or tablet, with a Google Voice account. If GoogleVoiceEnabled is false, the device must have phone and texting service in order to send or receive messages with this component."
              },
              {
                "@key":"ya-prop-2",
                "@value":"Message/read-write-property/text/The message that will be sent when the SendMessage method is called."
              },
              {
                "@key":"ya-prop-3",
                "@value":"PhoneNumber/read-write-property/text/The number that the message will be sent to when the SendMessage method is called. The number is a text string with the specified digits (e.g., 6505551212). Dashes, dots, and parentheses may be included (e.g., (650)-555-1212) but will be ignored; spaces should not be included."
              },
              {
                "@key":"ya-prop-4",
                "@value":"ReceivingEnabled/read-write-property/number/If set to 1 (OFF) no messages will be received. If set to 2 (FOREGROUND) or3 (ALWAYS) the component will respond to messages if it is running. If the app is not running then the message will be discarded if set to 2 (FOREGROUND). If set to 3 (ALWAYS) and the app is not running the phone will show a notification. Selecting the notification will bring up the app and signal the MessageReceived event. Messages received when the app is dormant will be queued, and so several MessageReceived events might appear when the app awakens. As an app developer, it would be a good idea to give your users control over this property, so they can make their phones ignore text messages when your app is installed."
              },
              {
                "@key":"ya-method-1",
                "@value":"Texting-SendMessage"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-Texting-SendMessage"
              }
            ]
          },
          "description":{
            "text":"A component that will, when the SendMessage method is called, send the text message specified in the Message property to the phone number specified in the PhoneNumber property. If the ReceivingEnabled property is set to 1 messages will not be received. If ReceivingEnabled is set to 2 messages will be received only when the application is running. Finally if ReceivingEnabled is set to 3, messages will be received when the application is running and when the application is not running they will be queued and a notification displayed to the user. When a message arrives, the MessageReceived event is raised and provides the sending number and message. An app that includes this component will receive messages even when it is in the background (i.e. when it's not visible on the screen) and, moreso, even if the app is not running, so long as it's installed on the phone. If the phone receives a text message when the app is not in the foreground, the phone will show a notification in the notification bar. Selecting the notification will bring up the app. As an app developer, you'll probably want to give your users the ability to control ReceivingEnabled so that they can make the phone ignore text messages. If the GoogleVoiceEnabled property is true, messages can be sent over Wifi using Google Voice. This option requires that the user have a Google Voice account and that the mobile Voice app is installed on the phone. The Google Voice option works only on phones that support Android 2.0 (Eclair) or higher. To specify the phone number (e.g., 650-555-1212), set the PhoneNumber property to a Text string with the specified digits (e.g., 6505551212). Dashes, dots, and parentheses may be included (e.g., (650)-555-1212) but will be ignored; spaces may not be included. Another way for an app to specify a phone number would be to include a PhoneNumberPicker component, which lets the users select a phone numbers from the ones stored in the the phone's contacts."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"MessageReceived",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Texting-MessageReceived",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"number",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"number"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"messageText",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"messageText"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"number/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"messageText/argument"
              }
            ]
          },
          "description":{
            "text":"Event that's raised when a text message is received by the phone."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SendMessage",
          "@kind":"command",
          "@name":"Texting-SendMessage",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Send a text message"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SendMessage",
          "@kind":"command",
          "@name":"Type-Texting-SendMessage",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Send a text message"
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"TinyDB",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"TinyDB",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"1"
              },
              {
                "@key":"ya-method-1",
                "@value":"TinyDB-GetValue"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-TinyDB-GetValue"
              },
              {
                "@key":"ya-method-2",
                "@value":"TinyDB-StoreValue"
              },
              {
                "@key":"ya-type-method-2",
                "@value":"Type-TinyDB-StoreValue"
              }
            ]
          },
          "description":{
            "text":"Non-visible component that persistently stores values on the phone."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetValue",
          "@kind":"function",
          "@name":"TinyDB-GetValue",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"tag"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"type-exclude-1",
                "@value":"argument"
              },
              {
                "@key":"socket-allow-1",
                "@value":"tag/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"tag/text"
              }
            ]
          },
          "description":{
            "text":"Retrieve the value stored under the given tag."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetValue",
          "@kind":"function",
          "@name":"Type-TinyDB-GetValue",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"tag"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"type-exclude-1",
                "@value":"argument"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"tag/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"tag/text"
              }
            ]
          },
          "description":{
            "text":"Retrieve the value stored under the given tag."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"StoreValue",
          "@kind":"command",
          "@name":"TinyDB-StoreValue",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"tag"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"valueToStore"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"tag/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"tag/text"
              },
              {
                "@key":"socket-exclude-1",
                "@value":"valueToStore/argument"
              }
            ]
          },
          "description":{
            "text":"Store the given value under the given tag. The storage persists on the phone when the app is restarted."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"StoreValue",
          "@kind":"command",
          "@name":"Type-TinyDB-StoreValue",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"tag"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"valueToStore"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"tag/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"tag/text"
              },
              {
                "@key":"socket-exclude-1",
                "@value":"valueToStore/argument"
              }
            ]
          },
          "description":{
            "text":"Store the given value under the given tag. The storage persists on the phone when the app is restarted."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"TinyWebDB",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"TinyWebDB",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"2"
              },
              {
                "@key":"ya-event-1",
                "@value":"TinyWebDB-GotValue"
              },
              {
                "@key":"ya-event-2",
                "@value":"TinyWebDB-ValueStored"
              },
              {
                "@key":"ya-event-3",
                "@value":"TinyWebDB-WebServiceError"
              },
              {
                "@key":"ya-prop-1",
                "@value":"ServiceURL/read-write-property/text/"
              },
              {
                "@key":"ya-method-1",
                "@value":"TinyWebDB-GetValue"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-TinyWebDB-GetValue"
              },
              {
                "@key":"ya-method-2",
                "@value":"TinyWebDB-StoreValue"
              },
              {
                "@key":"ya-type-method-2",
                "@value":"Type-TinyWebDB-StoreValue"
              }
            ]
          },
          "description":{
            "text":"Non-visible component that communicates with a Web service to store and retrieve information."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"GotValue",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"TinyWebDB-GotValue",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"tagFromWebDB",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"tagFromWebDB"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"valueFromWebDB",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"valueFromWebDB"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"tagFromWebDB/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"valueFromWebDB/argument"
              }
            ]
          },
          "description":{
            "text":"Indicates that a GetValue server request has succeeded."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"ValueStored",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"TinyWebDB-ValueStored",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Event indicating that a StoreValue server request has succeeded."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"WebServiceError",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"TinyWebDB-WebServiceError",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"message",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"message"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"message/argument"
              }
            ]
          },
          "description":{
            "text":"Indicates that the communication with the Web service signaled an error"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetValue",
          "@kind":"command",
          "@name":"TinyWebDB-GetValue",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"tag"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"tag/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"tag/text"
              }
            ]
          },
          "description":{
            "text":"GetValue asks the Web service to get the value stored under the given tag. It is up to the Web service what to return if there is no value stored under the tag. This component just accepts whatever is returned."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetValue",
          "@kind":"command",
          "@name":"Type-TinyWebDB-GetValue",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"tag"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"tag/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"tag/text"
              }
            ]
          },
          "description":{
            "text":"GetValue asks the Web service to get the value stored under the given tag. It is up to the Web service what to return if there is no value stored under the tag. This component just accepts whatever is returned."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"StoreValue",
          "@kind":"command",
          "@name":"TinyWebDB-StoreValue",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"tag"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"valueToStore"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"tag/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"tag/text"
              },
              {
                "@key":"socket-exclude-1",
                "@value":"valueToStore/argument"
              }
            ]
          },
          "description":{
            "text":"Asks the Web service to store the given value under the given tag"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"StoreValue",
          "@kind":"command",
          "@name":"Type-TinyWebDB-StoreValue",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"tag"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"valueToStore"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"tag/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"tag/text"
              },
              {
                "@key":"socket-exclude-1",
                "@value":"valueToStore/argument"
              }
            ]
          },
          "description":{
            "text":"Asks the Web service to store the given value under the given tag"
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"Twitter",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"Twitter",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"2"
              },
              {
                "@key":"ya-event-1",
                "@value":"Twitter-DirectMessagesReceived"
              },
              {
                "@key":"ya-event-2",
                "@value":"Twitter-FollowersReceived"
              },
              {
                "@key":"ya-event-3",
                "@value":"Twitter-FriendTimelineReceived"
              },
              {
                "@key":"ya-event-4",
                "@value":"Twitter-IsAuthorized"
              },
              {
                "@key":"ya-event-5",
                "@value":"Twitter-MentionsReceived"
              },
              {
                "@key":"ya-event-6",
                "@value":"Twitter-SearchSuccessful"
              },
              {
                "@key":"ya-prop-1",
                "@value":"ConsumerKey/read-write-property/text/"
              },
              {
                "@key":"ya-prop-2",
                "@value":"ConsumerSecret/read-write-property/text/"
              },
              {
                "@key":"ya-prop-3",
                "@value":"DirectMessages/read-only-property/list/This property contains a list of the most recent messages mentioning the logged-in user. Initially, the list is empty. To set it, the program must: - Call the Authorize method. - Wait for the Authorized event. - Call the RequestDirectMessages method. - Wait for the DirectMessagesReceived event. The value of this property will then be set to the list of direct messages retrieved (and maintain that value until any subsequent call to RequestDirectMessages)."
              },
              {
                "@key":"ya-prop-4",
                "@value":"Followers/read-only-property/list/This property contains a list of the followers of the logged-in user. Initially, the list is empty. To set it, the program must: - Call the Authorize method. - Wait for the IsAuthorized event. - Call the RequestFollowers method. - Wait for the FollowersReceived event. The value of this property will then be set to the list of followers (and maintain its value until any subsequent call to RequestFollowers)."
              },
              {
                "@key":"ya-prop-5",
                "@value":"FriendTimeline/read-only-property/list/This property contains the 20 most recent messages of users being followed. Initially, the list is empty. To set it, the program must: - Call the Authorize method. - Wait for the IsAuthorized event. - Specify users to follow with one or more calls to the Follow method. - Call the RequestFriendTimeline method. - Wait for the FriendTimelineReceived event. The value of this property will then be set to the list of messages (and maintain its value until any subsequent call to RequestFriendTimeline."
              },
              {
                "@key":"ya-prop-6",
                "@value":"Mentions/read-only-property/list/This property contains a list of mentions of the logged-in user. Initially, the list is empty. To set it, the program must: - Call the Authorize method. - Wait for the IsAuthorized event. - Call the RequestMentions method. - Wait for the MentionsReceived event. The value of this property will then be set to the list of mentions (and will maintain its value until any subsequent calls to RequestMentions)."
              },
              {
                "@key":"ya-prop-7",
                "@value":"SearchResults/read-only-property/list/This property, which is initially empty, is set to a list of search results after the program: - Calls the SearchTwitter method. - Waits for the SearchSuccessful event. The value of the property will then be the same as the parameter to SearchSuccessful. Note that it is not necessary to call the Authorize method before calling SearchTwitter."
              },
              {
                "@key":"ya-prop-8",
                "@value":"Username/read-only-property/text/The user name of the authorized user. Empty if there is no authorized user."
              },
              {
                "@key":"ya-method-1",
                "@value":"Twitter-Authorize"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-Twitter-Authorize"
              },
              {
                "@key":"ya-method-2",
                "@value":"Twitter-CheckAuthorized"
              },
              {
                "@key":"ya-type-method-2",
                "@value":"Type-Twitter-CheckAuthorized"
              },
              {
                "@key":"ya-method-3",
                "@value":"Twitter-DeAuthorize"
              },
              {
                "@key":"ya-type-method-3",
                "@value":"Type-Twitter-DeAuthorize"
              },
              {
                "@key":"ya-method-4",
                "@value":"Twitter-DirectMessage"
              },
              {
                "@key":"ya-type-method-4",
                "@value":"Type-Twitter-DirectMessage"
              },
              {
                "@key":"ya-method-5",
                "@value":"Twitter-Follow"
              },
              {
                "@key":"ya-type-method-5",
                "@value":"Type-Twitter-Follow"
              },
              {
                "@key":"ya-method-6",
                "@value":"Twitter-RequestDirectMessages"
              },
              {
                "@key":"ya-type-method-6",
                "@value":"Type-Twitter-RequestDirectMessages"
              },
              {
                "@key":"ya-method-7",
                "@value":"Twitter-RequestFollowers"
              },
              {
                "@key":"ya-type-method-7",
                "@value":"Type-Twitter-RequestFollowers"
              },
              {
                "@key":"ya-method-8",
                "@value":"Twitter-RequestFriendTimeline"
              },
              {
                "@key":"ya-type-method-8",
                "@value":"Type-Twitter-RequestFriendTimeline"
              },
              {
                "@key":"ya-method-9",
                "@value":"Twitter-RequestMentions"
              },
              {
                "@key":"ya-type-method-9",
                "@value":"Type-Twitter-RequestMentions"
              },
              {
                "@key":"ya-method-10",
                "@value":"Twitter-SearchTwitter"
              },
              {
                "@key":"ya-type-method-10",
                "@value":"Type-Twitter-SearchTwitter"
              },
              {
                "@key":"ya-method-11",
                "@value":"Twitter-SetStatus"
              },
              {
                "@key":"ya-type-method-11",
                "@value":"Type-Twitter-SetStatus"
              },
              {
                "@key":"ya-method-12",
                "@value":"Twitter-StopFollowing"
              },
              {
                "@key":"ya-type-method-12",
                "@value":"Type-Twitter-StopFollowing"
              }
            ]
          },
          "description":{
            "text":"A non-visible component that enables communication with Twitter. Once a user has logged into their Twitter account (and the authorization has been confirmed successful by the IsAuthorized event), many more operations are available: - Searching Twitter for tweets or labels (SearchTwitter) - Setting the status of the logged-in user (SetStatus) - Directing a message to a specific user (DirectMessage) - Receiving the most recent messages directed to the logged-in user (RequestDirectMessages) - Following a specific user (Follow) - Ceasing to follow a specific user (StopFollowing) - Getting a list of users following the logged-in user (RequestFollowers) - Getting the most recent messages of users followed by the logged-in user (RequestFriendTimeline) - Getting the most recent mentions of the logged-in user (RequestMentions) You must obtain a Comsumer Key and Consumer Secret for Twitter authorization specific to your app from http://twitter.com/oauth_clients/new"
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"DirectMessagesReceived",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Twitter-DirectMessagesReceived",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"messages",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"messages"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"messages/argument"
              }
            ]
          },
          "description":{
            "text":"This event is raised when the recent messages requested through RequestDirectMessages have been retrieved. A list of the messages can then be found in the messages parameter or the Messages property."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"FollowersReceived",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Twitter-FollowersReceived",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"followers2",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"followers2"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"followers2/argument"
              }
            ]
          },
          "description":{
            "text":"This event is raised when all of the followers of the logged-in user requested through RequestFollowers have been retrieved. A list of the followers can then be found in the followers parameter or the Followers property."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"FriendTimelineReceived",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Twitter-FriendTimelineReceived",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"timeline",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"timeline"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"timeline/argument"
              }
            ]
          },
          "description":{
            "text":"This event is raised when the messages requested through RequestFriendTimeline have been retrieved. The timeline parameter and the Timeline property will contain a list of lists, where each sub-list contains a status update of the form (username message)"
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"IsAuthorized",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Twitter-IsAuthorized",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"This event is raised after the program calls Authorize if the authorization was successful. It is also called after a call to CheckAuthorized if we already have a valid access token. After this event has been raised, any other method for this component can be called."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"MentionsReceived",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Twitter-MentionsReceived",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"mentions",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"mentions"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"mentions/argument"
              }
            ]
          },
          "description":{
            "text":"This event is raised when the mentions of the logged-in user requested through RequestMentions have been retrieved. A list of the mentions can then be found in the mentions parameter or the Mentions property."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"SearchSuccessful",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Twitter-SearchSuccessful",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"searchResults",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"searchResults"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"searchResults/argument"
              }
            ]
          },
          "description":{
            "text":"This event is raised when the results of the search requested through SearchSuccessful have been retrieved. A list of the results can then be found in the results parameter or the Results property."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Authorize",
          "@kind":"command",
          "@name":"Twitter-Authorize",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Redirects user to login to Twitter via the Web browser using the OAuth protocol if we don't already have authorization."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Authorize",
          "@kind":"command",
          "@name":"Type-Twitter-Authorize",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Redirects user to login to Twitter via the Web browser using the OAuth protocol if we don't already have authorization."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"CheckAuthorized",
          "@kind":"command",
          "@name":"Twitter-CheckAuthorized",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Checks whether we already have access, and if so, causes IsAuthorized event handler to be called."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"CheckAuthorized",
          "@kind":"command",
          "@name":"Type-Twitter-CheckAuthorized",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Checks whether we already have access, and if so, causes IsAuthorized event handler to be called."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"DeAuthorize",
          "@kind":"command",
          "@name":"Twitter-DeAuthorize",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Removes Twitter authorization from this running app instance"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"DeAuthorize",
          "@kind":"command",
          "@name":"Type-Twitter-DeAuthorize",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Removes Twitter authorization from this running app instance"
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"DirectMessage",
          "@kind":"command",
          "@name":"Twitter-DirectMessage",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"user"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"message"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"user/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"message/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"user/text"
              },
              {
                "@key":"socket-allow-4",
                "@value":"message/text"
              }
            ]
          },
          "description":{
            "text":"This sends a direct (private) message to the specified user. The message will be trimmed if it exceeds 160characters. Requirements: This should only be called after the IsAuthorized event has been raised, indicating that the user has successfully logged in to Twitter."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"DirectMessage",
          "@kind":"command",
          "@name":"Type-Twitter-DirectMessage",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"user"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"message"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"user/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"message/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"user/text"
              },
              {
                "@key":"socket-allow-6",
                "@value":"message/text"
              }
            ]
          },
          "description":{
            "text":"This sends a direct (private) message to the specified user. The message will be trimmed if it exceeds 160characters. Requirements: This should only be called after the IsAuthorized event has been raised, indicating that the user has successfully logged in to Twitter."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Follow",
          "@kind":"command",
          "@name":"Twitter-Follow",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"user"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"user/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"user/text"
              }
            ]
          },
          "description":{
            "text":"Starts following a user."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Follow",
          "@kind":"command",
          "@name":"Type-Twitter-Follow",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"user"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"user/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"user/text"
              }
            ]
          },
          "description":{
            "text":"Starts following a user."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Login",
          "@kind":"command",
          "@name":"Twitter-Login",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"username"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"password"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"username/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"password/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"username/text"
              },
              {
                "@key":"socket-allow-4",
                "@value":"password/text"
              }
            ]
          },
          "description":{
            "text":"Twitter's API no longer supports login via username and password. Use the Authorize call instead."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Login",
          "@kind":"command",
          "@name":"Type-Twitter-Login",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"username"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"password"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"username/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"password/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"username/text"
              },
              {
                "@key":"socket-allow-6",
                "@value":"password/text"
              }
            ]
          },
          "description":{
            "text":"Twitter's API no longer supports login via username and password. Use the Authorize call instead."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"RequestDirectMessages",
          "@kind":"command",
          "@name":"Twitter-RequestDirectMessages",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Requests the 20 most recent direct messages sent to the logged-in user. When the messages have been retrieved, the system will raise the DirectMessagesReceived event and set the DirectMessages property to the list of messages. Requirements: This should only be called after the IsAuthorized event has been raised, indicating that the user has successfully logged in to Twitter."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"RequestDirectMessages",
          "@kind":"command",
          "@name":"Type-Twitter-RequestDirectMessages",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Requests the 20 most recent direct messages sent to the logged-in user. When the messages have been retrieved, the system will raise the DirectMessagesReceived event and set the DirectMessages property to the list of messages. Requirements: This should only be called after the IsAuthorized event has been raised, indicating that the user has successfully logged in to Twitter."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"RequestFollowers",
          "@kind":"command",
          "@name":"Twitter-RequestFollowers",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Gets who is following you."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"RequestFollowers",
          "@kind":"command",
          "@name":"Type-Twitter-RequestFollowers",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Gets who is following you."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"RequestFriendTimeline",
          "@kind":"command",
          "@name":"Twitter-RequestFriendTimeline",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Gets the most recent 20 messages in the user's timeline."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"RequestFriendTimeline",
          "@kind":"command",
          "@name":"Type-Twitter-RequestFriendTimeline",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Gets the most recent 20 messages in the user's timeline."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"RequestMentions",
          "@kind":"command",
          "@name":"Twitter-RequestMentions",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Requests the 20 most recent mentions of the logged-in user. When the mentions have been retrieved, the system will raise the MentionsReceived event and set the Mentions property to the list of mentions. Requirements: This should only be called after the IsAuthorized event has been raised, indicating that the user has successfully logged in to Twitter."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"RequestMentions",
          "@kind":"command",
          "@name":"Type-Twitter-RequestMentions",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Requests the 20 most recent mentions of the logged-in user. When the mentions have been retrieved, the system will raise the MentionsReceived event and set the Mentions property to the list of mentions. Requirements: This should only be called after the IsAuthorized event has been raised, indicating that the user has successfully logged in to Twitter."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SearchTwitter",
          "@kind":"command",
          "@name":"Twitter-SearchTwitter",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"query"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"query/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"query/text"
              }
            ]
          },
          "description":{
            "text":"This searches Twitter for the given String query. Requirements: This should only be called after the IsAuthorized event has been raised, indicating that the user has successfully logged in to Twitter."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SearchTwitter",
          "@kind":"command",
          "@name":"Type-Twitter-SearchTwitter",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"query"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"query/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"query/text"
              }
            ]
          },
          "description":{
            "text":"This searches Twitter for the given String query. Requirements: This should only be called after the IsAuthorized event has been raised, indicating that the user has successfully logged in to Twitter."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SetStatus",
          "@kind":"command",
          "@name":"Twitter-SetStatus",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"status"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"status/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"status/text"
              }
            ]
          },
          "description":{
            "text":"This updates the logged-in user's status to the specified Text, which will be trimmed if it exceeds 160 characters. Requirements: This should only be called after the IsAuthorized event has been raised, indicating that the user has successfully logged in to Twitter."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SetStatus",
          "@kind":"command",
          "@name":"Type-Twitter-SetStatus",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"status"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"status/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"status/text"
              }
            ]
          },
          "description":{
            "text":"This updates the logged-in user's status to the specified Text, which will be trimmed if it exceeds 160 characters. Requirements: This should only be called after the IsAuthorized event has been raised, indicating that the user has successfully logged in to Twitter."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"StopFollowing",
          "@kind":"command",
          "@name":"Twitter-StopFollowing",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"user"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"user/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"user/text"
              }
            ]
          },
          "description":{
            "text":"Stops following a user."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"StopFollowing",
          "@kind":"command",
          "@name":"Type-Twitter-StopFollowing",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"user"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"user/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"user/text"
              }
            ]
          },
          "description":{
            "text":"Stops following a user."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"VerticalArrangement",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"VerticalArrangement",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"2"
              },
              {
                "@key":"ya-prop-1",
                "@value":"AlignHorizontal/read-write-property/number/A number that encodes how contents of the arrangement are aligned horizontally. The choices are: 1 = left aligned, 2 = horizontally centered, 3 = right aligned. Alignment has no effect if the arrangement's width is automatic."
              },
              {
                "@key":"ya-prop-2",
                "@value":"AlignVertical/read-write-property/number/A number that encodes how the contents of the arrangement are aligned vertically. The choices are: 1 = aligned at the top, 2 = vertically centered, 3 = aligned at the bottom. Alignment has no effect if the arrangement's height is automatic."
              },
              {
                "@key":"ya-prop-3",
                "@value":"Column/invisible-property/number/"
              },
              {
                "@key":"ya-prop-4",
                "@value":"Height/read-write-property/number/"
              },
              {
                "@key":"ya-prop-5",
                "@value":"Row/invisible-property/number/"
              },
              {
                "@key":"ya-prop-6",
                "@value":"Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."
              },
              {
                "@key":"ya-prop-7",
                "@value":"Width/read-write-property/number/"
              }
            ]
          },
          "description":{
            "text":"A formatting element in which to place components that should be displayed one below another. (The first child component is stored on top, the second beneath it, etc.) If you wish to have components displayed next to one another, use HorizontalArrangement instead."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"VideoPlayer",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"VideoPlayer",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"4"
              },
              {
                "@key":"ya-event-1",
                "@value":"VideoPlayer-Completed"
              },
              {
                "@key":"ya-prop-1",
                "@value":"Column/invisible-property/number/"
              },
              {
                "@key":"ya-prop-2",
                "@value":"FullScreen/read-write-property/boolean/"
              },
              {
                "@key":"ya-prop-3",
                "@value":"Height/read-write-property/number/"
              },
              {
                "@key":"ya-prop-4",
                "@value":"Row/invisible-property/number/"
              },
              {
                "@key":"ya-prop-5",
                "@value":"Source/write-only-property/text/The \"path\" to the video. Usually, this will be the name of the video file, which should be added in the Designer."
              },
              {
                "@key":"ya-prop-6",
                "@value":"Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."
              },
              {
                "@key":"ya-prop-7",
                "@value":"Width/read-write-property/number/"
              },
              {
                "@key":"ya-method-1",
                "@value":"VideoPlayer-GetDuration"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-VideoPlayer-GetDuration"
              },
              {
                "@key":"ya-method-2",
                "@value":"VideoPlayer-Pause"
              },
              {
                "@key":"ya-type-method-2",
                "@value":"Type-VideoPlayer-Pause"
              },
              {
                "@key":"ya-method-3",
                "@value":"VideoPlayer-SeekTo"
              },
              {
                "@key":"ya-type-method-3",
                "@value":"Type-VideoPlayer-SeekTo"
              },
              {
                "@key":"ya-method-4",
                "@value":"VideoPlayer-Start"
              },
              {
                "@key":"ya-type-method-4",
                "@value":"Type-VideoPlayer-Start"
              }
            ]
          },
          "description":{
            "text":"A multimedia component capable of playing videos. When the application is run, the VideoPlayer will be displayed as a rectangle on-screen. If the user touches the rectangle, controls will appear to play/pause, skip ahead, and skip backward within the video. The application can also control behavior by calling the Start, Pause, and SeekTo methods. Video files should be in Windows Media Video (.wmv) format, 3GPP (.3gp), or MPEG-4 (.mp4). For more details about legal formats, see Android Supported Media Formats. App Inventor for Android only permits video files under 1 MB and limits the total size of an application to 5 MB, not all of which is available for media (video, audio, and sound) files. If your media files are too large, you may get errors when packaging or installing your application, in which case you should reduce the number of media files or their sizes. Most video editing software, such as Windows Movie Maker and Apple iMovie, can help you decrease the size of videos by shortening them or re-encoding the video into a more compact format."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"Completed",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"VideoPlayer-Completed",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Indicates that the video has reached the end"
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"VideoPlayerError",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"VideoPlayer-VideoPlayerError",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"message",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"message"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"message/argument"
              }
            ]
          },
          "description":{
            "text":"The VideoPlayerError event is no longer used. Please use the Screen.ErrorOccurred event instead."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetDuration",
          "@kind":"function",
          "@name":"VideoPlayer-GetDuration",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              }
            ]
          },
          "description":{
            "text":"Returns duration of the video in milliseconds."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GetDuration",
          "@kind":"function",
          "@name":"Type-VideoPlayer-GetDuration",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"number"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Returns duration of the video in milliseconds."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Pause",
          "@kind":"command",
          "@name":"VideoPlayer-Pause",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Pauses playback of the video. Playback can be resumed at the same location by calling the Start method."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Pause",
          "@kind":"command",
          "@name":"Type-VideoPlayer-Pause",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Pauses playback of the video. Playback can be resumed at the same location by calling the Start method."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SeekTo",
          "@kind":"command",
          "@name":"VideoPlayer-SeekTo",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"ms"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"ms/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"ms/number"
              }
            ]
          },
          "description":{
            "text":"Seeks to the requested time (specified in milliseconds) in the video. Note that if the video is paused, the frame shown will not be updated by the seek."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SeekTo",
          "@kind":"command",
          "@name":"Type-VideoPlayer-SeekTo",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"ms"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"ms/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"ms/number"
              }
            ]
          },
          "description":{
            "text":"Seeks to the requested time (specified in milliseconds) in the video. Note that if the video is paused, the frame shown will not be updated by the seek."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Start",
          "@kind":"command",
          "@name":"VideoPlayer-Start",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Starts playback of the video."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Start",
          "@kind":"command",
          "@name":"Type-VideoPlayer-Start",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Starts playback of the video."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"Voting",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"Voting",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"1"
              },
              {
                "@key":"ya-event-1",
                "@value":"Voting-GotBallot"
              },
              {
                "@key":"ya-event-2",
                "@value":"Voting-GotBallotConfirmation"
              },
              {
                "@key":"ya-event-3",
                "@value":"Voting-NoOpenPoll"
              },
              {
                "@key":"ya-event-4",
                "@value":"Voting-WebServiceError"
              },
              {
                "@key":"ya-prop-1",
                "@value":"BallotOptions/read-only-property/list/The list of ballot options."
              },
              {
                "@key":"ya-prop-2",
                "@value":"BallotQuestion/read-only-property/text/The question to be voted on."
              },
              {
                "@key":"ya-prop-3",
                "@value":"ServiceURL/read-write-property/text/The URL of the Voting service"
              },
              {
                "@key":"ya-prop-4",
                "@value":"UserChoice/read-write-property/text/The ballot choice to send to the server, which must be set before SendBallot is called. This must be one of BallotOptions."
              },
              {
                "@key":"ya-prop-5",
                "@value":"UserEmailAddress/read-only-property/text/The email address associated with this device. This property has been deprecated and always returns the empty text value."
              },
              {
                "@key":"ya-prop-6",
                "@value":"UserId/read-write-property/text/A text identifying the voter that is sent to the Voting server along with the vote. This must be set before SendBallot is called."
              },
              {
                "@key":"ya-method-1",
                "@value":"Voting-RequestBallot"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-Voting-RequestBallot"
              },
              {
                "@key":"ya-method-2",
                "@value":"Voting-SendBallot"
              },
              {
                "@key":"ya-type-method-2",
                "@value":"Type-Voting-SendBallot"
              }
            ]
          },
          "description":{
            "text":"The Voting component enables users to vote on a question by communicating with a Web service to retrieve a ballot and later sending back users' votes."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"GotBallot",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Voting-GotBallot",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Event indicating that a ballot was retrieved from the Web service and that the properties BallotQuestion and BallotOptions have been set. This is always preceded by a call to the method RequestBallot."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"GotBallotConfirmation",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Voting-GotBallotConfirmation",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Event confirming that the Voting service received the ballot."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"NoOpenPoll",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Voting-NoOpenPoll",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"cmd",
              "@is-indented":"yes",
              "@label":"do"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentEvent"
            }
          },
          "description":{
            "text":"Event indicating that the service has no open poll."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"WebServiceError",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Voting-WebServiceError",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"message",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"message"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"message/argument"
              }
            ]
          },
          "description":{
            "text":"Event indicating that the communication with the Web service resulted in an error."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"RequestBallot",
          "@kind":"command",
          "@name":"Voting-RequestBallot",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Send a request for a ballot to the Web service specified by the property ServiceURL. When the completes, one of the following events will be raised: GotBallot, NoOpenPoll, or WebServiceError."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"RequestBallot",
          "@kind":"command",
          "@name":"Type-Voting-RequestBallot",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Send a request for a ballot to the Web service specified by the property ServiceURL. When the completes, one of the following events will be raised: GotBallot, NoOpenPoll, or WebServiceError."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SendBallot",
          "@kind":"command",
          "@name":"Voting-SendBallot",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Send a completed ballot to the Web service. This should not be called until the properties UserId and UserChoice have been set by the application."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"SendBallot",
          "@kind":"command",
          "@name":"Type-Voting-SendBallot",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Send a completed ballot to the Web service. This should not be called until the properties UserId and UserChoice have been set by the application."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"Web",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"Web",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"3"
              },
              {
                "@key":"ya-event-1",
                "@value":"Web-GotFile"
              },
              {
                "@key":"ya-event-2",
                "@value":"Web-GotText"
              },
              {
                "@key":"ya-prop-1",
                "@value":"AllowCookies/read-write-property/boolean/Whether the cookies from a response should be saved and used in subsequent requests. Cookies are only supported on Android version 2.3 or greater."
              },
              {
                "@key":"ya-prop-2",
                "@value":"RequestHeaders/read-write-property/list/The request headers, as a list of two-element sublists. The first element of each sublist represents the request header field name. The second element of each sublist represents the request header field values, either a single value or a list containing multiple values."
              },
              {
                "@key":"ya-prop-3",
                "@value":"ResponseFileName/read-write-property/text/The name of the file where the response should be saved. If SaveResponse is true and ResponseFileName is empty, then a new file name will be generated."
              },
              {
                "@key":"ya-prop-4",
                "@value":"SaveResponse/read-write-property/boolean/Whether the response should be saved in a file."
              },
              {
                "@key":"ya-prop-5",
                "@value":"Url/read-write-property/text/The URL for the web request."
              },
              {
                "@key":"ya-method-1",
                "@value":"Web-BuildRequestData"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-Web-BuildRequestData"
              },
              {
                "@key":"ya-method-2",
                "@value":"Web-ClearCookies"
              },
              {
                "@key":"ya-type-method-2",
                "@value":"Type-Web-ClearCookies"
              },
              {
                "@key":"ya-method-3",
                "@value":"Web-Delete"
              },
              {
                "@key":"ya-type-method-3",
                "@value":"Type-Web-Delete"
              },
              {
                "@key":"ya-method-4",
                "@value":"Web-Get"
              },
              {
                "@key":"ya-type-method-4",
                "@value":"Type-Web-Get"
              },
              {
                "@key":"ya-method-5",
                "@value":"Web-HtmlTextDecode"
              },
              {
                "@key":"ya-type-method-5",
                "@value":"Type-Web-HtmlTextDecode"
              },
              {
                "@key":"ya-method-6",
                "@value":"Web-JsonTextDecode"
              },
              {
                "@key":"ya-type-method-6",
                "@value":"Type-Web-JsonTextDecode"
              },
              {
                "@key":"ya-method-7",
                "@value":"Web-PostFile"
              },
              {
                "@key":"ya-type-method-7",
                "@value":"Type-Web-PostFile"
              },
              {
                "@key":"ya-method-8",
                "@value":"Web-PostText"
              },
              {
                "@key":"ya-type-method-8",
                "@value":"Type-Web-PostText"
              },
              {
                "@key":"ya-method-9",
                "@value":"Web-PostTextWithEncoding"
              },
              {
                "@key":"ya-type-method-9",
                "@value":"Type-Web-PostTextWithEncoding"
              },
              {
                "@key":"ya-method-10",
                "@value":"Web-PutFile"
              },
              {
                "@key":"ya-type-method-10",
                "@value":"Type-Web-PutFile"
              },
              {
                "@key":"ya-method-11",
                "@value":"Web-PutText"
              },
              {
                "@key":"ya-type-method-11",
                "@value":"Type-Web-PutText"
              },
              {
                "@key":"ya-method-12",
                "@value":"Web-PutTextWithEncoding"
              },
              {
                "@key":"ya-type-method-12",
                "@value":"Type-Web-PutTextWithEncoding"
              },
              {
                "@key":"ya-method-13",
                "@value":"Web-UriEncode"
              },
              {
                "@key":"ya-type-method-13",
                "@value":"Type-Web-UriEncode"
              }
            ]
          },
          "description":{
            "text":"Non-visible component that provides functions for HTTP GET, POST, PUT, and DELETE requests."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"GotFile",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Web-GotFile",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"url",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"url"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"responseCode",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"responseCode"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"responseType",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"responseType"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"fileName",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"fileName"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"url/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"responseCode/argument"
              },
              {
                "@key":"socket-allow-3",
                "@value":"responseType/argument"
              },
              {
                "@key":"socket-allow-4",
                "@value":"fileName/argument"
              }
            ]
          },
          "description":{
            "text":"Event indicating that a request has finished."
          }
        },
        {
          "@color":"event",
          "@decorator":"when",
          "@initlabel":"GotText",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@name":"Web-GotText",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"url",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"url"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"responseCode",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"responseCode"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"responseType",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"responseType"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"responseContent",
                "DefaultArg":{
                  "@genus-name":"argument",
                  "@label":"responseContent"
                }
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"cmd",
                "@is-indented":"yes",
                "@label":"do"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentEvent"
              },
              {
                "@key":"socket-allow-1",
                "@value":"url/argument"
              },
              {
                "@key":"socket-allow-2",
                "@value":"responseCode/argument"
              },
              {
                "@key":"socket-allow-3",
                "@value":"responseType/argument"
              },
              {
                "@key":"socket-allow-4",
                "@value":"responseContent/argument"
              }
            ]
          },
          "description":{
            "text":"Event indicating that a request has finished."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"BuildRequestData",
          "@kind":"function",
          "@name":"Web-BuildRequestData",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"list"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"list/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"list/list"
              }
            ]
          },
          "description":{
            "text":"Converts a list of two-element sublists, representing name and value pairs, to a string formatted as application/x-www-form-urlencoded media type, suitable to pass to PostText."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"BuildRequestData",
          "@kind":"function",
          "@name":"Type-Web-BuildRequestData",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"list"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"list/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"list/list"
              }
            ]
          },
          "description":{
            "text":"Converts a list of two-element sublists, representing name and value pairs, to a string formatted as application/x-www-form-urlencoded media type, suitable to pass to PostText."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ClearCookies",
          "@kind":"command",
          "@name":"Web-ClearCookies",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Clears all cookies for this Web component."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ClearCookies",
          "@kind":"command",
          "@name":"Type-Web-ClearCookies",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Clears all cookies for this Web component."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Delete",
          "@kind":"command",
          "@name":"Web-Delete",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Performs an HTTP DELETE request using the Url property and retrieves the response. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Delete",
          "@kind":"command",
          "@name":"Type-Web-Delete",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Performs an HTTP DELETE request using the Url property and retrieves the response. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Get",
          "@kind":"command",
          "@name":"Web-Get",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Performs an HTTP GET request using the Url property and retrieves the response. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"Get",
          "@kind":"command",
          "@name":"Type-Web-Get",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Performs an HTTP GET request using the Url property and retrieves the response. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"HtmlTextDecode",
          "@kind":"function",
          "@name":"Web-HtmlTextDecode",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"htmlText"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"htmlText/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"htmlText/text"
              }
            ]
          },
          "description":{
            "text":"Decodes the given HTML text value. HTML character entities such as &amp;, &lt;, &gt;, &apos;, and &quot; are changed to &, <, >, ', and \". Entities such as &#xhhhh, and &#nnnn are changed to the appropriate characters."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"HtmlTextDecode",
          "@kind":"function",
          "@name":"Type-Web-HtmlTextDecode",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"htmlText"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"htmlText/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"htmlText/text"
              }
            ]
          },
          "description":{
            "text":"Decodes the given HTML text value. HTML character entities such as &amp;, &lt;, &gt;, &apos;, and &quot; are changed to &, <, >, ', and \". Entities such as &#xhhhh, and &#nnnn are changed to the appropriate characters."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"JsonTextDecode",
          "@kind":"function",
          "@name":"Web-JsonTextDecode",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"jsonText"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"type-exclude-1",
                "@value":"argument"
              },
              {
                "@key":"socket-allow-1",
                "@value":"jsonText/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"jsonText/text"
              }
            ]
          },
          "description":{
            "text":"Decodes the given JSON encoded value to produce a corresponding AppInventor value. A JSON list [x, y, z] decodes to a list (x y z), A JSON object with name A and value B, (denoted as A:B enclosed in curly braces) decodes to a list ((A B)), that is, a list containing the two-element list (A B)."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"JsonTextDecode",
          "@kind":"function",
          "@name":"Type-Web-JsonTextDecode",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"jsonText"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"type-exclude-1",
                "@value":"argument"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"jsonText/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"jsonText/text"
              }
            ]
          },
          "description":{
            "text":"Decodes the given JSON encoded value to produce a corresponding AppInventor value. A JSON list [x, y, z] decodes to a list (x y z), A JSON object with name A and value B, (denoted as A:B enclosed in curly braces) decodes to a list ((A B)), that is, a list containing the two-element list (A B)."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"PostFile",
          "@kind":"command",
          "@name":"Web-PostFile",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"path"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"path/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"path/text"
              }
            ]
          },
          "description":{
            "text":"Performs an HTTP POST request using the Url property and data from the specified file. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"PostFile",
          "@kind":"command",
          "@name":"Type-Web-PostFile",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"path"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"path/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"path/text"
              }
            ]
          },
          "description":{
            "text":"Performs an HTTP POST request using the Url property and data from the specified file. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"PostText",
          "@kind":"command",
          "@name":"Web-PostText",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"text"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"text/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"text/text"
              }
            ]
          },
          "description":{
            "text":"Performs an HTTP POST request using the Url property and the specified text. The characters of the text are encoded using UTF-8 encoding. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The responseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"PostText",
          "@kind":"command",
          "@name":"Type-Web-PostText",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"text/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"text/text"
              }
            ]
          },
          "description":{
            "text":"Performs an HTTP POST request using the Url property and the specified text. The characters of the text are encoded using UTF-8 encoding. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The responseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"PostTextWithEncoding",
          "@kind":"command",
          "@name":"Web-PostTextWithEncoding",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"encoding"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"text/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"encoding/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"text/text"
              },
              {
                "@key":"socket-allow-4",
                "@value":"encoding/text"
              }
            ]
          },
          "description":{
            "text":"Performs an HTTP POST request using the Url property and the specified text. The characters of the text are encoded using the given encoding. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"PostTextWithEncoding",
          "@kind":"command",
          "@name":"Type-Web-PostTextWithEncoding",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"encoding"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"text/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"encoding/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"text/text"
              },
              {
                "@key":"socket-allow-6",
                "@value":"encoding/text"
              }
            ]
          },
          "description":{
            "text":"Performs an HTTP POST request using the Url property and the specified text. The characters of the text are encoded using the given encoding. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"PutFile",
          "@kind":"command",
          "@name":"Web-PutFile",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"path"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"path/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"path/text"
              }
            ]
          },
          "description":{
            "text":"Performs an HTTP PUT request using the Url property and data from the specified file. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"PutFile",
          "@kind":"command",
          "@name":"Type-Web-PutFile",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"path"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"path/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"path/text"
              }
            ]
          },
          "description":{
            "text":"Performs an HTTP PUT request using the Url property and data from the specified file. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"PutText",
          "@kind":"command",
          "@name":"Web-PutText",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"text"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"text/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"text/text"
              }
            ]
          },
          "description":{
            "text":"Performs an HTTP PUT request using the Url property and the specified text. The characters of the text are encoded using UTF-8 encoding. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The responseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"PutText",
          "@kind":"command",
          "@name":"Type-Web-PutText",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"text/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"text/text"
              }
            ]
          },
          "description":{
            "text":"Performs an HTTP PUT request using the Url property and the specified text. The characters of the text are encoded using UTF-8 encoding. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The responseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"PutTextWithEncoding",
          "@kind":"command",
          "@name":"Web-PutTextWithEncoding",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"encoding"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"text/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"encoding/value"
              },
              {
                "@key":"socket-allow-3",
                "@value":"text/text"
              },
              {
                "@key":"socket-allow-4",
                "@value":"encoding/text"
              }
            ]
          },
          "description":{
            "text":"Performs an HTTP PUT request using the Url property and the specified text. The characters of the text are encoded using the given encoding. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"PutTextWithEncoding",
          "@kind":"command",
          "@name":"Type-Web-PutTextWithEncoding",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"encoding"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"text/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"encoding/value"
              },
              {
                "@key":"socket-allow-5",
                "@value":"text/text"
              },
              {
                "@key":"socket-allow-6",
                "@value":"encoding/text"
              }
            ]
          },
          "description":{
            "text":"Performs an HTTP PUT request using the Url property and the specified text. The characters of the text are encoded using the given encoding. If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file. If the SaveResponse property is false, the GotText event will be triggered."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"UriEncode",
          "@kind":"function",
          "@name":"Web-UriEncode",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"text/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"text/text"
              }
            ]
          },
          "description":{
            "text":"Encodes the given text value so that it can be used in a URL."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"UriEncode",
          "@kind":"function",
          "@name":"Type-Web-UriEncode",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"text"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"text"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"text/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"text/text"
              }
            ]
          },
          "description":{
            "text":"Encodes the given text value so that it can be used in a URL."
          }
        },
        {
          "@color":"grey",
          "@editable-label":"no",
          "@initlabel":"WebViewer",
          "@is-starter":"yes",
          "@is-terminator":"yes",
          "@kind":"command",
          "@label-unique":"yes",
          "@name":"WebViewer",
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"component"
              },
              {
                "@key":"component-version",
                "@value":"3"
              },
              {
                "@key":"ya-prop-1",
                "@value":"Column/invisible-property/number/"
              },
              {
                "@key":"ya-prop-2",
                "@value":"CurrentPageTitle/read-only-property/text/Title of the page currently viewed"
              },
              {
                "@key":"ya-prop-3",
                "@value":"CurrentUrl/read-only-property/text/URL of the page currently viewed. This could be different from the Home URL if new pages were visited by following links."
              },
              {
                "@key":"ya-prop-4",
                "@value":"FollowLinks/read-write-property/boolean/Determines whether to follow links when they are tapped in the WebViewer. If you follow links, you can use GoBack and GoForward to navigate the browser history."
              },
              {
                "@key":"ya-prop-5",
                "@value":"Height/read-write-property/number/"
              },
              {
                "@key":"ya-prop-6",
                "@value":"HomeUrl/read-write-property/text/URL of the page the WebViewer should initially open to. Setting this will load the page."
              },
              {
                "@key":"ya-prop-7",
                "@value":"PromptforPermission/read-write-property/boolean/If True, then prompt the user of the WebView to give permission to access the geolocation API. If False, then assume permission is granted."
              },
              {
                "@key":"ya-prop-8",
                "@value":"Row/invisible-property/number/"
              },
              {
                "@key":"ya-prop-9",
                "@value":"UsesLocation/invisible-property/boolean/Whether or not to give the application permission to use the Javascript geolocation API."
              },
              {
                "@key":"ya-prop-10",
                "@value":"Visible/read-write-property/boolean/Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden."
              },
              {
                "@key":"ya-prop-11",
                "@value":"Width/read-write-property/number/"
              },
              {
                "@key":"ya-method-1",
                "@value":"WebViewer-CanGoBack"
              },
              {
                "@key":"ya-type-method-1",
                "@value":"Type-WebViewer-CanGoBack"
              },
              {
                "@key":"ya-method-2",
                "@value":"WebViewer-CanGoForward"
              },
              {
                "@key":"ya-type-method-2",
                "@value":"Type-WebViewer-CanGoForward"
              },
              {
                "@key":"ya-method-3",
                "@value":"WebViewer-ClearLocations"
              },
              {
                "@key":"ya-type-method-3",
                "@value":"Type-WebViewer-ClearLocations"
              },
              {
                "@key":"ya-method-4",
                "@value":"WebViewer-GoBack"
              },
              {
                "@key":"ya-type-method-4",
                "@value":"Type-WebViewer-GoBack"
              },
              {
                "@key":"ya-method-5",
                "@value":"WebViewer-GoForward"
              },
              {
                "@key":"ya-type-method-5",
                "@value":"Type-WebViewer-GoForward"
              },
              {
                "@key":"ya-method-6",
                "@value":"WebViewer-GoHome"
              },
              {
                "@key":"ya-type-method-6",
                "@value":"Type-WebViewer-GoHome"
              },
              {
                "@key":"ya-method-7",
                "@value":"WebViewer-GoToUrl"
              },
              {
                "@key":"ya-type-method-7",
                "@value":"Type-WebViewer-GoToUrl"
              }
            ]
          },
          "description":{
            "text":"Component for viewing Web pages. The Home URL can be specified in the Designer or in the Blocks Editor. The view can be set to follow links when they are tapped, and users can fill in Web forms. Warning: This is not a full browser. For example, pressing the phone's hardware Back key will exit the app, rather than move back in the browser history."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"CanGoBack",
          "@kind":"function",
          "@name":"WebViewer-CanGoBack",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              }
            ]
          },
          "description":{
            "text":"Returns true if the WebViewer can go back in the history list."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"CanGoBack",
          "@kind":"function",
          "@name":"Type-WebViewer-CanGoBack",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Returns true if the WebViewer can go back in the history list."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"CanGoForward",
          "@kind":"function",
          "@name":"WebViewer-CanGoForward",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"plug",
              "@connector-type":"poly",
              "@label":""
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              }
            ]
          },
          "description":{
            "text":"Returns true if the WebViewer can go forward in the history list."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"CanGoForward",
          "@kind":"function",
          "@name":"Type-WebViewer-CanGoForward",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"plug",
                "@connector-type":"poly",
                "@label":""
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"plug-type-1",
                "@value":"boolean"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Returns true if the WebViewer can go forward in the history list."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ClearLocations",
          "@kind":"command",
          "@name":"WebViewer-ClearLocations",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Clear stored location permissions."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"ClearLocations",
          "@kind":"command",
          "@name":"Type-WebViewer-ClearLocations",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Clear stored location permissions."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GoBack",
          "@kind":"command",
          "@name":"WebViewer-GoBack",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Go back to the previous page in the history list. Does nothing if there is no previous page."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GoBack",
          "@kind":"command",
          "@name":"Type-WebViewer-GoBack",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Go back to the previous page in the history list. Does nothing if there is no previous page."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GoForward",
          "@kind":"command",
          "@name":"WebViewer-GoForward",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Go forward to the next page in the history list. Does nothing if there is no next page."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GoForward",
          "@kind":"command",
          "@name":"Type-WebViewer-GoForward",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Go forward to the next page in the history list. Does nothing if there is no next page."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GoHome",
          "@kind":"command",
          "@name":"WebViewer-GoHome",
          "BlockConnectors":null,
          "LangSpecProperties":{
            "LangSpecProperty":{
              "@key":"ya-kind",
              "@value":"componentMethod"
            }
          },
          "description":{
            "text":"Loads the home URL page. This happens automatically when the home URL is changed."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GoHome",
          "@kind":"command",
          "@name":"Type-WebViewer-GoHome",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"component"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              }
            ]
          },
          "description":{
            "text":"Loads the home URL page. This happens automatically when the home URL is changed."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GoToUrl",
          "@kind":"command",
          "@name":"WebViewer-GoToUrl",
          "BlockConnectors":{
            "BlockConnector":{
              "@connector-kind":"socket",
              "@connector-type":"poly",
              "@label":"url"
            }
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentMethod"
              },
              {
                "@key":"socket-allow-1",
                "@value":"url/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"url/text"
              }
            ]
          },
          "description":{
            "text":"Load the page at the given URL."
          }
        },
        {
          "@color":"call",
          "@decorator":"call",
          "@initlabel":"GoToUrl",
          "@kind":"command",
          "@name":"Type-WebViewer-GoToUrl",
          "BlockConnectors":{
            "BlockConnector":[
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"component"
              },
              {
                "@connector-kind":"socket",
                "@connector-type":"poly",
                "@label":"url"
              }
            ]
          },
          "LangSpecProperties":{
            "LangSpecProperty":[
              {
                "@key":"ya-kind",
                "@value":"componentTypeMethod"
              },
              {
                "@key":"is-from-component-type",
                "@value":"true"
              },
              {
                "@key":"socket-allow-1",
                "@value":"component/value"
              },
              {
                "@key":"socket-allow-2",
                "@value":"component/component"
              },
              {
                "@key":"socket-allow-3",
                "@value":"url/value"
              },
              {
                "@key":"socket-allow-4",
                "@value":"url/text"
              }
            ]
          },
          "description":{
            "text":"Load the page at the given URL."
          }
        }
      ],
      "ObsoleteBlockGenus":[
        {
          "@color":"list",
          "@initlabel":"list",
          "@name":"list"
        },
        {
          "@color":"list",
          "@initlabel":"set list item",
          "@name":"set-list-item"
        },
        {
          "@color":"list",
          "@initlabel":"add items to list",
          "@name":"add-to-list"
        },
        {
          "@color":"list",
          "@initlabel":"adjoin",
          "@name":"adjoin"
        },
        {
          "@color":"list",
          "@initlabel":"member",
          "@name":"member"
        },
        {
          "@color":"list",
          "@initlabel":"first",
          "@name":"list-first"
        },
        {
          "@color":"list",
          "@initlabel":"rest",
          "@name":"list-rest"
        },
        {
          "@color":"list",
          "@initlabel":"pick list item",
          "@name":"pick-list-item"
        }
      ]
    },
    "Pages":{
      "@drawer-with-page":"yes",
      "Page":{
        "@page-drawer":"My Definitions",
        "@page-name":" ",
        "@page-width":"800"
      }
    }
  }
}